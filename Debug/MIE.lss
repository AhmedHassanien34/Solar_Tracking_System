
MIE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003474  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00003474  00003508  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003c  00800068  00800068  00003510  2**0
                  ALLOC
  3 .stab         00002808  00000000  00000000  00003510  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013d7  00000000  00000000  00005d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000070ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000724f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000073de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00009423  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a524  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b4a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b628  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b8ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c178  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 39 11 	jmp	0x2272	; 0x2272 <__vector_4>
      14:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__vector_5>
      18:	0c 94 46 17 	jmp	0x2e8c	; 0x2e8c <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 f7 0f 	jmp	0x1fee	; 0x1fee <__vector_10>
      2c:	0c 94 9e 0f 	jmp	0x1f3c	; 0x1f3c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a4 3a       	cpi	r26, 0xA4	; 164
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 e7       	ldi	r30, 0x74	; 116
      78:	f4 e3       	ldi	r31, 0x34	; 52
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <main>
      8a:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1d 1a 	jmp	0x343a	; 0x343a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0d 1a 	jmp	0x341a	; 0x341a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 29 1a 	jmp	0x3452	; 0x3452 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0d 1a 	jmp	0x341a	; 0x341a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 29 1a 	jmp	0x3452	; 0x3452 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1d 1a 	jmp	0x343a	; 0x343a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 09 1a 	jmp	0x3412	; 0x3412 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 25 1a 	jmp	0x344a	; 0x344a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 0d 1a 	jmp	0x341a	; 0x341a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 29 1a 	jmp	0x3452	; 0x3452 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 0d 1a 	jmp	0x341a	; 0x341a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 29 1a 	jmp	0x3452	; 0x3452 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 0d 1a 	jmp	0x341a	; 0x341a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 29 1a 	jmp	0x3452	; 0x3452 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_voidInit>:
static u8 ADC_u8ChainConversionIndex;			/*Global variable to carry the current conversion index*/
static u8 ADC_u8BusyState= IDLE;
static u8 ADC_u8ISRSource;

void ADC_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
#if VRS == AREF
	CLR_BIT(ADMUX,ADMUX_REFS0);
	CLR_BIT(ADMUX,ADMUX_REFS1);

#elif VRS == AVCC
	SET_BIT(ADMUX,ADMUX_REFS0);
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 64       	ori	r24, 0x40	; 64
     cb2:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
     cb4:	a7 e2       	ldi	r26, 0x27	; 39
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e2       	ldi	r30, 0x27	; 39
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	8f 77       	andi	r24, 0x7F	; 127
     cc0:	8c 93       	st	X, r24
	/*Select Resolution*/
#if Resolution == _8_Bits
	SET_BIT(ADMUX,ADMUX_ADLAR);

#elif  Resolution == _10_Bits
	CLR_BIT(ADMUX,ADMUX_ADLAR);
     cc2:	a7 e2       	ldi	r26, 0x27	; 39
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7d       	andi	r24, 0xDF	; 223
     cce:	8c 93       	st	X, r24
#else
#error "Wrong Resolution configuration option"
#endif

	/*Set Prescaler*/
	ADMUX &= 0b11111000;
     cd0:	a7 e2       	ldi	r26, 0x27	; 39
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e7 e2       	ldi	r30, 0x27	; 39
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	88 7f       	andi	r24, 0xF8	; 248
     cdc:	8c 93       	st	X, r24
	ADMUX |= PrescalerSelections;
     cde:	a7 e2       	ldi	r26, 0x27	; 39
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e7 e2       	ldi	r30, 0x27	; 39
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	87 60       	ori	r24, 0x07	; 7
     cea:	8c 93       	st	X, r24

	/*Enable peripheral*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     cec:	a6 e2       	ldi	r26, 0x26	; 38
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e6 e2       	ldi	r30, 0x26	; 38
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	80 68       	ori	r24, 0x80	; 128
     cf8:	8c 93       	st	X, r24


}
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	08 95       	ret

00000d00 <ADC_u8GetChannelReading>:

u16 ADC_u8GetChannelReading(u8 Copy_u8Channel)
{
     d00:	df 93       	push	r29
     d02:	cf 93       	push	r28
     d04:	0f 92       	push	r0
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
     d0a:	89 83       	std	Y+1, r24	; 0x01
	/*Clear the MUX bits in ADMUX register*/
	ADMUX &= 0b11100000;
     d0c:	a7 e2       	ldi	r26, 0x27	; 39
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e7 e2       	ldi	r30, 0x27	; 39
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	80 7e       	andi	r24, 0xE0	; 224
     d18:	8c 93       	st	X, r24

	/*Set the required channel into MUX bits*/
	ADMUX |= Copy_u8Channel;
     d1a:	a7 e2       	ldi	r26, 0x27	; 39
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	e7 e2       	ldi	r30, 0x27	; 39
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	90 81       	ld	r25, Z
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	89 2b       	or	r24, r25
     d28:	8c 93       	st	X, r24

	/*Start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
     d2a:	a6 e2       	ldi	r26, 0x26	; 38
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e6 e2       	ldi	r30, 0x26	; 38
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	80 64       	ori	r24, 0x40	; 64
     d36:	8c 93       	st	X, r24

	/*Polling (busy waiting) until the conversion complete flag is set*/
	while((GET_BIT(ADCSRA,ADCSRA_ADIF))==0);
     d38:	e6 e2       	ldi	r30, 0x26	; 38
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	82 95       	swap	r24
     d40:	8f 70       	andi	r24, 0x0F	; 15
     d42:	88 2f       	mov	r24, r24
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	81 70       	andi	r24, 0x01	; 1
     d48:	90 70       	andi	r25, 0x00	; 0
     d4a:	00 97       	sbiw	r24, 0x00	; 0
     d4c:	a9 f3       	breq	.-22     	; 0xd38 <ADC_u8GetChannelReading+0x38>

	/*Clear the conversion complete flag*/
	SET_BIT(ADCSRA,ADCSRA_ADIF);
     d4e:	a6 e2       	ldi	r26, 0x26	; 38
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e6 e2       	ldi	r30, 0x26	; 38
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	80 61       	ori	r24, 0x10	; 16
     d5a:	8c 93       	st	X, r24
	/*Return the reading*/
#if Resolution == _8_Bits
	return ADCH;

#elif Resolution == _10_Bits
	return ADC;
     d5c:	e4 e2       	ldi	r30, 0x24	; 36
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	91 81       	ldd	r25, Z+1	; 0x01

#endif
}
     d64:	0f 90       	pop	r0
     d66:	cf 91       	pop	r28
     d68:	df 91       	pop	r29
     d6a:	08 95       	ret

00000d6c <ADC_u8StartConversionSynch>:


u8 ADC_u8StartConversionSynch(u8 Copy_u8Channel, u8* Copy_pu8Reading)
{
     d6c:	df 93       	push	r29
     d6e:	cf 93       	push	r28
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	28 97       	sbiw	r28, 0x08	; 8
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	cd bf       	out	0x3d, r28	; 61
     d80:	8e 83       	std	Y+6, r24	; 0x06
     d82:	78 87       	std	Y+8, r23	; 0x08
     d84:	6f 83       	std	Y+7, r22	; 0x07
	u32 Local_u32Counter=0;
     d86:	1a 82       	std	Y+2, r1	; 0x02
     d88:	1b 82       	std	Y+3, r1	; 0x03
     d8a:	1c 82       	std	Y+4, r1	; 0x04
     d8c:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorState=OK;
     d8e:	19 82       	std	Y+1, r1	; 0x01
	if (ADC_u8BusyState == IDLE)
     d90:	80 91 72 00 	lds	r24, 0x0072
     d94:	88 23       	and	r24, r24
     d96:	09 f0       	breq	.+2      	; 0xd9a <ADC_u8StartConversionSynch+0x2e>
     d98:	5c c0       	rjmp	.+184    	; 0xe52 <ADC_u8StartConversionSynch+0xe6>
	{
		/*ADC is now busy*/
		ADC_u8BusyState= BUSY;
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	80 93 72 00 	sts	0x0072, r24

		/*Clear the MUX bits in ADMUX register*/
		ADMUX &= 0b11100000;
     da0:	a7 e2       	ldi	r26, 0x27	; 39
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e7 e2       	ldi	r30, 0x27	; 39
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	80 7e       	andi	r24, 0xE0	; 224
     dac:	8c 93       	st	X, r24

		/*Set the required channel into the MUX bits*/
		ADMUX|= Copy_u8Channel;
     dae:	a7 e2       	ldi	r26, 0x27	; 39
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e7 e2       	ldi	r30, 0x27	; 39
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	90 81       	ld	r25, Z
     db8:	8e 81       	ldd	r24, Y+6	; 0x06
     dba:	89 2b       	or	r24, r25
     dbc:	8c 93       	st	X, r24

		/*Start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
     dbe:	a6 e2       	ldi	r26, 0x26	; 38
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e6 e2       	ldi	r30, 0x26	; 38
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	80 64       	ori	r24, 0x40	; 64
     dca:	8c 93       	st	X, r24
     dcc:	0b c0       	rjmp	.+22     	; 0xde4 <ADC_u8StartConversionSynch+0x78>

		/*Polling (busy waiting) until the conversion complete flag is set or counter reaching timeout value*/
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0)  && (Local_u32Counter != ADC_u32TIMEOUT ) )
		{
			Local_u32Counter++;
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	9b 81       	ldd	r25, Y+3	; 0x03
     dd2:	ac 81       	ldd	r26, Y+4	; 0x04
     dd4:	bd 81       	ldd	r27, Y+5	; 0x05
     dd6:	01 96       	adiw	r24, 0x01	; 1
     dd8:	a1 1d       	adc	r26, r1
     dda:	b1 1d       	adc	r27, r1
     ddc:	8a 83       	std	Y+2, r24	; 0x02
     dde:	9b 83       	std	Y+3, r25	; 0x03
     de0:	ac 83       	std	Y+4, r26	; 0x04
     de2:	bd 83       	std	Y+5, r27	; 0x05

		/*Start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);

		/*Polling (busy waiting) until the conversion complete flag is set or counter reaching timeout value*/
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0)  && (Local_u32Counter != ADC_u32TIMEOUT ) )
     de4:	e6 e2       	ldi	r30, 0x26	; 38
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	82 95       	swap	r24
     dec:	8f 70       	andi	r24, 0x0F	; 15
     dee:	88 2f       	mov	r24, r24
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	81 70       	andi	r24, 0x01	; 1
     df4:	90 70       	andi	r25, 0x00	; 0
     df6:	00 97       	sbiw	r24, 0x00	; 0
     df8:	61 f4       	brne	.+24     	; 0xe12 <ADC_u8StartConversionSynch+0xa6>
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	9b 81       	ldd	r25, Y+3	; 0x03
     dfe:	ac 81       	ldd	r26, Y+4	; 0x04
     e00:	bd 81       	ldd	r27, Y+5	; 0x05
     e02:	80 35       	cpi	r24, 0x50	; 80
     e04:	23 ec       	ldi	r18, 0xC3	; 195
     e06:	92 07       	cpc	r25, r18
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	a2 07       	cpc	r26, r18
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	b2 07       	cpc	r27, r18
     e10:	f1 f6       	brne	.-68     	; 0xdce <ADC_u8StartConversionSynch+0x62>
		{
			Local_u32Counter++;
		}
		if(Local_u32Counter== ADC_u32TIMEOUT)
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	9b 81       	ldd	r25, Y+3	; 0x03
     e16:	ac 81       	ldd	r26, Y+4	; 0x04
     e18:	bd 81       	ldd	r27, Y+5	; 0x05
     e1a:	80 35       	cpi	r24, 0x50	; 80
     e1c:	23 ec       	ldi	r18, 0xC3	; 195
     e1e:	92 07       	cpc	r25, r18
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	a2 07       	cpc	r26, r18
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	b2 07       	cpc	r27, r18
     e28:	19 f4       	brne	.+6      	; 0xe30 <ADC_u8StartConversionSynch+0xc4>
		{
			/*Loop is broken because the timeout is reached*/
			Local_u8ErrorState=NOK;
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	89 83       	std	Y+1, r24	; 0x01
     e2e:	13 c0       	rjmp	.+38     	; 0xe56 <ADC_u8StartConversionSynch+0xea>
		}
		else
		{
			/* Loop is broken because flag is raised */
			/*clear the conversion complete flag*/
			SET_BIT(ADCSRA,ADCSRA_ADIF);
     e30:	a6 e2       	ldi	r26, 0x26	; 38
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e6 e2       	ldi	r30, 0x26	; 38
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	80 61       	ori	r24, 0x10	; 16
     e3c:	8c 93       	st	X, r24
			/*Return the reading*/
#if Resolution == _8_Bits
			*Copy_pu8Reading = ADCH;

#elif Resolution == _10_Bits
			*Copy_pu8Reading =  ADC;
     e3e:	e4 e2       	ldi	r30, 0x24	; 36
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	91 81       	ldd	r25, Z+1	; 0x01
     e46:	ef 81       	ldd	r30, Y+7	; 0x07
     e48:	f8 85       	ldd	r31, Y+8	; 0x08
     e4a:	80 83       	st	Z, r24

#endif

			/*ADC is finished, return it to IDLE*/
			ADC_u8BusyState= IDLE;
     e4c:	10 92 72 00 	sts	0x0072, r1
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <ADC_u8StartConversionSynch+0xea>
		}
	}
	else
	{
		Local_u8ErrorState= BUSY;
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     e56:	89 81       	ldd	r24, Y+1	; 0x01
}
     e58:	28 96       	adiw	r28, 0x08	; 8
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	de bf       	out	0x3e, r29	; 62
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	cf 91       	pop	r28
     e66:	df 91       	pop	r29
     e68:	08 95       	ret

00000e6a <ADC_u8StartConversionAsynch>:

u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel, u8* Copy_pu8Reading, void(*Copy_pvNotificationFunc)(void))
{
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <ADC_u8StartConversionAsynch+0x6>
     e70:	00 d0       	rcall	.+0      	; 0xe72 <ADC_u8StartConversionAsynch+0x8>
     e72:	00 d0       	rcall	.+0      	; 0xe74 <ADC_u8StartConversionAsynch+0xa>
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	8a 83       	std	Y+2, r24	; 0x02
     e7a:	7c 83       	std	Y+4, r23	; 0x04
     e7c:	6b 83       	std	Y+3, r22	; 0x03
     e7e:	5e 83       	std	Y+6, r21	; 0x06
     e80:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_uErrorState=OK;
     e82:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState== IDLE)
     e84:	80 91 72 00 	lds	r24, 0x0072
     e88:	88 23       	and	r24, r24
     e8a:	d1 f5       	brne	.+116    	; 0xf00 <ADC_u8StartConversionAsynch+0x96>
	{
		if((Copy_pu8Reading == NULL) || (Copy_pvNotificationFunc == NULL))
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	9c 81       	ldd	r25, Y+4	; 0x04
     e90:	00 97       	sbiw	r24, 0x00	; 0
     e92:	21 f0       	breq	.+8      	; 0xe9c <ADC_u8StartConversionAsynch+0x32>
     e94:	8d 81       	ldd	r24, Y+5	; 0x05
     e96:	9e 81       	ldd	r25, Y+6	; 0x06
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	19 f4       	brne	.+6      	; 0xea2 <ADC_u8StartConversionAsynch+0x38>
		{
			Local_uErrorState= NULL_POINTER;
     e9c:	82 e0       	ldi	r24, 0x02	; 2
     e9e:	89 83       	std	Y+1, r24	; 0x01
     ea0:	31 c0       	rjmp	.+98     	; 0xf04 <ADC_u8StartConversionAsynch+0x9a>
		}
		else
		{
			/*make ADC busy in order not to work until being idle*/
			ADC_u8BusyState= BUSY;
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	80 93 72 00 	sts	0x0072, r24

			/*Make ISR Source : Chain Asynchronous*/
			ADC_u8ISRSource = SingleChannelAsynch;
     ea8:	10 92 74 00 	sts	0x0074, r1


			/*Initialize the reading variable globally*/
			ADC_pu8Reading = Copy_pu8Reading;
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	9c 81       	ldd	r25, Y+4	; 0x04
     eb0:	90 93 69 00 	sts	0x0069, r25
     eb4:	80 93 68 00 	sts	0x0068, r24

			/*Initialize the callback notification function globally*/
			ADC_pvCallBackNotificationFunc= Copy_pvNotificationFunc;
     eb8:	8d 81       	ldd	r24, Y+5	; 0x05
     eba:	9e 81       	ldd	r25, Y+6	; 0x06
     ebc:	90 93 6b 00 	sts	0x006B, r25
     ec0:	80 93 6a 00 	sts	0x006A, r24

			/*Clear the MUX bits in ADMUX register*/
			ADMUX &= 0b11100000;
     ec4:	a7 e2       	ldi	r26, 0x27	; 39
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e7 e2       	ldi	r30, 0x27	; 39
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	80 7e       	andi	r24, 0xE0	; 224
     ed0:	8c 93       	st	X, r24

			/*Set the required channel into the MUX bits*/
			ADMUX|= Copy_u8Channel;
     ed2:	a7 e2       	ldi	r26, 0x27	; 39
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e7 e2       	ldi	r30, 0x27	; 39
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	90 81       	ld	r25, Z
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	89 2b       	or	r24, r25
     ee0:	8c 93       	st	X, r24

			/*Start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     ee2:	a6 e2       	ldi	r26, 0x26	; 38
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e6 e2       	ldi	r30, 0x26	; 38
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	80 64       	ori	r24, 0x40	; 64
     eee:	8c 93       	st	X, r24

			/*ADC interrupt enable*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     ef0:	a6 e2       	ldi	r26, 0x26	; 38
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e6 e2       	ldi	r30, 0x26	; 38
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	88 60       	ori	r24, 0x08	; 8
     efc:	8c 93       	st	X, r24
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <ADC_u8StartConversionAsynch+0x9a>
		}
	}
	else
	{
		Local_uErrorState= BUSY;
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_uErrorState;
     f04:	89 81       	ldd	r24, Y+1	; 0x01
}
     f06:	26 96       	adiw	r28, 0x06	; 6
     f08:	0f b6       	in	r0, 0x3f	; 63
     f0a:	f8 94       	cli
     f0c:	de bf       	out	0x3e, r29	; 62
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	cd bf       	out	0x3d, r28	; 61
     f12:	cf 91       	pop	r28
     f14:	df 91       	pop	r29
     f16:	08 95       	ret

00000f18 <ADC_u8StartChainAsynch>:

u8 ADC_u8StartChainAsynch(Chain_t * Copy_Chain)
{
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <ADC_u8StartChainAsynch+0x6>
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <ADC_u8StartChainAsynch+0x8>
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	9b 83       	std	Y+3, r25	; 0x03
     f26:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
     f28:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_Chain == NULL)
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	9b 81       	ldd	r25, Y+3	; 0x03
     f2e:	00 97       	sbiw	r24, 0x00	; 0
     f30:	29 f4       	brne	.+10     	; 0xf3c <ADC_u8StartChainAsynch+0x24>
	{
		return Local_u8ErrorState = NULL_POINTER;
     f32:	82 e0       	ldi	r24, 0x02	; 2
     f34:	89 83       	std	Y+1, r24	; 0x01
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	8c 83       	std	Y+4, r24	; 0x04
     f3a:	5a c0       	rjmp	.+180    	; 0xff0 <ADC_u8StartChainAsynch+0xd8>
	}
	else
	{
		if(ADC_u8BusyState == IDLE)
     f3c:	80 91 72 00 	lds	r24, 0x0072
     f40:	88 23       	and	r24, r24
     f42:	21 f4       	brne	.+8      	; 0xf4c <ADC_u8StartChainAsynch+0x34>
		{
			ADC_u8BusyState = BUSY;
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	80 93 72 00 	sts	0x0072, r24
     f4a:	50 c0       	rjmp	.+160    	; 0xfec <ADC_u8StartChainAsynch+0xd4>
		}
		else
		{
			/*ADC is now busy*/
			Local_u8ErrorState = BUSY;
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	89 83       	std	Y+1, r24	; 0x01

			/*MakIe ISR Source: Single channel asynchronous*/
			ADC_u8ISRSource = ChainAsynch;
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	80 93 74 00 	sts	0x0074, r24

			/*Initialize Chain channel Array*/
			ADC_pu8ChainChannelArr = Copy_Chain->Channel;
     f56:	ea 81       	ldd	r30, Y+2	; 0x02
     f58:	fb 81       	ldd	r31, Y+3	; 0x03
     f5a:	80 81       	ld	r24, Z
     f5c:	91 81       	ldd	r25, Z+1	; 0x01
     f5e:	90 93 6d 00 	sts	0x006D, r25
     f62:	80 93 6c 00 	sts	0x006C, r24

			/*Initialize Result Array*/
			ADC_pu16ChainResultArr = Copy_Chain->Result;
     f66:	ea 81       	ldd	r30, Y+2	; 0x02
     f68:	fb 81       	ldd	r31, Y+3	; 0x03
     f6a:	82 81       	ldd	r24, Z+2	; 0x02
     f6c:	93 81       	ldd	r25, Z+3	; 0x03
     f6e:	90 93 71 00 	sts	0x0071, r25
     f72:	80 93 70 00 	sts	0x0070, r24

			/*Initialize Chain Size*/
			ADC_pu8Size = Copy_Chain->Size;
     f76:	ea 81       	ldd	r30, Y+2	; 0x02
     f78:	fb 81       	ldd	r31, Y+3	; 0x03
     f7a:	84 81       	ldd	r24, Z+4	; 0x04
     f7c:	88 2f       	mov	r24, r24
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	90 93 6f 00 	sts	0x006F, r25
     f84:	80 93 6e 00 	sts	0x006E, r24

			/*Initialize Notification function*/
			ADC_pvCallBackNotificationFunc = Copy_Chain->NotificationFunc;
     f88:	ea 81       	ldd	r30, Y+2	; 0x02
     f8a:	fb 81       	ldd	r31, Y+3	; 0x03
     f8c:	85 81       	ldd	r24, Z+5	; 0x05
     f8e:	96 81       	ldd	r25, Z+6	; 0x06
     f90:	90 93 6b 00 	sts	0x006B, r25
     f94:	80 93 6a 00 	sts	0x006A, r24

			/*Initialize current conversion Index*/
			ADC_u8ChainConversionIndex = 0;
     f98:	10 92 73 00 	sts	0x0073, r1

			/*Clear the MUX bits in ADMUX register*/
			ADMUX &= 0b11100000;
     f9c:	a7 e2       	ldi	r26, 0x27	; 39
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e7 e2       	ldi	r30, 0x27	; 39
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	80 7e       	andi	r24, 0xE0	; 224
     fa8:	8c 93       	st	X, r24

			/*Set the first Channel into the MUX bits*/
			ADMUX|= ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex];
     faa:	a7 e2       	ldi	r26, 0x27	; 39
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e7 e2       	ldi	r30, 0x27	; 39
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	40 81       	ld	r20, Z
     fb4:	20 91 6c 00 	lds	r18, 0x006C
     fb8:	30 91 6d 00 	lds	r19, 0x006D
     fbc:	80 91 73 00 	lds	r24, 0x0073
     fc0:	88 2f       	mov	r24, r24
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	f9 01       	movw	r30, r18
     fc6:	e8 0f       	add	r30, r24
     fc8:	f9 1f       	adc	r31, r25
     fca:	80 81       	ld	r24, Z
     fcc:	84 2b       	or	r24, r20
     fce:	8c 93       	st	X, r24

			/*Start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     fd0:	a6 e2       	ldi	r26, 0x26	; 38
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e6 e2       	ldi	r30, 0x26	; 38
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	80 64       	ori	r24, 0x40	; 64
     fdc:	8c 93       	st	X, r24

			/*ADC interrupt enable*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     fde:	a6 e2       	ldi	r26, 0x26	; 38
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e6 e2       	ldi	r30, 0x26	; 38
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	88 60       	ori	r24, 0x08	; 8
     fea:	8c 93       	st	X, r24
		}

	}

	return Local_u8ErrorState;
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	8c 83       	std	Y+4, r24	; 0x04
     ff0:	8c 81       	ldd	r24, Y+4	; 0x04

}
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <__vector_16>:

void __vector_16 (void)  __attribute__((signal));
void __vector_16 (void)
{
    1000:	1f 92       	push	r1
    1002:	0f 92       	push	r0
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	0f 92       	push	r0
    1008:	11 24       	eor	r1, r1
    100a:	2f 93       	push	r18
    100c:	3f 93       	push	r19
    100e:	4f 93       	push	r20
    1010:	5f 93       	push	r21
    1012:	6f 93       	push	r22
    1014:	7f 93       	push	r23
    1016:	8f 93       	push	r24
    1018:	9f 93       	push	r25
    101a:	af 93       	push	r26
    101c:	bf 93       	push	r27
    101e:	ef 93       	push	r30
    1020:	ff 93       	push	r31
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8ISRSource == SingleChannelAsynch)
    102a:	80 91 74 00 	lds	r24, 0x0074
    102e:	88 23       	and	r24, r24
    1030:	c1 f4       	brne	.+48     	; 0x1062 <__vector_16+0x62>
		/*Read ADC result*/
#if Resolution == _8_Bits
		*ADC_pu8Reading = ADCH;

#elif Resolution == _10_Bits
		*ADC_pu8Reading =  ADC;
    1032:	a0 91 68 00 	lds	r26, 0x0068
    1036:	b0 91 69 00 	lds	r27, 0x0069
    103a:	e4 e2       	ldi	r30, 0x24	; 36
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	91 81       	ldd	r25, Z+1	; 0x01
    1042:	8c 93       	st	X, r24

#endif

		/*Make ADC state be IDLE because it finished*/
		ADC_u8BusyState=IDLE;
    1044:	10 92 72 00 	sts	0x0072, r1

		/*Invoke the callback notification function*/
		ADC_pvCallBackNotificationFunc();
    1048:	e0 91 6a 00 	lds	r30, 0x006A
    104c:	f0 91 6b 00 	lds	r31, 0x006B
    1050:	09 95       	icall

		/*Disable ADC conversion complete interrupt*/
		CLR_BIT(ADCSRA,ADCSRA_ADIE);
    1052:	a6 e2       	ldi	r26, 0x26	; 38
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e6 e2       	ldi	r30, 0x26	; 38
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	87 7f       	andi	r24, 0xF7	; 247
    105e:	8c 93       	st	X, r24
    1060:	5a c0       	rjmp	.+180    	; 0x1116 <__vector_16+0x116>
	}
	else if(ADC_u8ISRSource == ChainAsynch)
    1062:	80 91 74 00 	lds	r24, 0x0074
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	09 f0       	breq	.+2      	; 0x106c <__vector_16+0x6c>
    106a:	55 c0       	rjmp	.+170    	; 0x1116 <__vector_16+0x116>
		/*read the current conversion*/
#if Resolution == _8_Bits
		ADC_pu16ChainResultArr[ADC_u8ChainConversionIndex] = ADCH;

#elif Resolution == _10_Bits
		ADC_pu16ChainResultArr[ADC_u8ChainConversionIndex] = ADC;
    106c:	20 91 70 00 	lds	r18, 0x0070
    1070:	30 91 71 00 	lds	r19, 0x0071
    1074:	80 91 73 00 	lds	r24, 0x0073
    1078:	88 2f       	mov	r24, r24
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	d9 01       	movw	r26, r18
    1082:	a8 0f       	add	r26, r24
    1084:	b9 1f       	adc	r27, r25
    1086:	e4 e2       	ldi	r30, 0x24	; 36
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	91 81       	ldd	r25, Z+1	; 0x01
    108e:	11 96       	adiw	r26, 0x01	; 1
    1090:	9c 93       	st	X, r25
    1092:	8e 93       	st	-X, r24
#endif

		/*Increment Chain index*/
		ADC_u8ChainConversionIndex++;
    1094:	80 91 73 00 	lds	r24, 0x0073
    1098:	8f 5f       	subi	r24, 0xFF	; 255
    109a:	80 93 73 00 	sts	0x0073, r24

		/*check chain is finished or not*/
		if(ADC_u8ChainConversionIndex == ADC_pu8Size)
    109e:	80 91 73 00 	lds	r24, 0x0073
    10a2:	88 2f       	mov	r24, r24
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	9c 01       	movw	r18, r24
    10a8:	80 91 6e 00 	lds	r24, 0x006E
    10ac:	90 91 6f 00 	lds	r25, 0x006F
    10b0:	28 17       	cp	r18, r24
    10b2:	39 07       	cpc	r19, r25
    10b4:	79 f4       	brne	.+30     	; 0x10d4 <__vector_16+0xd4>
		{
			/*Chain is finished*/
			/*ADC is now IDLE*/
			ADC_u8BusyState = IDLE;
    10b6:	10 92 72 00 	sts	0x0072, r1

			/*Invoke the callback notification function*/
			ADC_pvCallBackNotificationFunc();
    10ba:	e0 91 6a 00 	lds	r30, 0x006A
    10be:	f0 91 6b 00 	lds	r31, 0x006B
    10c2:	09 95       	icall

			/*Disable ADC conversion complete interrupt*/
			CLR_BIT(ADCSRA,ADCSRA_ADIE);
    10c4:	a6 e2       	ldi	r26, 0x26	; 38
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e6 e2       	ldi	r30, 0x26	; 38
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	87 7f       	andi	r24, 0xF7	; 247
    10d0:	8c 93       	st	X, r24
    10d2:	21 c0       	rjmp	.+66     	; 0x1116 <__vector_16+0x116>
		}
		else
		{
			/*Chain is not finished*/
			/*Set new required channel*/
			ADMUX &= 0b11100000;
    10d4:	a7 e2       	ldi	r26, 0x27	; 39
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e7 e2       	ldi	r30, 0x27	; 39
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	80 7e       	andi	r24, 0xE0	; 224
    10e0:	8c 93       	st	X, r24
			ADMUX|= ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex];
    10e2:	a7 e2       	ldi	r26, 0x27	; 39
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e7 e2       	ldi	r30, 0x27	; 39
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	40 81       	ld	r20, Z
    10ec:	20 91 6c 00 	lds	r18, 0x006C
    10f0:	30 91 6d 00 	lds	r19, 0x006D
    10f4:	80 91 73 00 	lds	r24, 0x0073
    10f8:	88 2f       	mov	r24, r24
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	f9 01       	movw	r30, r18
    10fe:	e8 0f       	add	r30, r24
    1100:	f9 1f       	adc	r31, r25
    1102:	80 81       	ld	r24, Z
    1104:	84 2b       	or	r24, r20
    1106:	8c 93       	st	X, r24

			/*Start new conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    1108:	a6 e2       	ldi	r26, 0x26	; 38
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e6 e2       	ldi	r30, 0x26	; 38
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	80 64       	ori	r24, 0x40	; 64
    1114:	8c 93       	st	X, r24
		}

	}

}
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	ff 91       	pop	r31
    111c:	ef 91       	pop	r30
    111e:	bf 91       	pop	r27
    1120:	af 91       	pop	r26
    1122:	9f 91       	pop	r25
    1124:	8f 91       	pop	r24
    1126:	7f 91       	pop	r23
    1128:	6f 91       	pop	r22
    112a:	5f 91       	pop	r21
    112c:	4f 91       	pop	r20
    112e:	3f 91       	pop	r19
    1130:	2f 91       	pop	r18
    1132:	0f 90       	pop	r0
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	0f 90       	pop	r0
    1138:	1f 90       	pop	r1
    113a:	18 95       	reti

0000113c <DIO_u8SetPinDirection>:
#include "DIO_register.h"
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	2a 97       	sbiw	r28, 0x0a	; 10
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	de bf       	out	0x3e, r29	; 62
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	cd bf       	out	0x3d, r28	; 61
    1150:	8a 83       	std	Y+2, r24	; 0x02
    1152:	6b 83       	std	Y+3, r22	; 0x03
    1154:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1156:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	88 30       	cpi	r24, 0x08	; 8
    115c:	08 f0       	brcs	.+2      	; 0x1160 <DIO_u8SetPinDirection+0x24>
    115e:	b9 c1       	rjmp	.+882    	; 0x14d2 <DIO_u8SetPinDirection+0x396>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
    1160:	8c 81       	ldd	r24, Y+4	; 0x04
    1162:	88 23       	and	r24, r24
    1164:	09 f0       	breq	.+2      	; 0x1168 <DIO_u8SetPinDirection+0x2c>
    1166:	77 c0       	rjmp	.+238    	; 0x1256 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	3a 87       	std	Y+10, r19	; 0x0a
    1170:	29 87       	std	Y+9, r18	; 0x09
    1172:	89 85       	ldd	r24, Y+9	; 0x09
    1174:	9a 85       	ldd	r25, Y+10	; 0x0a
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	91 05       	cpc	r25, r1
    117a:	59 f1       	breq	.+86     	; 0x11d2 <DIO_u8SetPinDirection+0x96>
    117c:	29 85       	ldd	r18, Y+9	; 0x09
    117e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1180:	22 30       	cpi	r18, 0x02	; 2
    1182:	31 05       	cpc	r19, r1
    1184:	2c f4       	brge	.+10     	; 0x1190 <DIO_u8SetPinDirection+0x54>
    1186:	89 85       	ldd	r24, Y+9	; 0x09
    1188:	9a 85       	ldd	r25, Y+10	; 0x0a
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	69 f0       	breq	.+26     	; 0x11a8 <DIO_u8SetPinDirection+0x6c>
    118e:	60 c0       	rjmp	.+192    	; 0x1250 <DIO_u8SetPinDirection+0x114>
    1190:	29 85       	ldd	r18, Y+9	; 0x09
    1192:	3a 85       	ldd	r19, Y+10	; 0x0a
    1194:	22 30       	cpi	r18, 0x02	; 2
    1196:	31 05       	cpc	r19, r1
    1198:	89 f1       	breq	.+98     	; 0x11fc <DIO_u8SetPinDirection+0xc0>
    119a:	89 85       	ldd	r24, Y+9	; 0x09
    119c:	9a 85       	ldd	r25, Y+10	; 0x0a
    119e:	83 30       	cpi	r24, 0x03	; 3
    11a0:	91 05       	cpc	r25, r1
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <DIO_u8SetPinDirection+0x6a>
    11a4:	40 c0       	rjmp	.+128    	; 0x1226 <DIO_u8SetPinDirection+0xea>
    11a6:	54 c0       	rjmp	.+168    	; 0x1250 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
    11a8:	aa e3       	ldi	r26, 0x3A	; 58
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	ea e3       	ldi	r30, 0x3A	; 58
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <DIO_u8SetPinDirection+0x8a>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <DIO_u8SetPinDirection+0x86>
    11ca:	80 95       	com	r24
    11cc:	84 23       	and	r24, r20
    11ce:	8c 93       	st	X, r24
    11d0:	82 c1       	rjmp	.+772    	; 0x14d6 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
    11d2:	a7 e3       	ldi	r26, 0x37	; 55
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e7 e3       	ldi	r30, 0x37	; 55
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	48 2f       	mov	r20, r24
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	02 2e       	mov	r0, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <DIO_u8SetPinDirection+0xb4>
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	0a 94       	dec	r0
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <DIO_u8SetPinDirection+0xb0>
    11f4:	80 95       	com	r24
    11f6:	84 23       	and	r24, r20
    11f8:	8c 93       	st	X, r24
    11fa:	6d c1       	rjmp	.+730    	; 0x14d6 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
    11fc:	a4 e3       	ldi	r26, 0x34	; 52
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e4 e3       	ldi	r30, 0x34	; 52
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	48 2f       	mov	r20, r24
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	02 2e       	mov	r0, r18
    1214:	02 c0       	rjmp	.+4      	; 0x121a <DIO_u8SetPinDirection+0xde>
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	0a 94       	dec	r0
    121c:	e2 f7       	brpl	.-8      	; 0x1216 <DIO_u8SetPinDirection+0xda>
    121e:	80 95       	com	r24
    1220:	84 23       	and	r24, r20
    1222:	8c 93       	st	X, r24
    1224:	58 c1       	rjmp	.+688    	; 0x14d6 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
    1226:	a1 e3       	ldi	r26, 0x31	; 49
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e1 e3       	ldi	r30, 0x31	; 49
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	48 2f       	mov	r20, r24
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	02 2e       	mov	r0, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <DIO_u8SetPinDirection+0x108>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <DIO_u8SetPinDirection+0x104>
    1248:	80 95       	com	r24
    124a:	84 23       	and	r24, r20
    124c:	8c 93       	st	X, r24
    124e:	43 c1       	rjmp	.+646    	; 0x14d6 <DIO_u8SetPinDirection+0x39a>
			default: Local_u8ErrorState=1; break;
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	89 83       	std	Y+1, r24	; 0x01
    1254:	40 c1       	rjmp	.+640    	; 0x14d6 <DIO_u8SetPinDirection+0x39a>
			}
		}
		else if (Copy_u8Direction==DIO_u8PIN_OUTPUT)
    1256:	8c 81       	ldd	r24, Y+4	; 0x04
    1258:	81 30       	cpi	r24, 0x01	; 1
    125a:	09 f0       	breq	.+2      	; 0x125e <DIO_u8SetPinDirection+0x122>
    125c:	72 c0       	rjmp	.+228    	; 0x1342 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	38 87       	std	Y+8, r19	; 0x08
    1266:	2f 83       	std	Y+7, r18	; 0x07
    1268:	8f 81       	ldd	r24, Y+7	; 0x07
    126a:	98 85       	ldd	r25, Y+8	; 0x08
    126c:	81 30       	cpi	r24, 0x01	; 1
    126e:	91 05       	cpc	r25, r1
    1270:	49 f1       	breq	.+82     	; 0x12c4 <DIO_u8SetPinDirection+0x188>
    1272:	2f 81       	ldd	r18, Y+7	; 0x07
    1274:	38 85       	ldd	r19, Y+8	; 0x08
    1276:	22 30       	cpi	r18, 0x02	; 2
    1278:	31 05       	cpc	r19, r1
    127a:	2c f4       	brge	.+10     	; 0x1286 <DIO_u8SetPinDirection+0x14a>
    127c:	8f 81       	ldd	r24, Y+7	; 0x07
    127e:	98 85       	ldd	r25, Y+8	; 0x08
    1280:	00 97       	sbiw	r24, 0x00	; 0
    1282:	61 f0       	breq	.+24     	; 0x129c <DIO_u8SetPinDirection+0x160>
    1284:	5b c0       	rjmp	.+182    	; 0x133c <DIO_u8SetPinDirection+0x200>
    1286:	2f 81       	ldd	r18, Y+7	; 0x07
    1288:	38 85       	ldd	r19, Y+8	; 0x08
    128a:	22 30       	cpi	r18, 0x02	; 2
    128c:	31 05       	cpc	r19, r1
    128e:	71 f1       	breq	.+92     	; 0x12ec <DIO_u8SetPinDirection+0x1b0>
    1290:	8f 81       	ldd	r24, Y+7	; 0x07
    1292:	98 85       	ldd	r25, Y+8	; 0x08
    1294:	83 30       	cpi	r24, 0x03	; 3
    1296:	91 05       	cpc	r25, r1
    1298:	e9 f1       	breq	.+122    	; 0x1314 <DIO_u8SetPinDirection+0x1d8>
    129a:	50 c0       	rjmp	.+160    	; 0x133c <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
    129c:	aa e3       	ldi	r26, 0x3A	; 58
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	ea e3       	ldi	r30, 0x3A	; 58
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 2e       	mov	r0, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <DIO_u8SetPinDirection+0x17e>
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	0a 94       	dec	r0
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <DIO_u8SetPinDirection+0x17a>
    12be:	84 2b       	or	r24, r20
    12c0:	8c 93       	st	X, r24
    12c2:	09 c1       	rjmp	.+530    	; 0x14d6 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
    12c4:	a7 e3       	ldi	r26, 0x37	; 55
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e7 e3       	ldi	r30, 0x37	; 55
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	48 2f       	mov	r20, r24
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 2e       	mov	r0, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <DIO_u8SetPinDirection+0x1a6>
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	0a 94       	dec	r0
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <DIO_u8SetPinDirection+0x1a2>
    12e6:	84 2b       	or	r24, r20
    12e8:	8c 93       	st	X, r24
    12ea:	f5 c0       	rjmp	.+490    	; 0x14d6 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
    12ec:	a4 e3       	ldi	r26, 0x34	; 52
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e4 e3       	ldi	r30, 0x34	; 52
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	48 2f       	mov	r20, r24
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	28 2f       	mov	r18, r24
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	02 2e       	mov	r0, r18
    1304:	02 c0       	rjmp	.+4      	; 0x130a <DIO_u8SetPinDirection+0x1ce>
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	0a 94       	dec	r0
    130c:	e2 f7       	brpl	.-8      	; 0x1306 <DIO_u8SetPinDirection+0x1ca>
    130e:	84 2b       	or	r24, r20
    1310:	8c 93       	st	X, r24
    1312:	e1 c0       	rjmp	.+450    	; 0x14d6 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
    1314:	a1 e3       	ldi	r26, 0x31	; 49
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e1 e3       	ldi	r30, 0x31	; 49
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	48 2f       	mov	r20, r24
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	02 2e       	mov	r0, r18
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <DIO_u8SetPinDirection+0x1f6>
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	0a 94       	dec	r0
    1334:	e2 f7       	brpl	.-8      	; 0x132e <DIO_u8SetPinDirection+0x1f2>
    1336:	84 2b       	or	r24, r20
    1338:	8c 93       	st	X, r24
    133a:	cd c0       	rjmp	.+410    	; 0x14d6 <DIO_u8SetPinDirection+0x39a>
			default: Local_u8ErrorState=1; break;
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	89 83       	std	Y+1, r24	; 0x01
    1340:	ca c0       	rjmp	.+404    	; 0x14d6 <DIO_u8SetPinDirection+0x39a>
			}
		}
		else if (Copy_u8Direction==DIO_u8PIN_INPULLUP)
    1342:	8c 81       	ldd	r24, Y+4	; 0x04
    1344:	82 30       	cpi	r24, 0x02	; 2
    1346:	09 f0       	breq	.+2      	; 0x134a <DIO_u8SetPinDirection+0x20e>
    1348:	c1 c0       	rjmp	.+386    	; 0x14cc <DIO_u8SetPinDirection+0x390>
			{
				switch(Copy_u8Port)
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	3e 83       	std	Y+6, r19	; 0x06
    1352:	2d 83       	std	Y+5, r18	; 0x05
    1354:	8d 81       	ldd	r24, Y+5	; 0x05
    1356:	9e 81       	ldd	r25, Y+6	; 0x06
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	91 05       	cpc	r25, r1
    135c:	09 f4       	brne	.+2      	; 0x1360 <DIO_u8SetPinDirection+0x224>
    135e:	3e c0       	rjmp	.+124    	; 0x13dc <DIO_u8SetPinDirection+0x2a0>
    1360:	2d 81       	ldd	r18, Y+5	; 0x05
    1362:	3e 81       	ldd	r19, Y+6	; 0x06
    1364:	22 30       	cpi	r18, 0x02	; 2
    1366:	31 05       	cpc	r19, r1
    1368:	2c f4       	brge	.+10     	; 0x1374 <DIO_u8SetPinDirection+0x238>
    136a:	8d 81       	ldd	r24, Y+5	; 0x05
    136c:	9e 81       	ldd	r25, Y+6	; 0x06
    136e:	00 97       	sbiw	r24, 0x00	; 0
    1370:	71 f0       	breq	.+28     	; 0x138e <DIO_u8SetPinDirection+0x252>
    1372:	a9 c0       	rjmp	.+338    	; 0x14c6 <DIO_u8SetPinDirection+0x38a>
    1374:	2d 81       	ldd	r18, Y+5	; 0x05
    1376:	3e 81       	ldd	r19, Y+6	; 0x06
    1378:	22 30       	cpi	r18, 0x02	; 2
    137a:	31 05       	cpc	r19, r1
    137c:	09 f4       	brne	.+2      	; 0x1380 <DIO_u8SetPinDirection+0x244>
    137e:	55 c0       	rjmp	.+170    	; 0x142a <DIO_u8SetPinDirection+0x2ee>
    1380:	8d 81       	ldd	r24, Y+5	; 0x05
    1382:	9e 81       	ldd	r25, Y+6	; 0x06
    1384:	83 30       	cpi	r24, 0x03	; 3
    1386:	91 05       	cpc	r25, r1
    1388:	09 f4       	brne	.+2      	; 0x138c <DIO_u8SetPinDirection+0x250>
    138a:	76 c0       	rjmp	.+236    	; 0x1478 <DIO_u8SetPinDirection+0x33c>
    138c:	9c c0       	rjmp	.+312    	; 0x14c6 <DIO_u8SetPinDirection+0x38a>
				{
				case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); SET_BIT(PORTA,Copy_u8Pin); break;
    138e:	aa e3       	ldi	r26, 0x3A	; 58
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	ea e3       	ldi	r30, 0x3A	; 58
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	48 2f       	mov	r20, r24
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <DIO_u8SetPinDirection+0x26e>
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	2a 95       	dec	r18
    13ac:	e2 f7       	brpl	.-8      	; 0x13a6 <DIO_u8SetPinDirection+0x26a>
    13ae:	80 95       	com	r24
    13b0:	84 23       	and	r24, r20
    13b2:	8c 93       	st	X, r24
    13b4:	ab e3       	ldi	r26, 0x3B	; 59
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	eb e3       	ldi	r30, 0x3B	; 59
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	48 2f       	mov	r20, r24
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	02 2e       	mov	r0, r18
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <DIO_u8SetPinDirection+0x296>
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	0a 94       	dec	r0
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <DIO_u8SetPinDirection+0x292>
    13d6:	84 2b       	or	r24, r20
    13d8:	8c 93       	st	X, r24
    13da:	7d c0       	rjmp	.+250    	; 0x14d6 <DIO_u8SetPinDirection+0x39a>
				case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); SET_BIT(PORTB,Copy_u8Pin); break;
    13dc:	a7 e3       	ldi	r26, 0x37	; 55
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e7 e3       	ldi	r30, 0x37	; 55
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	48 2f       	mov	r20, r24
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <DIO_u8SetPinDirection+0x2bc>
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	2a 95       	dec	r18
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <DIO_u8SetPinDirection+0x2b8>
    13fc:	80 95       	com	r24
    13fe:	84 23       	and	r24, r20
    1400:	8c 93       	st	X, r24
    1402:	a8 e3       	ldi	r26, 0x38	; 56
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e8 e3       	ldi	r30, 0x38	; 56
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	48 2f       	mov	r20, r24
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 2e       	mov	r0, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <DIO_u8SetPinDirection+0x2e4>
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	0a 94       	dec	r0
    1422:	e2 f7       	brpl	.-8      	; 0x141c <DIO_u8SetPinDirection+0x2e0>
    1424:	84 2b       	or	r24, r20
    1426:	8c 93       	st	X, r24
    1428:	56 c0       	rjmp	.+172    	; 0x14d6 <DIO_u8SetPinDirection+0x39a>
				case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); SET_BIT(PORTC,Copy_u8Pin); break;
    142a:	a4 e3       	ldi	r26, 0x34	; 52
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e4 e3       	ldi	r30, 0x34	; 52
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	48 2f       	mov	r20, r24
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <DIO_u8SetPinDirection+0x30a>
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	2a 95       	dec	r18
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <DIO_u8SetPinDirection+0x306>
    144a:	80 95       	com	r24
    144c:	84 23       	and	r24, r20
    144e:	8c 93       	st	X, r24
    1450:	a5 e3       	ldi	r26, 0x35	; 53
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e5 e3       	ldi	r30, 0x35	; 53
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	48 2f       	mov	r20, r24
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	02 2e       	mov	r0, r18
    1468:	02 c0       	rjmp	.+4      	; 0x146e <DIO_u8SetPinDirection+0x332>
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	0a 94       	dec	r0
    1470:	e2 f7       	brpl	.-8      	; 0x146a <DIO_u8SetPinDirection+0x32e>
    1472:	84 2b       	or	r24, r20
    1474:	8c 93       	st	X, r24
    1476:	2f c0       	rjmp	.+94     	; 0x14d6 <DIO_u8SetPinDirection+0x39a>
				case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); SET_BIT(PORTD,Copy_u8Pin); break;
    1478:	a1 e3       	ldi	r26, 0x31	; 49
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e1 e3       	ldi	r30, 0x31	; 49
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	48 2f       	mov	r20, r24
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <DIO_u8SetPinDirection+0x358>
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	2a 95       	dec	r18
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <DIO_u8SetPinDirection+0x354>
    1498:	80 95       	com	r24
    149a:	84 23       	and	r24, r20
    149c:	8c 93       	st	X, r24
    149e:	a2 e3       	ldi	r26, 0x32	; 50
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e2 e3       	ldi	r30, 0x32	; 50
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	48 2f       	mov	r20, r24
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	02 2e       	mov	r0, r18
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <DIO_u8SetPinDirection+0x380>
    14b8:	88 0f       	add	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	0a 94       	dec	r0
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <DIO_u8SetPinDirection+0x37c>
    14c0:	84 2b       	or	r24, r20
    14c2:	8c 93       	st	X, r24
    14c4:	08 c0       	rjmp	.+16     	; 0x14d6 <DIO_u8SetPinDirection+0x39a>
				default: Local_u8ErrorState=1; break;
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	89 83       	std	Y+1, r24	; 0x01
    14ca:	05 c0       	rjmp	.+10     	; 0x14d6 <DIO_u8SetPinDirection+0x39a>
				}
			}
		else
		{
			Local_u8ErrorState=1;
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	89 83       	std	Y+1, r24	; 0x01
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <DIO_u8SetPinDirection+0x39a>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d8:	2a 96       	adiw	r28, 0x0a	; 10
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	de bf       	out	0x3e, r29	; 62
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	cd bf       	out	0x3d, r28	; 61
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	00 d0       	rcall	.+0      	; 0x14f0 <DIO_u8SetPortDirection+0x6>
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <DIO_u8SetPortDirection+0x8>
    14f2:	0f 92       	push	r0
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	8a 83       	std	Y+2, r24	; 0x02
    14fa:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    14fc:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	3d 83       	std	Y+5, r19	; 0x05
    1506:	2c 83       	std	Y+4, r18	; 0x04
    1508:	8c 81       	ldd	r24, Y+4	; 0x04
    150a:	9d 81       	ldd	r25, Y+5	; 0x05
    150c:	81 30       	cpi	r24, 0x01	; 1
    150e:	91 05       	cpc	r25, r1
    1510:	d1 f0       	breq	.+52     	; 0x1546 <DIO_u8SetPortDirection+0x5c>
    1512:	2c 81       	ldd	r18, Y+4	; 0x04
    1514:	3d 81       	ldd	r19, Y+5	; 0x05
    1516:	22 30       	cpi	r18, 0x02	; 2
    1518:	31 05       	cpc	r19, r1
    151a:	2c f4       	brge	.+10     	; 0x1526 <DIO_u8SetPortDirection+0x3c>
    151c:	8c 81       	ldd	r24, Y+4	; 0x04
    151e:	9d 81       	ldd	r25, Y+5	; 0x05
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	61 f0       	breq	.+24     	; 0x153c <DIO_u8SetPortDirection+0x52>
    1524:	1f c0       	rjmp	.+62     	; 0x1564 <DIO_u8SetPortDirection+0x7a>
    1526:	2c 81       	ldd	r18, Y+4	; 0x04
    1528:	3d 81       	ldd	r19, Y+5	; 0x05
    152a:	22 30       	cpi	r18, 0x02	; 2
    152c:	31 05       	cpc	r19, r1
    152e:	81 f0       	breq	.+32     	; 0x1550 <DIO_u8SetPortDirection+0x66>
    1530:	8c 81       	ldd	r24, Y+4	; 0x04
    1532:	9d 81       	ldd	r25, Y+5	; 0x05
    1534:	83 30       	cpi	r24, 0x03	; 3
    1536:	91 05       	cpc	r25, r1
    1538:	81 f0       	breq	.+32     	; 0x155a <DIO_u8SetPortDirection+0x70>
    153a:	14 c0       	rjmp	.+40     	; 0x1564 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
    153c:	ea e3       	ldi	r30, 0x3A	; 58
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	80 83       	st	Z, r24
    1544:	11 c0       	rjmp	.+34     	; 0x1568 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
    1546:	e7 e3       	ldi	r30, 0x37	; 55
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	80 83       	st	Z, r24
    154e:	0c c0       	rjmp	.+24     	; 0x1568 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
    1550:	e4 e3       	ldi	r30, 0x34	; 52
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	80 83       	st	Z, r24
    1558:	07 c0       	rjmp	.+14     	; 0x1568 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
    155a:	e1 e3       	ldi	r30, 0x31	; 49
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	80 83       	st	Z, r24
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState=1;
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1568:	89 81       	ldd	r24, Y+1	; 0x01
}
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
    1582:	28 97       	sbiw	r28, 0x08	; 8
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	f8 94       	cli
    1588:	de bf       	out	0x3e, r29	; 62
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	cd bf       	out	0x3d, r28	; 61
    158e:	8a 83       	std	Y+2, r24	; 0x02
    1590:	6b 83       	std	Y+3, r22	; 0x03
    1592:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1594:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<= DIO_u8PIN7)
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	88 30       	cpi	r24, 0x08	; 8
    159a:	08 f0       	brcs	.+2      	; 0x159e <DIO_u8SetPinValue+0x24>
    159c:	f4 c0       	rjmp	.+488    	; 0x1786 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
    159e:	8c 81       	ldd	r24, Y+4	; 0x04
    15a0:	88 23       	and	r24, r24
    15a2:	09 f0       	breq	.+2      	; 0x15a6 <DIO_u8SetPinValue+0x2c>
    15a4:	77 c0       	rjmp	.+238    	; 0x1694 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	38 87       	std	Y+8, r19	; 0x08
    15ae:	2f 83       	std	Y+7, r18	; 0x07
    15b0:	8f 81       	ldd	r24, Y+7	; 0x07
    15b2:	98 85       	ldd	r25, Y+8	; 0x08
    15b4:	81 30       	cpi	r24, 0x01	; 1
    15b6:	91 05       	cpc	r25, r1
    15b8:	59 f1       	breq	.+86     	; 0x1610 <DIO_u8SetPinValue+0x96>
    15ba:	2f 81       	ldd	r18, Y+7	; 0x07
    15bc:	38 85       	ldd	r19, Y+8	; 0x08
    15be:	22 30       	cpi	r18, 0x02	; 2
    15c0:	31 05       	cpc	r19, r1
    15c2:	2c f4       	brge	.+10     	; 0x15ce <DIO_u8SetPinValue+0x54>
    15c4:	8f 81       	ldd	r24, Y+7	; 0x07
    15c6:	98 85       	ldd	r25, Y+8	; 0x08
    15c8:	00 97       	sbiw	r24, 0x00	; 0
    15ca:	69 f0       	breq	.+26     	; 0x15e6 <DIO_u8SetPinValue+0x6c>
    15cc:	60 c0       	rjmp	.+192    	; 0x168e <DIO_u8SetPinValue+0x114>
    15ce:	2f 81       	ldd	r18, Y+7	; 0x07
    15d0:	38 85       	ldd	r19, Y+8	; 0x08
    15d2:	22 30       	cpi	r18, 0x02	; 2
    15d4:	31 05       	cpc	r19, r1
    15d6:	89 f1       	breq	.+98     	; 0x163a <DIO_u8SetPinValue+0xc0>
    15d8:	8f 81       	ldd	r24, Y+7	; 0x07
    15da:	98 85       	ldd	r25, Y+8	; 0x08
    15dc:	83 30       	cpi	r24, 0x03	; 3
    15de:	91 05       	cpc	r25, r1
    15e0:	09 f4       	brne	.+2      	; 0x15e4 <DIO_u8SetPinValue+0x6a>
    15e2:	40 c0       	rjmp	.+128    	; 0x1664 <DIO_u8SetPinValue+0xea>
    15e4:	54 c0       	rjmp	.+168    	; 0x168e <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    15e6:	ab e3       	ldi	r26, 0x3B	; 59
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	eb e3       	ldi	r30, 0x3B	; 59
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	48 2f       	mov	r20, r24
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	02 2e       	mov	r0, r18
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <DIO_u8SetPinValue+0x8a>
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	0a 94       	dec	r0
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <DIO_u8SetPinValue+0x86>
    1608:	80 95       	com	r24
    160a:	84 23       	and	r24, r20
    160c:	8c 93       	st	X, r24
    160e:	bd c0       	rjmp	.+378    	; 0x178a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    1610:	a8 e3       	ldi	r26, 0x38	; 56
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e8 e3       	ldi	r30, 0x38	; 56
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	48 2f       	mov	r20, r24
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	02 2e       	mov	r0, r18
    1628:	02 c0       	rjmp	.+4      	; 0x162e <DIO_u8SetPinValue+0xb4>
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	0a 94       	dec	r0
    1630:	e2 f7       	brpl	.-8      	; 0x162a <DIO_u8SetPinValue+0xb0>
    1632:	80 95       	com	r24
    1634:	84 23       	and	r24, r20
    1636:	8c 93       	st	X, r24
    1638:	a8 c0       	rjmp	.+336    	; 0x178a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    163a:	a5 e3       	ldi	r26, 0x35	; 53
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e5 e3       	ldi	r30, 0x35	; 53
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	48 2f       	mov	r20, r24
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	02 2e       	mov	r0, r18
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <DIO_u8SetPinValue+0xde>
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	0a 94       	dec	r0
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <DIO_u8SetPinValue+0xda>
    165c:	80 95       	com	r24
    165e:	84 23       	and	r24, r20
    1660:	8c 93       	st	X, r24
    1662:	93 c0       	rjmp	.+294    	; 0x178a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    1664:	a2 e3       	ldi	r26, 0x32	; 50
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e2 e3       	ldi	r30, 0x32	; 50
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	48 2f       	mov	r20, r24
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	02 2e       	mov	r0, r18
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <DIO_u8SetPinValue+0x108>
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	0a 94       	dec	r0
    1684:	e2 f7       	brpl	.-8      	; 0x167e <DIO_u8SetPinValue+0x104>
    1686:	80 95       	com	r24
    1688:	84 23       	and	r24, r20
    168a:	8c 93       	st	X, r24
    168c:	7e c0       	rjmp	.+252    	; 0x178a <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	89 83       	std	Y+1, r24	; 0x01
    1692:	7b c0       	rjmp	.+246    	; 0x178a <DIO_u8SetPinValue+0x210>
			}
		}
		else if (Copy_u8Value==DIO_u8PIN_HIGH)
    1694:	8c 81       	ldd	r24, Y+4	; 0x04
    1696:	81 30       	cpi	r24, 0x01	; 1
    1698:	09 f0       	breq	.+2      	; 0x169c <DIO_u8SetPinValue+0x122>
    169a:	72 c0       	rjmp	.+228    	; 0x1780 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	3e 83       	std	Y+6, r19	; 0x06
    16a4:	2d 83       	std	Y+5, r18	; 0x05
    16a6:	8d 81       	ldd	r24, Y+5	; 0x05
    16a8:	9e 81       	ldd	r25, Y+6	; 0x06
    16aa:	81 30       	cpi	r24, 0x01	; 1
    16ac:	91 05       	cpc	r25, r1
    16ae:	49 f1       	breq	.+82     	; 0x1702 <DIO_u8SetPinValue+0x188>
    16b0:	2d 81       	ldd	r18, Y+5	; 0x05
    16b2:	3e 81       	ldd	r19, Y+6	; 0x06
    16b4:	22 30       	cpi	r18, 0x02	; 2
    16b6:	31 05       	cpc	r19, r1
    16b8:	2c f4       	brge	.+10     	; 0x16c4 <DIO_u8SetPinValue+0x14a>
    16ba:	8d 81       	ldd	r24, Y+5	; 0x05
    16bc:	9e 81       	ldd	r25, Y+6	; 0x06
    16be:	00 97       	sbiw	r24, 0x00	; 0
    16c0:	61 f0       	breq	.+24     	; 0x16da <DIO_u8SetPinValue+0x160>
    16c2:	5b c0       	rjmp	.+182    	; 0x177a <DIO_u8SetPinValue+0x200>
    16c4:	2d 81       	ldd	r18, Y+5	; 0x05
    16c6:	3e 81       	ldd	r19, Y+6	; 0x06
    16c8:	22 30       	cpi	r18, 0x02	; 2
    16ca:	31 05       	cpc	r19, r1
    16cc:	71 f1       	breq	.+92     	; 0x172a <DIO_u8SetPinValue+0x1b0>
    16ce:	8d 81       	ldd	r24, Y+5	; 0x05
    16d0:	9e 81       	ldd	r25, Y+6	; 0x06
    16d2:	83 30       	cpi	r24, 0x03	; 3
    16d4:	91 05       	cpc	r25, r1
    16d6:	e9 f1       	breq	.+122    	; 0x1752 <DIO_u8SetPinValue+0x1d8>
    16d8:	50 c0       	rjmp	.+160    	; 0x177a <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    16da:	ab e3       	ldi	r26, 0x3B	; 59
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	eb e3       	ldi	r30, 0x3B	; 59
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	48 2f       	mov	r20, r24
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	02 2e       	mov	r0, r18
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <DIO_u8SetPinValue+0x17e>
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	0a 94       	dec	r0
    16fa:	e2 f7       	brpl	.-8      	; 0x16f4 <DIO_u8SetPinValue+0x17a>
    16fc:	84 2b       	or	r24, r20
    16fe:	8c 93       	st	X, r24
    1700:	44 c0       	rjmp	.+136    	; 0x178a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    1702:	a8 e3       	ldi	r26, 0x38	; 56
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e8 e3       	ldi	r30, 0x38	; 56
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	48 2f       	mov	r20, r24
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	02 2e       	mov	r0, r18
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <DIO_u8SetPinValue+0x1a6>
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	0a 94       	dec	r0
    1722:	e2 f7       	brpl	.-8      	; 0x171c <DIO_u8SetPinValue+0x1a2>
    1724:	84 2b       	or	r24, r20
    1726:	8c 93       	st	X, r24
    1728:	30 c0       	rjmp	.+96     	; 0x178a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    172a:	a5 e3       	ldi	r26, 0x35	; 53
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e5 e3       	ldi	r30, 0x35	; 53
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	48 2f       	mov	r20, r24
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	02 2e       	mov	r0, r18
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <DIO_u8SetPinValue+0x1ce>
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	0a 94       	dec	r0
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <DIO_u8SetPinValue+0x1ca>
    174c:	84 2b       	or	r24, r20
    174e:	8c 93       	st	X, r24
    1750:	1c c0       	rjmp	.+56     	; 0x178a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    1752:	a2 e3       	ldi	r26, 0x32	; 50
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e2 e3       	ldi	r30, 0x32	; 50
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	48 2f       	mov	r20, r24
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	02 2e       	mov	r0, r18
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <DIO_u8SetPinValue+0x1f6>
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	0a 94       	dec	r0
    1772:	e2 f7       	brpl	.-8      	; 0x176c <DIO_u8SetPinValue+0x1f2>
    1774:	84 2b       	or	r24, r20
    1776:	8c 93       	st	X, r24
    1778:	08 c0       	rjmp	.+16     	; 0x178a <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	89 83       	std	Y+1, r24	; 0x01
    177e:	05 c0       	rjmp	.+10     	; 0x178a <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	89 83       	std	Y+1, r24	; 0x01
    1784:	02 c0       	rjmp	.+4      	; 0x178a <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    178a:	89 81       	ldd	r24, Y+1	; 0x01
}
    178c:	28 96       	adiw	r28, 0x08	; 8
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	f8 94       	cli
    1792:	de bf       	out	0x3e, r29	; 62
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	cd bf       	out	0x3d, r28	; 61
    1798:	cf 91       	pop	r28
    179a:	df 91       	pop	r29
    179c:	08 95       	ret

0000179e <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    179e:	df 93       	push	r29
    17a0:	cf 93       	push	r28
    17a2:	00 d0       	rcall	.+0      	; 0x17a4 <DIO_u8SetPortValue+0x6>
    17a4:	00 d0       	rcall	.+0      	; 0x17a6 <DIO_u8SetPortValue+0x8>
    17a6:	0f 92       	push	r0
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
    17ac:	8a 83       	std	Y+2, r24	; 0x02
    17ae:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    17b0:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	3d 83       	std	Y+5, r19	; 0x05
    17ba:	2c 83       	std	Y+4, r18	; 0x04
    17bc:	8c 81       	ldd	r24, Y+4	; 0x04
    17be:	9d 81       	ldd	r25, Y+5	; 0x05
    17c0:	81 30       	cpi	r24, 0x01	; 1
    17c2:	91 05       	cpc	r25, r1
    17c4:	d1 f0       	breq	.+52     	; 0x17fa <DIO_u8SetPortValue+0x5c>
    17c6:	2c 81       	ldd	r18, Y+4	; 0x04
    17c8:	3d 81       	ldd	r19, Y+5	; 0x05
    17ca:	22 30       	cpi	r18, 0x02	; 2
    17cc:	31 05       	cpc	r19, r1
    17ce:	2c f4       	brge	.+10     	; 0x17da <DIO_u8SetPortValue+0x3c>
    17d0:	8c 81       	ldd	r24, Y+4	; 0x04
    17d2:	9d 81       	ldd	r25, Y+5	; 0x05
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	61 f0       	breq	.+24     	; 0x17f0 <DIO_u8SetPortValue+0x52>
    17d8:	1f c0       	rjmp	.+62     	; 0x1818 <DIO_u8SetPortValue+0x7a>
    17da:	2c 81       	ldd	r18, Y+4	; 0x04
    17dc:	3d 81       	ldd	r19, Y+5	; 0x05
    17de:	22 30       	cpi	r18, 0x02	; 2
    17e0:	31 05       	cpc	r19, r1
    17e2:	81 f0       	breq	.+32     	; 0x1804 <DIO_u8SetPortValue+0x66>
    17e4:	8c 81       	ldd	r24, Y+4	; 0x04
    17e6:	9d 81       	ldd	r25, Y+5	; 0x05
    17e8:	83 30       	cpi	r24, 0x03	; 3
    17ea:	91 05       	cpc	r25, r1
    17ec:	81 f0       	breq	.+32     	; 0x180e <DIO_u8SetPortValue+0x70>
    17ee:	14 c0       	rjmp	.+40     	; 0x1818 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
    17f0:	eb e3       	ldi	r30, 0x3B	; 59
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	80 83       	st	Z, r24
    17f8:	11 c0       	rjmp	.+34     	; 0x181c <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
    17fa:	e8 e3       	ldi	r30, 0x38	; 56
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	80 83       	st	Z, r24
    1802:	0c c0       	rjmp	.+24     	; 0x181c <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
    1804:	e5 e3       	ldi	r30, 0x35	; 53
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	80 83       	st	Z, r24
    180c:	07 c0       	rjmp	.+14     	; 0x181c <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD : PORTD = Copy_u8Value; break;
    180e:	e2 e3       	ldi	r30, 0x32	; 50
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	80 83       	st	Z, r24
    1816:	02 c0       	rjmp	.+4      	; 0x181c <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1;
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    181c:	89 81       	ldd	r24, Y+1	; 0x01
}
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	0f 90       	pop	r0
    1828:	cf 91       	pop	r28
    182a:	df 91       	pop	r29
    182c:	08 95       	ret

0000182e <DIO_u8TogglePinValue>:

u8 DIO_u8TogglePinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    182e:	df 93       	push	r29
    1830:	cf 93       	push	r28
    1832:	00 d0       	rcall	.+0      	; 0x1834 <DIO_u8TogglePinValue+0x6>
    1834:	00 d0       	rcall	.+0      	; 0x1836 <DIO_u8TogglePinValue+0x8>
    1836:	0f 92       	push	r0
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    183c:	8a 83       	std	Y+2, r24	; 0x02
    183e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1840:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Port)
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	28 2f       	mov	r18, r24
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	3d 83       	std	Y+5, r19	; 0x05
    184a:	2c 83       	std	Y+4, r18	; 0x04
    184c:	8c 81       	ldd	r24, Y+4	; 0x04
    184e:	9d 81       	ldd	r25, Y+5	; 0x05
    1850:	81 30       	cpi	r24, 0x01	; 1
    1852:	91 05       	cpc	r25, r1
    1854:	49 f1       	breq	.+82     	; 0x18a8 <DIO_u8TogglePinValue+0x7a>
    1856:	2c 81       	ldd	r18, Y+4	; 0x04
    1858:	3d 81       	ldd	r19, Y+5	; 0x05
    185a:	22 30       	cpi	r18, 0x02	; 2
    185c:	31 05       	cpc	r19, r1
    185e:	2c f4       	brge	.+10     	; 0x186a <DIO_u8TogglePinValue+0x3c>
    1860:	8c 81       	ldd	r24, Y+4	; 0x04
    1862:	9d 81       	ldd	r25, Y+5	; 0x05
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	61 f0       	breq	.+24     	; 0x1880 <DIO_u8TogglePinValue+0x52>
    1868:	5b c0       	rjmp	.+182    	; 0x1920 <DIO_u8TogglePinValue+0xf2>
    186a:	2c 81       	ldd	r18, Y+4	; 0x04
    186c:	3d 81       	ldd	r19, Y+5	; 0x05
    186e:	22 30       	cpi	r18, 0x02	; 2
    1870:	31 05       	cpc	r19, r1
    1872:	71 f1       	breq	.+92     	; 0x18d0 <DIO_u8TogglePinValue+0xa2>
    1874:	8c 81       	ldd	r24, Y+4	; 0x04
    1876:	9d 81       	ldd	r25, Y+5	; 0x05
    1878:	83 30       	cpi	r24, 0x03	; 3
    187a:	91 05       	cpc	r25, r1
    187c:	e9 f1       	breq	.+122    	; 0x18f8 <DIO_u8TogglePinValue+0xca>
    187e:	50 c0       	rjmp	.+160    	; 0x1920 <DIO_u8TogglePinValue+0xf2>
	{
	case DIO_u8PORTA: TOOGLE_BIT(PORTA,Copy_u8Pin); break;
    1880:	ab e3       	ldi	r26, 0x3B	; 59
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	eb e3       	ldi	r30, 0x3B	; 59
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	48 2f       	mov	r20, r24
    188c:	8b 81       	ldd	r24, Y+3	; 0x03
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	02 2e       	mov	r0, r18
    1898:	02 c0       	rjmp	.+4      	; 0x189e <DIO_u8TogglePinValue+0x70>
    189a:	88 0f       	add	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	0a 94       	dec	r0
    18a0:	e2 f7       	brpl	.-8      	; 0x189a <DIO_u8TogglePinValue+0x6c>
    18a2:	84 27       	eor	r24, r20
    18a4:	8c 93       	st	X, r24
    18a6:	3e c0       	rjmp	.+124    	; 0x1924 <DIO_u8TogglePinValue+0xf6>
	case DIO_u8PORTB: TOOGLE_BIT(PORTB,Copy_u8Pin); break;
    18a8:	a8 e3       	ldi	r26, 0x38	; 56
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	e8 e3       	ldi	r30, 0x38	; 56
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	48 2f       	mov	r20, r24
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	02 2e       	mov	r0, r18
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <DIO_u8TogglePinValue+0x98>
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	0a 94       	dec	r0
    18c8:	e2 f7       	brpl	.-8      	; 0x18c2 <DIO_u8TogglePinValue+0x94>
    18ca:	84 27       	eor	r24, r20
    18cc:	8c 93       	st	X, r24
    18ce:	2a c0       	rjmp	.+84     	; 0x1924 <DIO_u8TogglePinValue+0xf6>
	case DIO_u8PORTC: TOOGLE_BIT(PORTC,Copy_u8Pin); break;
    18d0:	a5 e3       	ldi	r26, 0x35	; 53
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e5 e3       	ldi	r30, 0x35	; 53
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	48 2f       	mov	r20, r24
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	02 2e       	mov	r0, r18
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <DIO_u8TogglePinValue+0xc0>
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	0a 94       	dec	r0
    18f0:	e2 f7       	brpl	.-8      	; 0x18ea <DIO_u8TogglePinValue+0xbc>
    18f2:	84 27       	eor	r24, r20
    18f4:	8c 93       	st	X, r24
    18f6:	16 c0       	rjmp	.+44     	; 0x1924 <DIO_u8TogglePinValue+0xf6>
	case DIO_u8PORTD: TOOGLE_BIT(PORTD,Copy_u8Pin); break;
    18f8:	a2 e3       	ldi	r26, 0x32	; 50
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	e2 e3       	ldi	r30, 0x32	; 50
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	48 2f       	mov	r20, r24
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	28 2f       	mov	r18, r24
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	02 2e       	mov	r0, r18
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <DIO_u8TogglePinValue+0xe8>
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	0a 94       	dec	r0
    1918:	e2 f7       	brpl	.-8      	; 0x1912 <DIO_u8TogglePinValue+0xe4>
    191a:	84 27       	eor	r24, r20
    191c:	8c 93       	st	X, r24
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <DIO_u8TogglePinValue+0xf6>
	default: Local_u8ErrorState=1;
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1924:	89 81       	ldd	r24, Y+1	; 0x01
}
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	08 95       	ret

00001936 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    193e:	27 97       	sbiw	r28, 0x07	; 7
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	f8 94       	cli
    1944:	de bf       	out	0x3e, r29	; 62
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	cd bf       	out	0x3d, r28	; 61
    194a:	8a 83       	std	Y+2, r24	; 0x02
    194c:	6b 83       	std	Y+3, r22	; 0x03
    194e:	5d 83       	std	Y+5, r21	; 0x05
    1950:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1952:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_pu8Value!=NULL) && (Copy_u8Pin<= DIO_u8PIN7))
    1954:	8c 81       	ldd	r24, Y+4	; 0x04
    1956:	9d 81       	ldd	r25, Y+5	; 0x05
    1958:	00 97       	sbiw	r24, 0x00	; 0
    195a:	09 f4       	brne	.+2      	; 0x195e <DIO_u8GetPinValue+0x28>
    195c:	78 c0       	rjmp	.+240    	; 0x1a4e <DIO_u8GetPinValue+0x118>
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	88 30       	cpi	r24, 0x08	; 8
    1962:	08 f0       	brcs	.+2      	; 0x1966 <DIO_u8GetPinValue+0x30>
    1964:	74 c0       	rjmp	.+232    	; 0x1a4e <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	3f 83       	std	Y+7, r19	; 0x07
    196e:	2e 83       	std	Y+6, r18	; 0x06
    1970:	4e 81       	ldd	r20, Y+6	; 0x06
    1972:	5f 81       	ldd	r21, Y+7	; 0x07
    1974:	41 30       	cpi	r20, 0x01	; 1
    1976:	51 05       	cpc	r21, r1
    1978:	59 f1       	breq	.+86     	; 0x19d0 <DIO_u8GetPinValue+0x9a>
    197a:	8e 81       	ldd	r24, Y+6	; 0x06
    197c:	9f 81       	ldd	r25, Y+7	; 0x07
    197e:	82 30       	cpi	r24, 0x02	; 2
    1980:	91 05       	cpc	r25, r1
    1982:	34 f4       	brge	.+12     	; 0x1990 <DIO_u8GetPinValue+0x5a>
    1984:	2e 81       	ldd	r18, Y+6	; 0x06
    1986:	3f 81       	ldd	r19, Y+7	; 0x07
    1988:	21 15       	cp	r18, r1
    198a:	31 05       	cpc	r19, r1
    198c:	69 f0       	breq	.+26     	; 0x19a8 <DIO_u8GetPinValue+0x72>
    198e:	5c c0       	rjmp	.+184    	; 0x1a48 <DIO_u8GetPinValue+0x112>
    1990:	4e 81       	ldd	r20, Y+6	; 0x06
    1992:	5f 81       	ldd	r21, Y+7	; 0x07
    1994:	42 30       	cpi	r20, 0x02	; 2
    1996:	51 05       	cpc	r21, r1
    1998:	79 f1       	breq	.+94     	; 0x19f8 <DIO_u8GetPinValue+0xc2>
    199a:	8e 81       	ldd	r24, Y+6	; 0x06
    199c:	9f 81       	ldd	r25, Y+7	; 0x07
    199e:	83 30       	cpi	r24, 0x03	; 3
    19a0:	91 05       	cpc	r25, r1
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <DIO_u8GetPinValue+0x70>
    19a4:	3d c0       	rjmp	.+122    	; 0x1a20 <DIO_u8GetPinValue+0xea>
    19a6:	50 c0       	rjmp	.+160    	; 0x1a48 <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA : *Copy_pu8Value= GET_BIT(PINA , Copy_u8Pin); break;
    19a8:	e9 e3       	ldi	r30, 0x39	; 57
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	28 2f       	mov	r18, r24
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	88 2f       	mov	r24, r24
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	a9 01       	movw	r20, r18
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <DIO_u8GetPinValue+0x8a>
    19bc:	55 95       	asr	r21
    19be:	47 95       	ror	r20
    19c0:	8a 95       	dec	r24
    19c2:	e2 f7       	brpl	.-8      	; 0x19bc <DIO_u8GetPinValue+0x86>
    19c4:	ca 01       	movw	r24, r20
    19c6:	81 70       	andi	r24, 0x01	; 1
    19c8:	ec 81       	ldd	r30, Y+4	; 0x04
    19ca:	fd 81       	ldd	r31, Y+5	; 0x05
    19cc:	80 83       	st	Z, r24
    19ce:	41 c0       	rjmp	.+130    	; 0x1a52 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB : *Copy_pu8Value= GET_BIT(PINB , Copy_u8Pin); break;
    19d0:	e6 e3       	ldi	r30, 0x36	; 54
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	28 2f       	mov	r18, r24
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	88 2f       	mov	r24, r24
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	a9 01       	movw	r20, r18
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <DIO_u8GetPinValue+0xb2>
    19e4:	55 95       	asr	r21
    19e6:	47 95       	ror	r20
    19e8:	8a 95       	dec	r24
    19ea:	e2 f7       	brpl	.-8      	; 0x19e4 <DIO_u8GetPinValue+0xae>
    19ec:	ca 01       	movw	r24, r20
    19ee:	81 70       	andi	r24, 0x01	; 1
    19f0:	ec 81       	ldd	r30, Y+4	; 0x04
    19f2:	fd 81       	ldd	r31, Y+5	; 0x05
    19f4:	80 83       	st	Z, r24
    19f6:	2d c0       	rjmp	.+90     	; 0x1a52 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC : *Copy_pu8Value= GET_BIT(PINC , Copy_u8Pin); break;
    19f8:	e3 e3       	ldi	r30, 0x33	; 51
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	28 2f       	mov	r18, r24
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	88 2f       	mov	r24, r24
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	a9 01       	movw	r20, r18
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <DIO_u8GetPinValue+0xda>
    1a0c:	55 95       	asr	r21
    1a0e:	47 95       	ror	r20
    1a10:	8a 95       	dec	r24
    1a12:	e2 f7       	brpl	.-8      	; 0x1a0c <DIO_u8GetPinValue+0xd6>
    1a14:	ca 01       	movw	r24, r20
    1a16:	81 70       	andi	r24, 0x01	; 1
    1a18:	ec 81       	ldd	r30, Y+4	; 0x04
    1a1a:	fd 81       	ldd	r31, Y+5	; 0x05
    1a1c:	80 83       	st	Z, r24
    1a1e:	19 c0       	rjmp	.+50     	; 0x1a52 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD : *Copy_pu8Value= GET_BIT(PIND , Copy_u8Pin); break;
    1a20:	e0 e3       	ldi	r30, 0x30	; 48
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	28 2f       	mov	r18, r24
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	88 2f       	mov	r24, r24
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	a9 01       	movw	r20, r18
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <DIO_u8GetPinValue+0x102>
    1a34:	55 95       	asr	r21
    1a36:	47 95       	ror	r20
    1a38:	8a 95       	dec	r24
    1a3a:	e2 f7       	brpl	.-8      	; 0x1a34 <DIO_u8GetPinValue+0xfe>
    1a3c:	ca 01       	movw	r24, r20
    1a3e:	81 70       	andi	r24, 0x01	; 1
    1a40:	ec 81       	ldd	r30, Y+4	; 0x04
    1a42:	fd 81       	ldd	r31, Y+5	; 0x05
    1a44:	80 83       	st	Z, r24
    1a46:	05 c0       	rjmp	.+10     	; 0x1a52 <DIO_u8GetPinValue+0x11c>
		default: Local_u8ErrorState=1;
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	89 83       	std	Y+1, r24	; 0x01
    1a4c:	02 c0       	rjmp	.+4      	; 0x1a52 <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a54:	27 96       	adiw	r28, 0x07	; 7
    1a56:	0f b6       	in	r0, 0x3f	; 63
    1a58:	f8 94       	cli
    1a5a:	de bf       	out	0x3e, r29	; 62
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	cd bf       	out	0x3d, r28	; 61
    1a60:	cf 91       	pop	r28
    1a62:	df 91       	pop	r29
    1a64:	08 95       	ret

00001a66 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8Port , u8* Copy_pu8Value)
{
    1a66:	df 93       	push	r29
    1a68:	cf 93       	push	r28
    1a6a:	00 d0       	rcall	.+0      	; 0x1a6c <DIO_u8GetPortValue+0x6>
    1a6c:	00 d0       	rcall	.+0      	; 0x1a6e <DIO_u8GetPortValue+0x8>
    1a6e:	00 d0       	rcall	.+0      	; 0x1a70 <DIO_u8GetPortValue+0xa>
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	8a 83       	std	Y+2, r24	; 0x02
    1a76:	7c 83       	std	Y+4, r23	; 0x04
    1a78:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
    1a7a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu8Value != NULL)
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a80:	00 97       	sbiw	r24, 0x00	; 0
    1a82:	09 f4       	brne	.+2      	; 0x1a86 <DIO_u8GetPortValue+0x20>
    1a84:	3e c0       	rjmp	.+124    	; 0x1b02 <DIO_u8GetPortValue+0x9c>
	{
		switch(Copy_u8Port)
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	3e 83       	std	Y+6, r19	; 0x06
    1a8e:	2d 83       	std	Y+5, r18	; 0x05
    1a90:	8d 81       	ldd	r24, Y+5	; 0x05
    1a92:	9e 81       	ldd	r25, Y+6	; 0x06
    1a94:	81 30       	cpi	r24, 0x01	; 1
    1a96:	91 05       	cpc	r25, r1
    1a98:	e1 f0       	breq	.+56     	; 0x1ad2 <DIO_u8GetPortValue+0x6c>
    1a9a:	2d 81       	ldd	r18, Y+5	; 0x05
    1a9c:	3e 81       	ldd	r19, Y+6	; 0x06
    1a9e:	22 30       	cpi	r18, 0x02	; 2
    1aa0:	31 05       	cpc	r19, r1
    1aa2:	2c f4       	brge	.+10     	; 0x1aae <DIO_u8GetPortValue+0x48>
    1aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa6:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	61 f0       	breq	.+24     	; 0x1ac4 <DIO_u8GetPortValue+0x5e>
    1aac:	27 c0       	rjmp	.+78     	; 0x1afc <DIO_u8GetPortValue+0x96>
    1aae:	2d 81       	ldd	r18, Y+5	; 0x05
    1ab0:	3e 81       	ldd	r19, Y+6	; 0x06
    1ab2:	22 30       	cpi	r18, 0x02	; 2
    1ab4:	31 05       	cpc	r19, r1
    1ab6:	a1 f0       	breq	.+40     	; 0x1ae0 <DIO_u8GetPortValue+0x7a>
    1ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aba:	9e 81       	ldd	r25, Y+6	; 0x06
    1abc:	83 30       	cpi	r24, 0x03	; 3
    1abe:	91 05       	cpc	r25, r1
    1ac0:	b1 f0       	breq	.+44     	; 0x1aee <DIO_u8GetPortValue+0x88>
    1ac2:	1c c0       	rjmp	.+56     	; 0x1afc <DIO_u8GetPortValue+0x96>
		{
		case DIO_u8PORTA: *Copy_pu8Value = PINA; break;
    1ac4:	e9 e3       	ldi	r30, 0x39	; 57
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	eb 81       	ldd	r30, Y+3	; 0x03
    1acc:	fc 81       	ldd	r31, Y+4	; 0x04
    1ace:	80 83       	st	Z, r24
    1ad0:	1a c0       	rjmp	.+52     	; 0x1b06 <DIO_u8GetPortValue+0xa0>
		case DIO_u8PORTB: *Copy_pu8Value = PINB; break;
    1ad2:	e6 e3       	ldi	r30, 0x36	; 54
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	eb 81       	ldd	r30, Y+3	; 0x03
    1ada:	fc 81       	ldd	r31, Y+4	; 0x04
    1adc:	80 83       	st	Z, r24
    1ade:	13 c0       	rjmp	.+38     	; 0x1b06 <DIO_u8GetPortValue+0xa0>
		case DIO_u8PORTC: *Copy_pu8Value = PINC; break;
    1ae0:	e3 e3       	ldi	r30, 0x33	; 51
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	eb 81       	ldd	r30, Y+3	; 0x03
    1ae8:	fc 81       	ldd	r31, Y+4	; 0x04
    1aea:	80 83       	st	Z, r24
    1aec:	0c c0       	rjmp	.+24     	; 0x1b06 <DIO_u8GetPortValue+0xa0>
		case DIO_u8PORTD: *Copy_pu8Value = PIND; break;
    1aee:	e0 e3       	ldi	r30, 0x30	; 48
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	eb 81       	ldd	r30, Y+3	; 0x03
    1af6:	fc 81       	ldd	r31, Y+4	; 0x04
    1af8:	80 83       	st	Z, r24
    1afa:	05 c0       	rjmp	.+10     	; 0x1b06 <DIO_u8GetPortValue+0xa0>
		default: Local_u8ErrorState = 1; break;
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	89 83       	std	Y+1, r24	; 0x01
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <DIO_u8GetPortValue+0xa0>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b08:	26 96       	adiw	r28, 0x06	; 6
    1b0a:	0f b6       	in	r0, 0x3f	; 63
    1b0c:	f8 94       	cli
    1b0e:	de bf       	out	0x3e, r29	; 62
    1b10:	0f be       	out	0x3f, r0	; 63
    1b12:	cd bf       	out	0x3d, r28	; 61
    1b14:	cf 91       	pop	r28
    1b16:	df 91       	pop	r29
    1b18:	08 95       	ret

00001b1a <Map>:

#include "MAP_config.h"
#include "MAP_private.h"
#include "MAP_interface.h"
s32 Map(s32 Copy_s32InputMin , s32 Copy_s32InputMax , s32 Copy_s32OutputMin , s32 Copy_s32OutputMax , s32 Copy_s32InputVal)
{
    1b1a:	af 92       	push	r10
    1b1c:	bf 92       	push	r11
    1b1e:	cf 92       	push	r12
    1b20:	df 92       	push	r13
    1b22:	ef 92       	push	r14
    1b24:	ff 92       	push	r15
    1b26:	0f 93       	push	r16
    1b28:	1f 93       	push	r17
    1b2a:	df 93       	push	r29
    1b2c:	cf 93       	push	r28
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
    1b32:	64 97       	sbiw	r28, 0x14	; 20
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	f8 94       	cli
    1b38:	de bf       	out	0x3e, r29	; 62
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	cd bf       	out	0x3d, r28	; 61
    1b3e:	6d 83       	std	Y+5, r22	; 0x05
    1b40:	7e 83       	std	Y+6, r23	; 0x06
    1b42:	8f 83       	std	Y+7, r24	; 0x07
    1b44:	98 87       	std	Y+8, r25	; 0x08
    1b46:	29 87       	std	Y+9, r18	; 0x09
    1b48:	3a 87       	std	Y+10, r19	; 0x0a
    1b4a:	4b 87       	std	Y+11, r20	; 0x0b
    1b4c:	5c 87       	std	Y+12, r21	; 0x0c
    1b4e:	ed 86       	std	Y+13, r14	; 0x0d
    1b50:	fe 86       	std	Y+14, r15	; 0x0e
    1b52:	0f 87       	std	Y+15, r16	; 0x0f
    1b54:	18 8b       	std	Y+16, r17	; 0x10
    1b56:	a9 8a       	std	Y+17, r10	; 0x11
    1b58:	ba 8a       	std	Y+18, r11	; 0x12
    1b5a:	cb 8a       	std	Y+19, r12	; 0x13
    1b5c:	dc 8a       	std	Y+20, r13	; 0x14
	s32 Loacl_s32Value = Copy_s32InputVal - Copy_s32InputMin;
    1b5e:	29 a1       	ldd	r18, Y+33	; 0x21
    1b60:	3a a1       	ldd	r19, Y+34	; 0x22
    1b62:	4b a1       	ldd	r20, Y+35	; 0x23
    1b64:	5c a1       	ldd	r21, Y+36	; 0x24
    1b66:	8d 81       	ldd	r24, Y+5	; 0x05
    1b68:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6a:	af 81       	ldd	r26, Y+7	; 0x07
    1b6c:	b8 85       	ldd	r27, Y+8	; 0x08
    1b6e:	79 01       	movw	r14, r18
    1b70:	8a 01       	movw	r16, r20
    1b72:	e8 1a       	sub	r14, r24
    1b74:	f9 0a       	sbc	r15, r25
    1b76:	0a 0b       	sbc	r16, r26
    1b78:	1b 0b       	sbc	r17, r27
    1b7a:	d8 01       	movw	r26, r16
    1b7c:	c7 01       	movw	r24, r14
    1b7e:	89 83       	std	Y+1, r24	; 0x01
    1b80:	9a 83       	std	Y+2, r25	; 0x02
    1b82:	ab 83       	std	Y+3, r26	; 0x03
    1b84:	bc 83       	std	Y+4, r27	; 0x04
	Loacl_s32Value = Loacl_s32Value * (Copy_s32OutputMax - Copy_s32OutputMin);
    1b86:	29 89       	ldd	r18, Y+17	; 0x11
    1b88:	3a 89       	ldd	r19, Y+18	; 0x12
    1b8a:	4b 89       	ldd	r20, Y+19	; 0x13
    1b8c:	5c 89       	ldd	r21, Y+20	; 0x14
    1b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b92:	af 85       	ldd	r26, Y+15	; 0x0f
    1b94:	b8 89       	ldd	r27, Y+16	; 0x10
    1b96:	28 1b       	sub	r18, r24
    1b98:	39 0b       	sbc	r19, r25
    1b9a:	4a 0b       	sbc	r20, r26
    1b9c:	5b 0b       	sbc	r21, r27
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba2:	ab 81       	ldd	r26, Y+3	; 0x03
    1ba4:	bc 81       	ldd	r27, Y+4	; 0x04
    1ba6:	bc 01       	movw	r22, r24
    1ba8:	cd 01       	movw	r24, r26
    1baa:	0e 94 7e 19 	call	0x32fc	; 0x32fc <__mulsi3>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	89 83       	std	Y+1, r24	; 0x01
    1bb4:	9a 83       	std	Y+2, r25	; 0x02
    1bb6:	ab 83       	std	Y+3, r26	; 0x03
    1bb8:	bc 83       	std	Y+4, r27	; 0x04
	Loacl_s32Value = Loacl_s32Value / (Copy_s32InputMax - Copy_s32InputMin);
    1bba:	29 85       	ldd	r18, Y+9	; 0x09
    1bbc:	3a 85       	ldd	r19, Y+10	; 0x0a
    1bbe:	4b 85       	ldd	r20, Y+11	; 0x0b
    1bc0:	5c 85       	ldd	r21, Y+12	; 0x0c
    1bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc6:	af 81       	ldd	r26, Y+7	; 0x07
    1bc8:	b8 85       	ldd	r27, Y+8	; 0x08
    1bca:	28 1b       	sub	r18, r24
    1bcc:	39 0b       	sbc	r19, r25
    1bce:	4a 0b       	sbc	r20, r26
    1bd0:	5b 0b       	sbc	r21, r27
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
    1bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd6:	ab 81       	ldd	r26, Y+3	; 0x03
    1bd8:	bc 81       	ldd	r27, Y+4	; 0x04
    1bda:	bc 01       	movw	r22, r24
    1bdc:	cd 01       	movw	r24, r26
    1bde:	0e 94 c4 19 	call	0x3388	; 0x3388 <__divmodsi4>
    1be2:	da 01       	movw	r26, r20
    1be4:	c9 01       	movw	r24, r18
    1be6:	89 83       	std	Y+1, r24	; 0x01
    1be8:	9a 83       	std	Y+2, r25	; 0x02
    1bea:	ab 83       	std	Y+3, r26	; 0x03
    1bec:	bc 83       	std	Y+4, r27	; 0x04
	Loacl_s32Value = Loacl_s32Value + Copy_s32OutputMin;
    1bee:	29 81       	ldd	r18, Y+1	; 0x01
    1bf0:	3a 81       	ldd	r19, Y+2	; 0x02
    1bf2:	4b 81       	ldd	r20, Y+3	; 0x03
    1bf4:	5c 81       	ldd	r21, Y+4	; 0x04
    1bf6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bfa:	af 85       	ldd	r26, Y+15	; 0x0f
    1bfc:	b8 89       	ldd	r27, Y+16	; 0x10
    1bfe:	82 0f       	add	r24, r18
    1c00:	93 1f       	adc	r25, r19
    1c02:	a4 1f       	adc	r26, r20
    1c04:	b5 1f       	adc	r27, r21
    1c06:	89 83       	std	Y+1, r24	; 0x01
    1c08:	9a 83       	std	Y+2, r25	; 0x02
    1c0a:	ab 83       	std	Y+3, r26	; 0x03
    1c0c:	bc 83       	std	Y+4, r27	; 0x04
	return Loacl_s32Value;
    1c0e:	89 81       	ldd	r24, Y+1	; 0x01
    1c10:	9a 81       	ldd	r25, Y+2	; 0x02
    1c12:	ab 81       	ldd	r26, Y+3	; 0x03
    1c14:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1c16:	bc 01       	movw	r22, r24
    1c18:	cd 01       	movw	r24, r26
    1c1a:	64 96       	adiw	r28, 0x14	; 20
    1c1c:	0f b6       	in	r0, 0x3f	; 63
    1c1e:	f8 94       	cli
    1c20:	de bf       	out	0x3e, r29	; 62
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	cd bf       	out	0x3d, r28	; 61
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	1f 91       	pop	r17
    1c2c:	0f 91       	pop	r16
    1c2e:	ff 90       	pop	r15
    1c30:	ef 90       	pop	r14
    1c32:	df 90       	pop	r13
    1c34:	cf 90       	pop	r12
    1c36:	bf 90       	pop	r11
    1c38:	af 90       	pop	r10
    1c3a:	08 95       	ret

00001c3c <SERVO_voidTimer1InitOCR1A>:

#include "SvM_interface.h"
#include "SvM_private.h"
#include "SvM_config.h"
void SERVO_voidTimer1InitOCR1A(void)
{
    1c3c:	df 93       	push	r29
    1c3e:	cf 93       	push	r28
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN5,DIO_u8PIN_OUTPUT);
    1c44:	83 e0       	ldi	r24, 0x03	; 3
    1c46:	65 e0       	ldi	r22, 0x05	; 5
    1c48:	41 e0       	ldi	r20, 0x01	; 1
    1c4a:	0e 94 9e 08 	call	0x113c	; 0x113c <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN4,DIO_u8PIN_OUTPUT);
    1c4e:	83 e0       	ldi	r24, 0x03	; 3
    1c50:	64 e0       	ldi	r22, 0x04	; 4
    1c52:	41 e0       	ldi	r20, 0x01	; 1
    1c54:	0e 94 9e 08 	call	0x113c	; 0x113c <DIO_u8SetPinDirection>
	TIMER_voidTimer1Enable(TIMER1_MODE_FAST_PWM_ICR1,TIMER1_MODE_CHANNEL_A_CLEAR_OC1A,TIMER1_MODE_CHANNEL_B_CLEAR_OC1B);
    1c58:	8e e0       	ldi	r24, 0x0E	; 14
    1c5a:	62 e0       	ldi	r22, 0x02	; 2
    1c5c:	42 e0       	ldi	r20, 0x02	; 2
    1c5e:	0e 94 87 11 	call	0x230e	; 0x230e <TIMER_voidTimer1Enable>
	TIMER_voidTimer1SetICR1 (19999);
    1c62:	8f e1       	ldi	r24, 0x1F	; 31
    1c64:	9e e4       	ldi	r25, 0x4E	; 78
    1c66:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <TIMER_voidTimer1SetICR1>
}
    1c6a:	cf 91       	pop	r28
    1c6c:	df 91       	pop	r29
    1c6e:	08 95       	ret

00001c70 <SERVO_voidTimer1InitOCR1B>:
void SERVO_voidTimer1InitOCR1B(void)
{
    1c70:	df 93       	push	r29
    1c72:	cf 93       	push	r28
    1c74:	cd b7       	in	r28, 0x3d	; 61
    1c76:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN4,DIO_u8PIN_OUTPUT);
    1c78:	83 e0       	ldi	r24, 0x03	; 3
    1c7a:	64 e0       	ldi	r22, 0x04	; 4
    1c7c:	41 e0       	ldi	r20, 0x01	; 1
    1c7e:	0e 94 9e 08 	call	0x113c	; 0x113c <DIO_u8SetPinDirection>
	TIMER_voidTimer1Enable(TIMER1_MODE_FAST_PWM_ICR1,TIMER1_MODE_CHANNEL_A_CLEAR_OC1A,TIMER1_MODE_CHANNEL_B_CLEAR_OC1B);
    1c82:	8e e0       	ldi	r24, 0x0E	; 14
    1c84:	62 e0       	ldi	r22, 0x02	; 2
    1c86:	42 e0       	ldi	r20, 0x02	; 2
    1c88:	0e 94 87 11 	call	0x230e	; 0x230e <TIMER_voidTimer1Enable>
	TIMER_voidTimer1SetICR1 (19999);
    1c8c:	8f e1       	ldi	r24, 0x1F	; 31
    1c8e:	9e e4       	ldi	r25, 0x4E	; 78
    1c90:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <TIMER_voidTimer1SetICR1>
}
    1c94:	cf 91       	pop	r28
    1c96:	df 91       	pop	r29
    1c98:	08 95       	ret

00001c9a <SERVO_voidTimer1ServoSetAngleOCR1A>:
void SERVO_voidTimer1ServoSetAngleOCR1A(u32 Copy_u32Angle)
{
    1c9a:	af 92       	push	r10
    1c9c:	bf 92       	push	r11
    1c9e:	cf 92       	push	r12
    1ca0:	df 92       	push	r13
    1ca2:	ef 92       	push	r14
    1ca4:	ff 92       	push	r15
    1ca6:	0f 93       	push	r16
    1ca8:	1f 93       	push	r17
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	00 d0       	rcall	.+0      	; 0x1cb0 <SERVO_voidTimer1ServoSetAngleOCR1A+0x16>
    1cb0:	00 d0       	rcall	.+0      	; 0x1cb2 <SERVO_voidTimer1ServoSetAngleOCR1A+0x18>
    1cb2:	00 d0       	rcall	.+0      	; 0x1cb4 <SERVO_voidTimer1ServoSetAngleOCR1A+0x1a>
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
    1cb8:	6b 83       	std	Y+3, r22	; 0x03
    1cba:	7c 83       	std	Y+4, r23	; 0x04
    1cbc:	8d 83       	std	Y+5, r24	; 0x05
    1cbe:	9e 83       	std	Y+6, r25	; 0x06
	//TIMER_voidTimer1SetICR1 (19999);
	u16 Local_u32AnglePulse = Map(0,180,539,2460,Copy_u32Angle);
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc4:	ad 81       	ldd	r26, Y+5	; 0x05
    1cc6:	be 81       	ldd	r27, Y+6	; 0x06
    1cc8:	00 d0       	rcall	.+0      	; 0x1cca <SERVO_voidTimer1ServoSetAngleOCR1A+0x30>
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <SERVO_voidTimer1ServoSetAngleOCR1A+0x32>
    1ccc:	ed b7       	in	r30, 0x3d	; 61
    1cce:	fe b7       	in	r31, 0x3e	; 62
    1cd0:	31 96       	adiw	r30, 0x01	; 1
    1cd2:	80 83       	st	Z, r24
    1cd4:	91 83       	std	Z+1, r25	; 0x01
    1cd6:	a2 83       	std	Z+2, r26	; 0x02
    1cd8:	b3 83       	std	Z+3, r27	; 0x03
    1cda:	60 e0       	ldi	r22, 0x00	; 0
    1cdc:	70 e0       	ldi	r23, 0x00	; 0
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	24 eb       	ldi	r18, 0xB4	; 180
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 e0       	ldi	r20, 0x00	; 0
    1ce8:	50 e0       	ldi	r21, 0x00	; 0
    1cea:	0f 2e       	mov	r0, r31
    1cec:	fb e1       	ldi	r31, 0x1B	; 27
    1cee:	ef 2e       	mov	r14, r31
    1cf0:	f2 e0       	ldi	r31, 0x02	; 2
    1cf2:	ff 2e       	mov	r15, r31
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	0f 2f       	mov	r16, r31
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	1f 2f       	mov	r17, r31
    1cfc:	f0 2d       	mov	r31, r0
    1cfe:	0f 2e       	mov	r0, r31
    1d00:	fc e9       	ldi	r31, 0x9C	; 156
    1d02:	af 2e       	mov	r10, r31
    1d04:	f9 e0       	ldi	r31, 0x09	; 9
    1d06:	bf 2e       	mov	r11, r31
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	cf 2e       	mov	r12, r31
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	df 2e       	mov	r13, r31
    1d10:	f0 2d       	mov	r31, r0
    1d12:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <Map>
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	9a 83       	std	Y+2, r25	; 0x02
    1d24:	89 83       	std	Y+1, r24	; 0x01

	TIMER_voidTimer1SetOCR1A(Local_u32AnglePulse);
    1d26:	89 81       	ldd	r24, Y+1	; 0x01
    1d28:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2a:	0e 94 90 16 	call	0x2d20	; 0x2d20 <TIMER_voidTimer1SetOCR1A>
}
    1d2e:	26 96       	adiw	r28, 0x06	; 6
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	de bf       	out	0x3e, r29	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	cf 91       	pop	r28
    1d3c:	df 91       	pop	r29
    1d3e:	1f 91       	pop	r17
    1d40:	0f 91       	pop	r16
    1d42:	ff 90       	pop	r15
    1d44:	ef 90       	pop	r14
    1d46:	df 90       	pop	r13
    1d48:	cf 90       	pop	r12
    1d4a:	bf 90       	pop	r11
    1d4c:	af 90       	pop	r10
    1d4e:	08 95       	ret

00001d50 <SERVO_voidTimer1ServoSetAngleOCR1B>:
void SERVO_voidTimer1ServoSetAngleOCR1B(u32 Copy_u32Angle)
{
    1d50:	af 92       	push	r10
    1d52:	bf 92       	push	r11
    1d54:	cf 92       	push	r12
    1d56:	df 92       	push	r13
    1d58:	ef 92       	push	r14
    1d5a:	ff 92       	push	r15
    1d5c:	0f 93       	push	r16
    1d5e:	1f 93       	push	r17
    1d60:	df 93       	push	r29
    1d62:	cf 93       	push	r28
    1d64:	00 d0       	rcall	.+0      	; 0x1d66 <SERVO_voidTimer1ServoSetAngleOCR1B+0x16>
    1d66:	00 d0       	rcall	.+0      	; 0x1d68 <SERVO_voidTimer1ServoSetAngleOCR1B+0x18>
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <SERVO_voidTimer1ServoSetAngleOCR1B+0x1a>
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
    1d6e:	6b 83       	std	Y+3, r22	; 0x03
    1d70:	7c 83       	std	Y+4, r23	; 0x04
    1d72:	8d 83       	std	Y+5, r24	; 0x05
    1d74:	9e 83       	std	Y+6, r25	; 0x06
	//TIMER_voidTimer1SetOCR1A (19999);
	u16 Local_u32AnglePulse = Map(0,180,539,2460,Copy_u32Angle);
    1d76:	8b 81       	ldd	r24, Y+3	; 0x03
    1d78:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7a:	ad 81       	ldd	r26, Y+5	; 0x05
    1d7c:	be 81       	ldd	r27, Y+6	; 0x06
    1d7e:	00 d0       	rcall	.+0      	; 0x1d80 <SERVO_voidTimer1ServoSetAngleOCR1B+0x30>
    1d80:	00 d0       	rcall	.+0      	; 0x1d82 <SERVO_voidTimer1ServoSetAngleOCR1B+0x32>
    1d82:	ed b7       	in	r30, 0x3d	; 61
    1d84:	fe b7       	in	r31, 0x3e	; 62
    1d86:	31 96       	adiw	r30, 0x01	; 1
    1d88:	80 83       	st	Z, r24
    1d8a:	91 83       	std	Z+1, r25	; 0x01
    1d8c:	a2 83       	std	Z+2, r26	; 0x02
    1d8e:	b3 83       	std	Z+3, r27	; 0x03
    1d90:	60 e0       	ldi	r22, 0x00	; 0
    1d92:	70 e0       	ldi	r23, 0x00	; 0
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	24 eb       	ldi	r18, 0xB4	; 180
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	40 e0       	ldi	r20, 0x00	; 0
    1d9e:	50 e0       	ldi	r21, 0x00	; 0
    1da0:	0f 2e       	mov	r0, r31
    1da2:	fb e1       	ldi	r31, 0x1B	; 27
    1da4:	ef 2e       	mov	r14, r31
    1da6:	f2 e0       	ldi	r31, 0x02	; 2
    1da8:	ff 2e       	mov	r15, r31
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	0f 2f       	mov	r16, r31
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	1f 2f       	mov	r17, r31
    1db2:	f0 2d       	mov	r31, r0
    1db4:	0f 2e       	mov	r0, r31
    1db6:	fc e9       	ldi	r31, 0x9C	; 156
    1db8:	af 2e       	mov	r10, r31
    1dba:	f9 e0       	ldi	r31, 0x09	; 9
    1dbc:	bf 2e       	mov	r11, r31
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	cf 2e       	mov	r12, r31
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	df 2e       	mov	r13, r31
    1dc6:	f0 2d       	mov	r31, r0
    1dc8:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <Map>
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	9a 83       	std	Y+2, r25	; 0x02
    1dda:	89 83       	std	Y+1, r24	; 0x01
	TIMER_voidTimer1SetOCR1B(Local_u32AnglePulse);
    1ddc:	89 81       	ldd	r24, Y+1	; 0x01
    1dde:	9a 81       	ldd	r25, Y+2	; 0x02
    1de0:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <TIMER_voidTimer1SetOCR1B>
}
    1de4:	26 96       	adiw	r28, 0x06	; 6
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	de bf       	out	0x3e, r29	; 62
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	cd bf       	out	0x3d, r28	; 61
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	1f 91       	pop	r17
    1df6:	0f 91       	pop	r16
    1df8:	ff 90       	pop	r15
    1dfa:	ef 90       	pop	r14
    1dfc:	df 90       	pop	r13
    1dfe:	cf 90       	pop	r12
    1e00:	bf 90       	pop	r11
    1e02:	af 90       	pop	r10
    1e04:	08 95       	ret

00001e06 <TIMER_voidTimer0Init>:
u32 TIMER0_f32OVCounterTmp;
f32 TIMER0_u16Prescaller;
u32 TIMER0_f32CounterCTC;
/**********************************************************************************/
void TIMER_voidTimer0Init(void)
{
    1e06:	df 93       	push	r29
    1e08:	cf 93       	push	r28
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(TIMSK,TIMSK_TOIE0);
		CLR_BIT(TIMSK,TIMSK_OCIE0);

		TCNT0=TIMER0_f32PreloodValue;
	#elif TIMER0_MODE  == TIMER0_MODE_PWM_PHASE_CORRECT
		SET_BIT(TCCR0,TCCR0_WGM00);
    1e0e:	a3 e5       	ldi	r26, 0x53	; 83
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	e3 e5       	ldi	r30, 0x53	; 83
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	80 64       	ori	r24, 0x40	; 64
    1e1a:	8c 93       	st	X, r24
	    CLR_BIT(TCCR0,TCCR0_WGM01);
    1e1c:	a3 e5       	ldi	r26, 0x53	; 83
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	e3 e5       	ldi	r30, 0x53	; 83
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	87 7f       	andi	r24, 0xF7	; 247
    1e28:	8c 93       	st	X, r24
         CLR_BIT(TCCR0,TCCR0_COM01);
    #elif  TIMER0_COMPARE_OUTPUT_MODE==TIMER0_MODE_TOGGLE
         SET_BIT(TCCR0,TCCR0_COM00);
         CLR_BIT(TCCR0,TCCR0_COM01);
    #elif  TIMER0_COMPARE_OUTPUT_MODE==TIMER0_MODE_CLEAR_OC0
         CLR_BIT(TCCR0,TCCR0_COM00);
    1e2a:	a3 e5       	ldi	r26, 0x53	; 83
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	e3 e5       	ldi	r30, 0x53	; 83
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	8f 7e       	andi	r24, 0xEF	; 239
    1e36:	8c 93       	st	X, r24
         SET_BIT(TCCR0,TCCR0_COM01);
    1e38:	a3 e5       	ldi	r26, 0x53	; 83
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	e3 e5       	ldi	r30, 0x53	; 83
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	80 62       	ori	r24, 0x20	; 32
    1e44:	8c 93       	st	X, r24
        CLR_BIT(TCCR0,TCCR0_CS00);
	    CLR_BIT(TCCR0,TCCR0_CS01);
	    SET_BIT(TCCR0,TCCR0_CS02);
	    TIMER0_u16Prescaller=256;
    #elif  TIMER0_CLOCK_SELECT == TIMER0_SELECT_CLK_DIV_1024
        SET_BIT(TCCR0,TCCR0_CS00);
    1e46:	a3 e5       	ldi	r26, 0x53	; 83
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	e3 e5       	ldi	r30, 0x53	; 83
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	81 60       	ori	r24, 0x01	; 1
    1e52:	8c 93       	st	X, r24
	    CLR_BIT(TCCR0,TCCR0_CS01);
    1e54:	a3 e5       	ldi	r26, 0x53	; 83
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	e3 e5       	ldi	r30, 0x53	; 83
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	8d 7f       	andi	r24, 0xFD	; 253
    1e60:	8c 93       	st	X, r24
	    SET_BIT(TCCR0,TCCR0_CS02);
    1e62:	a3 e5       	ldi	r26, 0x53	; 83
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e3 e5       	ldi	r30, 0x53	; 83
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	84 60       	ori	r24, 0x04	; 4
    1e6e:	8c 93       	st	X, r24
	    TIMER0_u16Prescaller=1024;
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	a0 e8       	ldi	r26, 0x80	; 128
    1e76:	b4 e4       	ldi	r27, 0x44	; 68
    1e78:	80 93 8c 00 	sts	0x008C, r24
    1e7c:	90 93 8d 00 	sts	0x008D, r25
    1e80:	a0 93 8e 00 	sts	0x008E, r26
    1e84:	b0 93 8f 00 	sts	0x008F, r27
        SET_BIT(TCCR0,TCCR0_CS00);
	    SET_BIT(TCCR0,TCCR0_CS01);
	    SET_BIT(TCCR0,TCCR0_CS02);
	    TIMER0_u16Prescaller=0;
	#endif
}
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	08 95       	ret

00001e8e <TIMER_voidTimer0Delay>:
/**********************************************************************************/
void TIMER_voidTimer0Delay(u32 Copy_u32DTime,void(*Copy_pFun)(void))
{
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	00 d0       	rcall	.+0      	; 0x1e94 <TIMER_voidTimer0Delay+0x6>
    1e94:	00 d0       	rcall	.+0      	; 0x1e96 <TIMER_voidTimer0Delay+0x8>
    1e96:	00 d0       	rcall	.+0      	; 0x1e98 <TIMER_voidTimer0Delay+0xa>
    1e98:	cd b7       	in	r28, 0x3d	; 61
    1e9a:	de b7       	in	r29, 0x3e	; 62
    1e9c:	69 83       	std	Y+1, r22	; 0x01
    1e9e:	7a 83       	std	Y+2, r23	; 0x02
    1ea0:	8b 83       	std	Y+3, r24	; 0x03
    1ea2:	9c 83       	std	Y+4, r25	; 0x04
    1ea4:	5e 83       	std	Y+6, r21	; 0x06
    1ea6:	4d 83       	std	Y+5, r20	; 0x05
    #elif TIMER0_MODE  == TIMER0_MODE_CTC
	   f32 Local_f32TCTC=((TIMER0_CTC_OCR0_VALUE)*(TIMER0_u16Prescaller/8000UL));
	   TIMER0_f32CounterCTC=((f32)Copy_u32DTime/Local_f32TCTC);
	   TIMER0_pSetCallBack=Copy_pFun;
    #endif
}
    1ea8:	26 96       	adiw	r28, 0x06	; 6
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	f8 94       	cli
    1eae:	de bf       	out	0x3e, r29	; 62
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	cd bf       	out	0x3d, r28	; 61
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <TIMER_voidTimer0GeneratePWM>:
/**********************************************************************************/
void TIMER_voidTimer0GeneratePWM(f32 Copy_u8Intensity)
{
    1eba:	0f 93       	push	r16
    1ebc:	1f 93       	push	r17
    1ebe:	df 93       	push	r29
    1ec0:	cf 93       	push	r28
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	28 97       	sbiw	r28, 0x08	; 8
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	f8 94       	cli
    1ecc:	de bf       	out	0x3e, r29	; 62
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	cd bf       	out	0x3d, r28	; 61
    1ed2:	6d 83       	std	Y+5, r22	; 0x05
    1ed4:	7e 83       	std	Y+6, r23	; 0x06
    1ed6:	8f 83       	std	Y+7, r24	; 0x07
    1ed8:	98 87       	std	Y+8, r25	; 0x08
   #if TIMER0_MODE  == TIMER0_MODE_PWM_PHASE_CORRECT
	   f32 Copy_u8OCRValue;
	   Copy_u8OCRValue=(511*Copy_u8Intensity/100);
    1eda:	6d 81       	ldd	r22, Y+5	; 0x05
    1edc:	7e 81       	ldd	r23, Y+6	; 0x06
    1ede:	8f 81       	ldd	r24, Y+7	; 0x07
    1ee0:	98 85       	ldd	r25, Y+8	; 0x08
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e8       	ldi	r19, 0x80	; 128
    1ee6:	4f ef       	ldi	r20, 0xFF	; 255
    1ee8:	53 e4       	ldi	r21, 0x43	; 67
    1eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	bc 01       	movw	r22, r24
    1ef4:	cd 01       	movw	r24, r26
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	48 ec       	ldi	r20, 0xC8	; 200
    1efc:	52 e4       	ldi	r21, 0x42	; 66
    1efe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	89 83       	std	Y+1, r24	; 0x01
    1f08:	9a 83       	std	Y+2, r25	; 0x02
    1f0a:	ab 83       	std	Y+3, r26	; 0x03
    1f0c:	bc 83       	std	Y+4, r27	; 0x04
	   OCR0=Copy_u8OCRValue;
    1f0e:	0c e5       	ldi	r16, 0x5C	; 92
    1f10:	10 e0       	ldi	r17, 0x00	; 0
    1f12:	69 81       	ldd	r22, Y+1	; 0x01
    1f14:	7a 81       	ldd	r23, Y+2	; 0x02
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	f8 01       	movw	r30, r16
    1f24:	80 83       	st	Z, r24
   #elif TIMER0_MODE  == TIMER0_MODE_FAST_PWM
	   f32 Copy_u8OCRValue;
	   Copy_u8OCRValue=(256*Copy_u8Intensity/100);
	   OCR0=Copy_u8OCRValue;
   #endif
}
    1f26:	28 96       	adiw	r28, 0x08	; 8
    1f28:	0f b6       	in	r0, 0x3f	; 63
    1f2a:	f8 94       	cli
    1f2c:	de bf       	out	0x3e, r29	; 62
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	cd bf       	out	0x3d, r28	; 61
    1f32:	cf 91       	pop	r28
    1f34:	df 91       	pop	r29
    1f36:	1f 91       	pop	r17
    1f38:	0f 91       	pop	r16
    1f3a:	08 95       	ret

00001f3c <__vector_11>:
/**********************************************************************************/
void __vector_11 (void)
{
    1f3c:	1f 92       	push	r1
    1f3e:	0f 92       	push	r0
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	0f 92       	push	r0
    1f44:	11 24       	eor	r1, r1
    1f46:	2f 93       	push	r18
    1f48:	3f 93       	push	r19
    1f4a:	4f 93       	push	r20
    1f4c:	5f 93       	push	r21
    1f4e:	6f 93       	push	r22
    1f50:	7f 93       	push	r23
    1f52:	8f 93       	push	r24
    1f54:	9f 93       	push	r25
    1f56:	af 93       	push	r26
    1f58:	bf 93       	push	r27
    1f5a:	ef 93       	push	r30
    1f5c:	ff 93       	push	r31
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
	   static u16 Local_u16Counter=0;
	   Local_u16Counter++;
    1f66:	80 91 75 00 	lds	r24, 0x0075
    1f6a:	90 91 76 00 	lds	r25, 0x0076
    1f6e:	01 96       	adiw	r24, 0x01	; 1
    1f70:	90 93 76 00 	sts	0x0076, r25
    1f74:	80 93 75 00 	sts	0x0075, r24
	   if(TIMER0_f32OVCounterTmp==Local_u16Counter)
    1f78:	80 91 75 00 	lds	r24, 0x0075
    1f7c:	90 91 76 00 	lds	r25, 0x0076
    1f80:	9c 01       	movw	r18, r24
    1f82:	40 e0       	ldi	r20, 0x00	; 0
    1f84:	50 e0       	ldi	r21, 0x00	; 0
    1f86:	80 91 88 00 	lds	r24, 0x0088
    1f8a:	90 91 89 00 	lds	r25, 0x0089
    1f8e:	a0 91 8a 00 	lds	r26, 0x008A
    1f92:	b0 91 8b 00 	lds	r27, 0x008B
    1f96:	28 17       	cp	r18, r24
    1f98:	39 07       	cpc	r19, r25
    1f9a:	4a 07       	cpc	r20, r26
    1f9c:	5b 07       	cpc	r21, r27
    1f9e:	a1 f4       	brne	.+40     	; 0x1fc8 <__vector_11+0x8c>
	   {
		   TCNT0=TIMER0_f32PreloodValue;
    1fa0:	e2 e5       	ldi	r30, 0x52	; 82
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 91 84 00 	lds	r24, 0x0084
    1fa8:	90 91 85 00 	lds	r25, 0x0085
    1fac:	a0 91 86 00 	lds	r26, 0x0086
    1fb0:	b0 91 87 00 	lds	r27, 0x0087
    1fb4:	80 83       	st	Z, r24
		   TIMER0_pSetCallBack();
    1fb6:	e0 91 7d 00 	lds	r30, 0x007D
    1fba:	f0 91 7e 00 	lds	r31, 0x007E
    1fbe:	09 95       	icall
		   Local_u16Counter=0;
    1fc0:	10 92 76 00 	sts	0x0076, r1
    1fc4:	10 92 75 00 	sts	0x0075, r1
	   }
}
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	ff 91       	pop	r31
    1fce:	ef 91       	pop	r30
    1fd0:	bf 91       	pop	r27
    1fd2:	af 91       	pop	r26
    1fd4:	9f 91       	pop	r25
    1fd6:	8f 91       	pop	r24
    1fd8:	7f 91       	pop	r23
    1fda:	6f 91       	pop	r22
    1fdc:	5f 91       	pop	r21
    1fde:	4f 91       	pop	r20
    1fe0:	3f 91       	pop	r19
    1fe2:	2f 91       	pop	r18
    1fe4:	0f 90       	pop	r0
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	0f 90       	pop	r0
    1fea:	1f 90       	pop	r1
    1fec:	18 95       	reti

00001fee <__vector_10>:
void __vector_10 (void)
{
    1fee:	1f 92       	push	r1
    1ff0:	0f 92       	push	r0
    1ff2:	0f b6       	in	r0, 0x3f	; 63
    1ff4:	0f 92       	push	r0
    1ff6:	11 24       	eor	r1, r1
    1ff8:	2f 93       	push	r18
    1ffa:	3f 93       	push	r19
    1ffc:	4f 93       	push	r20
    1ffe:	5f 93       	push	r21
    2000:	6f 93       	push	r22
    2002:	7f 93       	push	r23
    2004:	8f 93       	push	r24
    2006:	9f 93       	push	r25
    2008:	af 93       	push	r26
    200a:	bf 93       	push	r27
    200c:	ef 93       	push	r30
    200e:	ff 93       	push	r31
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
	   static u16 Local_u8Counter=0;
	   Local_u8Counter++;
    2018:	80 91 77 00 	lds	r24, 0x0077
    201c:	90 91 78 00 	lds	r25, 0x0078
    2020:	01 96       	adiw	r24, 0x01	; 1
    2022:	90 93 78 00 	sts	0x0078, r25
    2026:	80 93 77 00 	sts	0x0077, r24
	   if(TIMER0_f32CounterCTC==Local_u8Counter)
    202a:	80 91 77 00 	lds	r24, 0x0077
    202e:	90 91 78 00 	lds	r25, 0x0078
    2032:	9c 01       	movw	r18, r24
    2034:	40 e0       	ldi	r20, 0x00	; 0
    2036:	50 e0       	ldi	r21, 0x00	; 0
    2038:	80 91 98 00 	lds	r24, 0x0098
    203c:	90 91 99 00 	lds	r25, 0x0099
    2040:	a0 91 9a 00 	lds	r26, 0x009A
    2044:	b0 91 9b 00 	lds	r27, 0x009B
    2048:	28 17       	cp	r18, r24
    204a:	39 07       	cpc	r19, r25
    204c:	4a 07       	cpc	r20, r26
    204e:	5b 07       	cpc	r21, r27
    2050:	49 f4       	brne	.+18     	; 0x2064 <__vector_10+0x76>
	   {
		   Local_u8Counter=0;
    2052:	10 92 78 00 	sts	0x0078, r1
    2056:	10 92 77 00 	sts	0x0077, r1
		   TIMER0_pSetCallBack();
    205a:	e0 91 7d 00 	lds	r30, 0x007D
    205e:	f0 91 7e 00 	lds	r31, 0x007E
    2062:	09 95       	icall
	   }
}
    2064:	cf 91       	pop	r28
    2066:	df 91       	pop	r29
    2068:	ff 91       	pop	r31
    206a:	ef 91       	pop	r30
    206c:	bf 91       	pop	r27
    206e:	af 91       	pop	r26
    2070:	9f 91       	pop	r25
    2072:	8f 91       	pop	r24
    2074:	7f 91       	pop	r23
    2076:	6f 91       	pop	r22
    2078:	5f 91       	pop	r21
    207a:	4f 91       	pop	r20
    207c:	3f 91       	pop	r19
    207e:	2f 91       	pop	r18
    2080:	0f 90       	pop	r0
    2082:	0f be       	out	0x3f, r0	; 63
    2084:	0f 90       	pop	r0
    2086:	1f 90       	pop	r1
    2088:	18 95       	reti

0000208a <TIMER_voidTimer2Init>:
f32 TIMER2_u16Prescaller;
u32 TIMER2_f32CounterCTC;
/**********************************************************************************/

void TIMER_voidTimer2Init(void)
{
    208a:	df 93       	push	r29
    208c:	cf 93       	push	r28
    208e:	cd b7       	in	r28, 0x3d	; 61
    2090:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(TIMSK,TIMSK_TOIE2);
		CLR_BIT(TIMSK,TIMSK_OCIE2);

		TCNT2=TIMER2_f32PreloodValue;
	#elif TIMER2_MODE  == TIMER2_MODE_PWM_PHASE_CORRECT
		SET_BIT(TCCR2,TCCR2_WGM20);
    2092:	a5 e4       	ldi	r26, 0x45	; 69
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	e5 e4       	ldi	r30, 0x45	; 69
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	80 64       	ori	r24, 0x40	; 64
    209e:	8c 93       	st	X, r24
	    CLR_BIT(TCCR2,TCCR2_WGM21);
    20a0:	a5 e4       	ldi	r26, 0x45	; 69
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	e5 e4       	ldi	r30, 0x45	; 69
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	87 7f       	andi	r24, 0xF7	; 247
    20ac:	8c 93       	st	X, r24
         CLR_BIT(TCCR2,TCCR2_COM21);
    #elif  TIMER2_COMPARE_OUTPUT_MODE==TIMER2_MODE_TOGGLE
         SET_BIT(TCCR2,TCCR2_COM20);
         CLR_BIT(TCCR2,TCCR2_COM21);
    #elif  TIMER2_COMPARE_OUTPUT_MODE==TIMER2_MODE_CLEAR_OC2
         CLR_BIT(TCCR2,TCCR2_COM20);
    20ae:	a5 e4       	ldi	r26, 0x45	; 69
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	e5 e4       	ldi	r30, 0x45	; 69
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	8f 7e       	andi	r24, 0xEF	; 239
    20ba:	8c 93       	st	X, r24
         SET_BIT(TCCR2,TCCR2_COM21);
    20bc:	a5 e4       	ldi	r26, 0x45	; 69
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	e5 e4       	ldi	r30, 0x45	; 69
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	80 81       	ld	r24, Z
    20c6:	80 62       	ori	r24, 0x20	; 32
    20c8:	8c 93       	st	X, r24
        CLR_BIT(TCCR2,TCCR2_CS20);
	    CLR_BIT(TCCR2,TCCR2_CS21);
	    SET_BIT(TCCR2,TCCR2_CS22);
	    TIMER2_u16Prescaller=256;
    #elif  TIMER2_CLOCK_SELECT == TIMER2_SELECT_CLK_DIV_1024
        SET_BIT(TCCR2,TCCR2_CS20);
    20ca:	a5 e4       	ldi	r26, 0x45	; 69
    20cc:	b0 e0       	ldi	r27, 0x00	; 0
    20ce:	e5 e4       	ldi	r30, 0x45	; 69
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	80 81       	ld	r24, Z
    20d4:	81 60       	ori	r24, 0x01	; 1
    20d6:	8c 93       	st	X, r24
	    CLR_BIT(TCCR2,TCCR2_CS21);
    20d8:	a5 e4       	ldi	r26, 0x45	; 69
    20da:	b0 e0       	ldi	r27, 0x00	; 0
    20dc:	e5 e4       	ldi	r30, 0x45	; 69
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	80 81       	ld	r24, Z
    20e2:	8d 7f       	andi	r24, 0xFD	; 253
    20e4:	8c 93       	st	X, r24
	    SET_BIT(TCCR2,TCCR2_CS22);
    20e6:	a5 e4       	ldi	r26, 0x45	; 69
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	e5 e4       	ldi	r30, 0x45	; 69
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	84 60       	ori	r24, 0x04	; 4
    20f2:	8c 93       	st	X, r24
	    TIMER2_u16Prescaller=1024;
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	a0 e8       	ldi	r26, 0x80	; 128
    20fa:	b4 e4       	ldi	r27, 0x44	; 68
    20fc:	80 93 94 00 	sts	0x0094, r24
    2100:	90 93 95 00 	sts	0x0095, r25
    2104:	a0 93 96 00 	sts	0x0096, r26
    2108:	b0 93 97 00 	sts	0x0097, r27
        SET_BIT(TCCR2,TCCR2_CS20);
	    SET_BIT(TCCR2,TCCR2_CS21);
	    SET_BIT(TCCR2,TCCR2_CS22);
	    TIMER2_u16Prescaller=0;
	#endif
}
    210c:	cf 91       	pop	r28
    210e:	df 91       	pop	r29
    2110:	08 95       	ret

00002112 <TIMER_voidTimer2Delay>:
/**********************************************************************************/
void TIMER_voidTimer2Delay(u32 Copy_u32DTime,void(*Copy_pFun)(void))
{
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	00 d0       	rcall	.+0      	; 0x2118 <TIMER_voidTimer2Delay+0x6>
    2118:	00 d0       	rcall	.+0      	; 0x211a <TIMER_voidTimer2Delay+0x8>
    211a:	00 d0       	rcall	.+0      	; 0x211c <TIMER_voidTimer2Delay+0xa>
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
    2120:	69 83       	std	Y+1, r22	; 0x01
    2122:	7a 83       	std	Y+2, r23	; 0x02
    2124:	8b 83       	std	Y+3, r24	; 0x03
    2126:	9c 83       	std	Y+4, r25	; 0x04
    2128:	5e 83       	std	Y+6, r21	; 0x06
    212a:	4d 83       	std	Y+5, r20	; 0x05
    #elif TIMER2_MODE  == TIMER2_MODE_CTC
	   f32 Local_f32TCTC=((TIMER2_CTC_OCR2_VALUE)*(TIMER2_u16Prescaller/8000UL));
	   TIMER2_f32CounterCTC=((f32)Copy_u32DTime/Local_f32TCTC);
	   TIMER2_pSetCallBack=Copy_pFun;
    #endif
}
    212c:	26 96       	adiw	r28, 0x06	; 6
    212e:	0f b6       	in	r0, 0x3f	; 63
    2130:	f8 94       	cli
    2132:	de bf       	out	0x3e, r29	; 62
    2134:	0f be       	out	0x3f, r0	; 63
    2136:	cd bf       	out	0x3d, r28	; 61
    2138:	cf 91       	pop	r28
    213a:	df 91       	pop	r29
    213c:	08 95       	ret

0000213e <TIMER_voidTimer2GeneratePWM>:
/**********************************************************************************/
void TIMER_voidTimer2GeneratePWM(f32 Copy_u8Intensity)
{
    213e:	0f 93       	push	r16
    2140:	1f 93       	push	r17
    2142:	df 93       	push	r29
    2144:	cf 93       	push	r28
    2146:	cd b7       	in	r28, 0x3d	; 61
    2148:	de b7       	in	r29, 0x3e	; 62
    214a:	28 97       	sbiw	r28, 0x08	; 8
    214c:	0f b6       	in	r0, 0x3f	; 63
    214e:	f8 94       	cli
    2150:	de bf       	out	0x3e, r29	; 62
    2152:	0f be       	out	0x3f, r0	; 63
    2154:	cd bf       	out	0x3d, r28	; 61
    2156:	6d 83       	std	Y+5, r22	; 0x05
    2158:	7e 83       	std	Y+6, r23	; 0x06
    215a:	8f 83       	std	Y+7, r24	; 0x07
    215c:	98 87       	std	Y+8, r25	; 0x08
   #if TIMER2_MODE  == TIMER2_MODE_PWM_PHASE_CORRECT
	   f32 Copy_u8OCRValue;
	   Copy_u8OCRValue=(511*Copy_u8Intensity/100);
    215e:	6d 81       	ldd	r22, Y+5	; 0x05
    2160:	7e 81       	ldd	r23, Y+6	; 0x06
    2162:	8f 81       	ldd	r24, Y+7	; 0x07
    2164:	98 85       	ldd	r25, Y+8	; 0x08
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e8       	ldi	r19, 0x80	; 128
    216a:	4f ef       	ldi	r20, 0xFF	; 255
    216c:	53 e4       	ldi	r21, 0x43	; 67
    216e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	bc 01       	movw	r22, r24
    2178:	cd 01       	movw	r24, r26
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	48 ec       	ldi	r20, 0xC8	; 200
    2180:	52 e4       	ldi	r21, 0x42	; 66
    2182:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	89 83       	std	Y+1, r24	; 0x01
    218c:	9a 83       	std	Y+2, r25	; 0x02
    218e:	ab 83       	std	Y+3, r26	; 0x03
    2190:	bc 83       	std	Y+4, r27	; 0x04
	   OCR2=Copy_u8OCRValue;
    2192:	03 e4       	ldi	r16, 0x43	; 67
    2194:	10 e0       	ldi	r17, 0x00	; 0
    2196:	69 81       	ldd	r22, Y+1	; 0x01
    2198:	7a 81       	ldd	r23, Y+2	; 0x02
    219a:	8b 81       	ldd	r24, Y+3	; 0x03
    219c:	9c 81       	ldd	r25, Y+4	; 0x04
    219e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	f8 01       	movw	r30, r16
    21a8:	80 83       	st	Z, r24
   #elif TIMER2_MODE  == TIMER2_MODE_FAST_PWM
	   f32 Copy_u8OCRValue;
	   Copy_u8OCRValue=(256*Copy_u8Intensity/100);
	   OCR2=Copy_u8OCRValue;
   #endif
}
    21aa:	28 96       	adiw	r28, 0x08	; 8
    21ac:	0f b6       	in	r0, 0x3f	; 63
    21ae:	f8 94       	cli
    21b0:	de bf       	out	0x3e, r29	; 62
    21b2:	0f be       	out	0x3f, r0	; 63
    21b4:	cd bf       	out	0x3d, r28	; 61
    21b6:	cf 91       	pop	r28
    21b8:	df 91       	pop	r29
    21ba:	1f 91       	pop	r17
    21bc:	0f 91       	pop	r16
    21be:	08 95       	ret

000021c0 <__vector_5>:
/**********************************************************************************/
void __vector_5 (void)
{
    21c0:	1f 92       	push	r1
    21c2:	0f 92       	push	r0
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	0f 92       	push	r0
    21c8:	11 24       	eor	r1, r1
    21ca:	2f 93       	push	r18
    21cc:	3f 93       	push	r19
    21ce:	4f 93       	push	r20
    21d0:	5f 93       	push	r21
    21d2:	6f 93       	push	r22
    21d4:	7f 93       	push	r23
    21d6:	8f 93       	push	r24
    21d8:	9f 93       	push	r25
    21da:	af 93       	push	r26
    21dc:	bf 93       	push	r27
    21de:	ef 93       	push	r30
    21e0:	ff 93       	push	r31
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
	   static u16 Local_u16Counter=0;
	   Local_u16Counter++;
    21ea:	80 91 79 00 	lds	r24, 0x0079
    21ee:	90 91 7a 00 	lds	r25, 0x007A
    21f2:	01 96       	adiw	r24, 0x01	; 1
    21f4:	90 93 7a 00 	sts	0x007A, r25
    21f8:	80 93 79 00 	sts	0x0079, r24
	   if(TIMER2_f32OVCounter==Local_u16Counter)
    21fc:	80 91 79 00 	lds	r24, 0x0079
    2200:	90 91 7a 00 	lds	r25, 0x007A
    2204:	9c 01       	movw	r18, r24
    2206:	40 e0       	ldi	r20, 0x00	; 0
    2208:	50 e0       	ldi	r21, 0x00	; 0
    220a:	80 91 90 00 	lds	r24, 0x0090
    220e:	90 91 91 00 	lds	r25, 0x0091
    2212:	a0 91 92 00 	lds	r26, 0x0092
    2216:	b0 91 93 00 	lds	r27, 0x0093
    221a:	28 17       	cp	r18, r24
    221c:	39 07       	cpc	r19, r25
    221e:	4a 07       	cpc	r20, r26
    2220:	5b 07       	cpc	r21, r27
    2222:	a1 f4       	brne	.+40     	; 0x224c <__vector_5+0x8c>
	   {
		   TCNT2=TIMER2_f32PreloodValue;
    2224:	e4 e4       	ldi	r30, 0x44	; 68
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	80 91 a0 00 	lds	r24, 0x00A0
    222c:	90 91 a1 00 	lds	r25, 0x00A1
    2230:	a0 91 a2 00 	lds	r26, 0x00A2
    2234:	b0 91 a3 00 	lds	r27, 0x00A3
    2238:	80 83       	st	Z, r24
		   TIMER2_pSetCallBack();
    223a:	e0 91 7f 00 	lds	r30, 0x007F
    223e:	f0 91 80 00 	lds	r31, 0x0080
    2242:	09 95       	icall
		   Local_u16Counter=0;
    2244:	10 92 7a 00 	sts	0x007A, r1
    2248:	10 92 79 00 	sts	0x0079, r1
	   }
}
    224c:	cf 91       	pop	r28
    224e:	df 91       	pop	r29
    2250:	ff 91       	pop	r31
    2252:	ef 91       	pop	r30
    2254:	bf 91       	pop	r27
    2256:	af 91       	pop	r26
    2258:	9f 91       	pop	r25
    225a:	8f 91       	pop	r24
    225c:	7f 91       	pop	r23
    225e:	6f 91       	pop	r22
    2260:	5f 91       	pop	r21
    2262:	4f 91       	pop	r20
    2264:	3f 91       	pop	r19
    2266:	2f 91       	pop	r18
    2268:	0f 90       	pop	r0
    226a:	0f be       	out	0x3f, r0	; 63
    226c:	0f 90       	pop	r0
    226e:	1f 90       	pop	r1
    2270:	18 95       	reti

00002272 <__vector_4>:
void __vector_4 (void)
{
    2272:	1f 92       	push	r1
    2274:	0f 92       	push	r0
    2276:	0f b6       	in	r0, 0x3f	; 63
    2278:	0f 92       	push	r0
    227a:	11 24       	eor	r1, r1
    227c:	2f 93       	push	r18
    227e:	3f 93       	push	r19
    2280:	4f 93       	push	r20
    2282:	5f 93       	push	r21
    2284:	6f 93       	push	r22
    2286:	7f 93       	push	r23
    2288:	8f 93       	push	r24
    228a:	9f 93       	push	r25
    228c:	af 93       	push	r26
    228e:	bf 93       	push	r27
    2290:	ef 93       	push	r30
    2292:	ff 93       	push	r31
    2294:	df 93       	push	r29
    2296:	cf 93       	push	r28
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
	   static u16 Local_u8Counter=0;
	   Local_u8Counter++;
    229c:	80 91 7b 00 	lds	r24, 0x007B
    22a0:	90 91 7c 00 	lds	r25, 0x007C
    22a4:	01 96       	adiw	r24, 0x01	; 1
    22a6:	90 93 7c 00 	sts	0x007C, r25
    22aa:	80 93 7b 00 	sts	0x007B, r24
	   if(TIMER2_f32CounterCTC==Local_u8Counter)
    22ae:	80 91 7b 00 	lds	r24, 0x007B
    22b2:	90 91 7c 00 	lds	r25, 0x007C
    22b6:	9c 01       	movw	r18, r24
    22b8:	40 e0       	ldi	r20, 0x00	; 0
    22ba:	50 e0       	ldi	r21, 0x00	; 0
    22bc:	80 91 9c 00 	lds	r24, 0x009C
    22c0:	90 91 9d 00 	lds	r25, 0x009D
    22c4:	a0 91 9e 00 	lds	r26, 0x009E
    22c8:	b0 91 9f 00 	lds	r27, 0x009F
    22cc:	28 17       	cp	r18, r24
    22ce:	39 07       	cpc	r19, r25
    22d0:	4a 07       	cpc	r20, r26
    22d2:	5b 07       	cpc	r21, r27
    22d4:	49 f4       	brne	.+18     	; 0x22e8 <__vector_4+0x76>
	   {
		   TIMER2_pSetCallBack();
    22d6:	e0 91 7f 00 	lds	r30, 0x007F
    22da:	f0 91 80 00 	lds	r31, 0x0080
    22de:	09 95       	icall
		   Local_u8Counter=0;
    22e0:	10 92 7c 00 	sts	0x007C, r1
    22e4:	10 92 7b 00 	sts	0x007B, r1
	   }
}
    22e8:	cf 91       	pop	r28
    22ea:	df 91       	pop	r29
    22ec:	ff 91       	pop	r31
    22ee:	ef 91       	pop	r30
    22f0:	bf 91       	pop	r27
    22f2:	af 91       	pop	r26
    22f4:	9f 91       	pop	r25
    22f6:	8f 91       	pop	r24
    22f8:	7f 91       	pop	r23
    22fa:	6f 91       	pop	r22
    22fc:	5f 91       	pop	r21
    22fe:	4f 91       	pop	r20
    2300:	3f 91       	pop	r19
    2302:	2f 91       	pop	r18
    2304:	0f 90       	pop	r0
    2306:	0f be       	out	0x3f, r0	; 63
    2308:	0f 90       	pop	r0
    230a:	1f 90       	pop	r1
    230c:	18 95       	reti

0000230e <TIMER_voidTimer1Enable>:
*                                                               Timer 1                                                              *
**************************************************************************************************************************************/
u8 TIMER1_u8MODEPWM;
/************************************************************************************************************************************/
void TIMER_voidTimer1Enable(u8 Copy_u8Timer1Mode,u8 Copy_u8Timer1ModeChannelA,u8 Copy_u8Timer1ModeChannelB)
{
    230e:	df 93       	push	r29
    2310:	cf 93       	push	r28
    2312:	cd b7       	in	r28, 0x3d	; 61
    2314:	de b7       	in	r29, 0x3e	; 62
    2316:	29 97       	sbiw	r28, 0x09	; 9
    2318:	0f b6       	in	r0, 0x3f	; 63
    231a:	f8 94       	cli
    231c:	de bf       	out	0x3e, r29	; 62
    231e:	0f be       	out	0x3f, r0	; 63
    2320:	cd bf       	out	0x3d, r28	; 61
    2322:	89 83       	std	Y+1, r24	; 0x01
    2324:	6a 83       	std	Y+2, r22	; 0x02
    2326:	4b 83       	std	Y+3, r20	; 0x03
switch(Copy_u8Timer1Mode)
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	28 2f       	mov	r18, r24
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	39 87       	std	Y+9, r19	; 0x09
    2330:	28 87       	std	Y+8, r18	; 0x08
    2332:	88 85       	ldd	r24, Y+8	; 0x08
    2334:	99 85       	ldd	r25, Y+9	; 0x09
    2336:	87 30       	cpi	r24, 0x07	; 7
    2338:	91 05       	cpc	r25, r1
    233a:	09 f4       	brne	.+2      	; 0x233e <TIMER_voidTimer1Enable+0x30>
    233c:	6b c1       	rjmp	.+726    	; 0x2614 <TIMER_voidTimer1Enable+0x306>
    233e:	28 85       	ldd	r18, Y+8	; 0x08
    2340:	39 85       	ldd	r19, Y+9	; 0x09
    2342:	28 30       	cpi	r18, 0x08	; 8
    2344:	31 05       	cpc	r19, r1
    2346:	4c f5       	brge	.+82     	; 0x239a <TIMER_voidTimer1Enable+0x8c>
    2348:	88 85       	ldd	r24, Y+8	; 0x08
    234a:	99 85       	ldd	r25, Y+9	; 0x09
    234c:	83 30       	cpi	r24, 0x03	; 3
    234e:	91 05       	cpc	r25, r1
    2350:	09 f4       	brne	.+2      	; 0x2354 <TIMER_voidTimer1Enable+0x46>
    2352:	c7 c0       	rjmp	.+398    	; 0x24e2 <TIMER_voidTimer1Enable+0x1d4>
    2354:	28 85       	ldd	r18, Y+8	; 0x08
    2356:	39 85       	ldd	r19, Y+9	; 0x09
    2358:	24 30       	cpi	r18, 0x04	; 4
    235a:	31 05       	cpc	r19, r1
    235c:	8c f4       	brge	.+34     	; 0x2380 <TIMER_voidTimer1Enable+0x72>
    235e:	88 85       	ldd	r24, Y+8	; 0x08
    2360:	99 85       	ldd	r25, Y+9	; 0x09
    2362:	81 30       	cpi	r24, 0x01	; 1
    2364:	91 05       	cpc	r25, r1
    2366:	09 f4       	brne	.+2      	; 0x236a <TIMER_voidTimer1Enable+0x5c>
    2368:	7c c0       	rjmp	.+248    	; 0x2462 <TIMER_voidTimer1Enable+0x154>
    236a:	28 85       	ldd	r18, Y+8	; 0x08
    236c:	39 85       	ldd	r19, Y+9	; 0x09
    236e:	22 30       	cpi	r18, 0x02	; 2
    2370:	31 05       	cpc	r19, r1
    2372:	0c f0       	brlt	.+2      	; 0x2376 <TIMER_voidTimer1Enable+0x68>
    2374:	96 c0       	rjmp	.+300    	; 0x24a2 <TIMER_voidTimer1Enable+0x194>
    2376:	88 85       	ldd	r24, Y+8	; 0x08
    2378:	99 85       	ldd	r25, Y+9	; 0x09
    237a:	00 97       	sbiw	r24, 0x00	; 0
    237c:	c9 f1       	breq	.+114    	; 0x23f0 <TIMER_voidTimer1Enable+0xe2>
    237e:	50 c2       	rjmp	.+1184   	; 0x2820 <TIMER_voidTimer1Enable+0x512>
    2380:	28 85       	ldd	r18, Y+8	; 0x08
    2382:	39 85       	ldd	r19, Y+9	; 0x09
    2384:	25 30       	cpi	r18, 0x05	; 5
    2386:	31 05       	cpc	r19, r1
    2388:	09 f4       	brne	.+2      	; 0x238c <TIMER_voidTimer1Enable+0x7e>
    238a:	04 c1       	rjmp	.+520    	; 0x2594 <TIMER_voidTimer1Enable+0x286>
    238c:	88 85       	ldd	r24, Y+8	; 0x08
    238e:	99 85       	ldd	r25, Y+9	; 0x09
    2390:	86 30       	cpi	r24, 0x06	; 6
    2392:	91 05       	cpc	r25, r1
    2394:	0c f0       	brlt	.+2      	; 0x2398 <TIMER_voidTimer1Enable+0x8a>
    2396:	1e c1       	rjmp	.+572    	; 0x25d4 <TIMER_voidTimer1Enable+0x2c6>
    2398:	c4 c0       	rjmp	.+392    	; 0x2522 <TIMER_voidTimer1Enable+0x214>
    239a:	28 85       	ldd	r18, Y+8	; 0x08
    239c:	39 85       	ldd	r19, Y+9	; 0x09
    239e:	2b 30       	cpi	r18, 0x0B	; 11
    23a0:	31 05       	cpc	r19, r1
    23a2:	09 f4       	brne	.+2      	; 0x23a6 <TIMER_voidTimer1Enable+0x98>
    23a4:	ae c1       	rjmp	.+860    	; 0x2702 <TIMER_voidTimer1Enable+0x3f4>
    23a6:	88 85       	ldd	r24, Y+8	; 0x08
    23a8:	99 85       	ldd	r25, Y+9	; 0x09
    23aa:	8c 30       	cpi	r24, 0x0C	; 12
    23ac:	91 05       	cpc	r25, r1
    23ae:	6c f4       	brge	.+26     	; 0x23ca <TIMER_voidTimer1Enable+0xbc>
    23b0:	28 85       	ldd	r18, Y+8	; 0x08
    23b2:	39 85       	ldd	r19, Y+9	; 0x09
    23b4:	29 30       	cpi	r18, 0x09	; 9
    23b6:	31 05       	cpc	r19, r1
    23b8:	09 f4       	brne	.+2      	; 0x23bc <TIMER_voidTimer1Enable+0xae>
    23ba:	69 c1       	rjmp	.+722    	; 0x268e <TIMER_voidTimer1Enable+0x380>
    23bc:	88 85       	ldd	r24, Y+8	; 0x08
    23be:	99 85       	ldd	r25, Y+9	; 0x09
    23c0:	8a 30       	cpi	r24, 0x0A	; 10
    23c2:	91 05       	cpc	r25, r1
    23c4:	0c f0       	brlt	.+2      	; 0x23c8 <TIMER_voidTimer1Enable+0xba>
    23c6:	80 c1       	rjmp	.+768    	; 0x26c8 <TIMER_voidTimer1Enable+0x3ba>
    23c8:	45 c1       	rjmp	.+650    	; 0x2654 <TIMER_voidTimer1Enable+0x346>
    23ca:	28 85       	ldd	r18, Y+8	; 0x08
    23cc:	39 85       	ldd	r19, Y+9	; 0x09
    23ce:	2e 30       	cpi	r18, 0x0E	; 14
    23d0:	31 05       	cpc	r19, r1
    23d2:	09 f4       	brne	.+2      	; 0x23d6 <TIMER_voidTimer1Enable+0xc8>
    23d4:	ec c1       	rjmp	.+984    	; 0x27ae <TIMER_voidTimer1Enable+0x4a0>
    23d6:	88 85       	ldd	r24, Y+8	; 0x08
    23d8:	99 85       	ldd	r25, Y+9	; 0x09
    23da:	8f 30       	cpi	r24, 0x0F	; 15
    23dc:	91 05       	cpc	r25, r1
    23de:	09 f4       	brne	.+2      	; 0x23e2 <TIMER_voidTimer1Enable+0xd4>
    23e0:	03 c2       	rjmp	.+1030   	; 0x27e8 <TIMER_voidTimer1Enable+0x4da>
    23e2:	28 85       	ldd	r18, Y+8	; 0x08
    23e4:	39 85       	ldd	r19, Y+9	; 0x09
    23e6:	2c 30       	cpi	r18, 0x0C	; 12
    23e8:	31 05       	cpc	r19, r1
    23ea:	09 f4       	brne	.+2      	; 0x23ee <TIMER_voidTimer1Enable+0xe0>
    23ec:	a7 c1       	rjmp	.+846    	; 0x273c <TIMER_voidTimer1Enable+0x42e>
    23ee:	18 c2       	rjmp	.+1072   	; 0x2820 <TIMER_voidTimer1Enable+0x512>
{
   case  TIMER1_MODE_NORMAL :
	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    23f0:	af e4       	ldi	r26, 0x4F	; 79
    23f2:	b0 e0       	ldi	r27, 0x00	; 0
    23f4:	ef e4       	ldi	r30, 0x4F	; 79
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	80 81       	ld	r24, Z
    23fa:	8e 7f       	andi	r24, 0xFE	; 254
    23fc:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1A,TCCR1A_WGM11);
    23fe:	af e4       	ldi	r26, 0x4F	; 79
    2400:	b0 e0       	ldi	r27, 0x00	; 0
    2402:	ef e4       	ldi	r30, 0x4F	; 79
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	80 81       	ld	r24, Z
    2408:	8d 7f       	andi	r24, 0xFD	; 253
    240a:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM12);
    240c:	ae e4       	ldi	r26, 0x4E	; 78
    240e:	b0 e0       	ldi	r27, 0x00	; 0
    2410:	ee e4       	ldi	r30, 0x4E	; 78
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	87 7f       	andi	r24, 0xF7	; 247
    2418:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM13);
    241a:	ae e4       	ldi	r26, 0x4E	; 78
    241c:	b0 e0       	ldi	r27, 0x00	; 0
    241e:	ee e4       	ldi	r30, 0x4E	; 78
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	8f 7e       	andi	r24, 0xEF	; 239
    2426:	8c 93       	st	X, r24

		SET_BIT(TIMSK,TIMSK_TOIE1);
    2428:	a9 e5       	ldi	r26, 0x59	; 89
    242a:	b0 e0       	ldi	r27, 0x00	; 0
    242c:	e9 e5       	ldi	r30, 0x59	; 89
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	80 81       	ld	r24, Z
    2432:	84 60       	ori	r24, 0x04	; 4
    2434:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,TIMSK_OCIE1B);
    2436:	a9 e5       	ldi	r26, 0x59	; 89
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	e9 e5       	ldi	r30, 0x59	; 89
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	80 81       	ld	r24, Z
    2440:	87 7f       	andi	r24, 0xF7	; 247
    2442:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,TIMSK_OCIE1A);
    2444:	a9 e5       	ldi	r26, 0x59	; 89
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	e9 e5       	ldi	r30, 0x59	; 89
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	8f 7e       	andi	r24, 0xEF	; 239
    2450:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,TIMSK_TICIE1);
    2452:	a9 e5       	ldi	r26, 0x59	; 89
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	e9 e5       	ldi	r30, 0x59	; 89
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	8f 7d       	andi	r24, 0xDF	; 223
    245e:	8c 93       	st	X, r24
    2460:	df c1       	rjmp	.+958    	; 0x2820 <TIMER_voidTimer1Enable+0x512>

		//TIMER_u16_TCNT1=TIMER_f32Timer1PreloodValue;
   break;
   case TIMER1_MODE_PWM_PHASE_CORRECT_8 :
	   SET_BIT(TCCR1A,TCCR1A_WGM10);
    2462:	af e4       	ldi	r26, 0x4F	; 79
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	ef e4       	ldi	r30, 0x4F	; 79
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	81 60       	ori	r24, 0x01	; 1
    246e:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1A,TCCR1A_WGM11);
    2470:	af e4       	ldi	r26, 0x4F	; 79
    2472:	b0 e0       	ldi	r27, 0x00	; 0
    2474:	ef e4       	ldi	r30, 0x4F	; 79
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 81       	ld	r24, Z
    247a:	8d 7f       	andi	r24, 0xFD	; 253
    247c:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM12);
    247e:	ae e4       	ldi	r26, 0x4E	; 78
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	ee e4       	ldi	r30, 0x4E	; 78
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z
    2488:	87 7f       	andi	r24, 0xF7	; 247
    248a:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM13);
    248c:	ae e4       	ldi	r26, 0x4E	; 78
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	ee e4       	ldi	r30, 0x4E	; 78
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	8f 7e       	andi	r24, 0xEF	; 239
    2498:	8c 93       	st	X, r24
	   TIMER1_u8MODEPWM=TIMER1_MODE_PWM_PHASE_CORRECT_8;
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	80 93 83 00 	sts	0x0083, r24
    24a0:	bf c1       	rjmp	.+894    	; 0x2820 <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_PWM_PHASE_CORRECT_9 :
	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    24a2:	af e4       	ldi	r26, 0x4F	; 79
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	ef e4       	ldi	r30, 0x4F	; 79
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	80 81       	ld	r24, Z
    24ac:	8e 7f       	andi	r24, 0xFE	; 254
    24ae:	8c 93       	st	X, r24
	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    24b0:	af e4       	ldi	r26, 0x4F	; 79
    24b2:	b0 e0       	ldi	r27, 0x00	; 0
    24b4:	ef e4       	ldi	r30, 0x4F	; 79
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	80 81       	ld	r24, Z
    24ba:	82 60       	ori	r24, 0x02	; 2
    24bc:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM12);
    24be:	ae e4       	ldi	r26, 0x4E	; 78
    24c0:	b0 e0       	ldi	r27, 0x00	; 0
    24c2:	ee e4       	ldi	r30, 0x4E	; 78
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	80 81       	ld	r24, Z
    24c8:	87 7f       	andi	r24, 0xF7	; 247
    24ca:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM13);
    24cc:	ae e4       	ldi	r26, 0x4E	; 78
    24ce:	b0 e0       	ldi	r27, 0x00	; 0
    24d0:	ee e4       	ldi	r30, 0x4E	; 78
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	80 81       	ld	r24, Z
    24d6:	8f 7e       	andi	r24, 0xEF	; 239
    24d8:	8c 93       	st	X, r24
	   TIMER1_u8MODEPWM=TIMER1_MODE_PWM_PHASE_CORRECT_9;
    24da:	82 e0       	ldi	r24, 0x02	; 2
    24dc:	80 93 83 00 	sts	0x0083, r24
    24e0:	9f c1       	rjmp	.+830    	; 0x2820 <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_PWM_PHASE_CORRECT_10 :
	   SET_BIT(TCCR1A,TCCR1A_WGM10);
    24e2:	af e4       	ldi	r26, 0x4F	; 79
    24e4:	b0 e0       	ldi	r27, 0x00	; 0
    24e6:	ef e4       	ldi	r30, 0x4F	; 79
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	80 81       	ld	r24, Z
    24ec:	81 60       	ori	r24, 0x01	; 1
    24ee:	8c 93       	st	X, r24
	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    24f0:	af e4       	ldi	r26, 0x4F	; 79
    24f2:	b0 e0       	ldi	r27, 0x00	; 0
    24f4:	ef e4       	ldi	r30, 0x4F	; 79
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	80 81       	ld	r24, Z
    24fa:	82 60       	ori	r24, 0x02	; 2
    24fc:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM12);
    24fe:	ae e4       	ldi	r26, 0x4E	; 78
    2500:	b0 e0       	ldi	r27, 0x00	; 0
    2502:	ee e4       	ldi	r30, 0x4E	; 78
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
    2508:	87 7f       	andi	r24, 0xF7	; 247
    250a:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM13);
    250c:	ae e4       	ldi	r26, 0x4E	; 78
    250e:	b0 e0       	ldi	r27, 0x00	; 0
    2510:	ee e4       	ldi	r30, 0x4E	; 78
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	80 81       	ld	r24, Z
    2516:	8f 7e       	andi	r24, 0xEF	; 239
    2518:	8c 93       	st	X, r24
	   TIMER1_u8MODEPWM=TIMER1_MODE_PWM_PHASE_CORRECT_10;
    251a:	83 e0       	ldi	r24, 0x03	; 3
    251c:	80 93 83 00 	sts	0x0083, r24
    2520:	7f c1       	rjmp	.+766    	; 0x2820 <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_CTC_OCR1A :
	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2522:	af e4       	ldi	r26, 0x4F	; 79
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	ef e4       	ldi	r30, 0x4F	; 79
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	8e 7f       	andi	r24, 0xFE	; 254
    252e:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1A,TCCR1A_WGM11);
    2530:	af e4       	ldi	r26, 0x4F	; 79
    2532:	b0 e0       	ldi	r27, 0x00	; 0
    2534:	ef e4       	ldi	r30, 0x4F	; 79
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 81       	ld	r24, Z
    253a:	8d 7f       	andi	r24, 0xFD	; 253
    253c:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM12);
    253e:	ae e4       	ldi	r26, 0x4E	; 78
    2540:	b0 e0       	ldi	r27, 0x00	; 0
    2542:	ee e4       	ldi	r30, 0x4E	; 78
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	88 60       	ori	r24, 0x08	; 8
    254a:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM13);
    254c:	ae e4       	ldi	r26, 0x4E	; 78
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	ee e4       	ldi	r30, 0x4E	; 78
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	80 81       	ld	r24, Z
    2556:	8f 7e       	andi	r24, 0xEF	; 239
    2558:	8c 93       	st	X, r24

	   CLR_BIT(TIMSK,TIMSK_TOIE1);
    255a:	a9 e5       	ldi	r26, 0x59	; 89
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	e9 e5       	ldi	r30, 0x59	; 89
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
    2564:	8b 7f       	andi	r24, 0xFB	; 251
    2566:	8c 93       	st	X, r24
	   CLR_BIT(TIMSK,TIMSK_OCIE1B);
    2568:	a9 e5       	ldi	r26, 0x59	; 89
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	e9 e5       	ldi	r30, 0x59	; 89
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	87 7f       	andi	r24, 0xF7	; 247
    2574:	8c 93       	st	X, r24
	   SET_BIT(TIMSK,TIMSK_OCIE1A);
    2576:	a9 e5       	ldi	r26, 0x59	; 89
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	e9 e5       	ldi	r30, 0x59	; 89
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	80 61       	ori	r24, 0x10	; 16
    2582:	8c 93       	st	X, r24
	   CLR_BIT(TIMSK,TIMSK_TICIE1);
    2584:	a9 e5       	ldi	r26, 0x59	; 89
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	e9 e5       	ldi	r30, 0x59	; 89
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	80 81       	ld	r24, Z
    258e:	8f 7d       	andi	r24, 0xDF	; 223
    2590:	8c 93       	st	X, r24
    2592:	46 c1       	rjmp	.+652    	; 0x2820 <TIMER_voidTimer1Enable+0x512>

   break;
   case TIMER1_MODE_FAST_PWM_8 :
	   SET_BIT(TCCR1A,TCCR1A_WGM10);
    2594:	af e4       	ldi	r26, 0x4F	; 79
    2596:	b0 e0       	ldi	r27, 0x00	; 0
    2598:	ef e4       	ldi	r30, 0x4F	; 79
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	80 81       	ld	r24, Z
    259e:	81 60       	ori	r24, 0x01	; 1
    25a0:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1A,TCCR1A_WGM11);
    25a2:	af e4       	ldi	r26, 0x4F	; 79
    25a4:	b0 e0       	ldi	r27, 0x00	; 0
    25a6:	ef e4       	ldi	r30, 0x4F	; 79
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	80 81       	ld	r24, Z
    25ac:	8d 7f       	andi	r24, 0xFD	; 253
    25ae:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM12);
    25b0:	ae e4       	ldi	r26, 0x4E	; 78
    25b2:	b0 e0       	ldi	r27, 0x00	; 0
    25b4:	ee e4       	ldi	r30, 0x4E	; 78
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	80 81       	ld	r24, Z
    25ba:	88 60       	ori	r24, 0x08	; 8
    25bc:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM13);
    25be:	ae e4       	ldi	r26, 0x4E	; 78
    25c0:	b0 e0       	ldi	r27, 0x00	; 0
    25c2:	ee e4       	ldi	r30, 0x4E	; 78
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	80 81       	ld	r24, Z
    25c8:	8f 7e       	andi	r24, 0xEF	; 239
    25ca:	8c 93       	st	X, r24
	   TIMER1_u8MODEPWM=TIMER1_MODE_FAST_PWM_8;
    25cc:	85 e0       	ldi	r24, 0x05	; 5
    25ce:	80 93 83 00 	sts	0x0083, r24
    25d2:	26 c1       	rjmp	.+588    	; 0x2820 <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_FAST_PWM_9 :
	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    25d4:	af e4       	ldi	r26, 0x4F	; 79
    25d6:	b0 e0       	ldi	r27, 0x00	; 0
    25d8:	ef e4       	ldi	r30, 0x4F	; 79
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	80 81       	ld	r24, Z
    25de:	8e 7f       	andi	r24, 0xFE	; 254
    25e0:	8c 93       	st	X, r24
	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    25e2:	af e4       	ldi	r26, 0x4F	; 79
    25e4:	b0 e0       	ldi	r27, 0x00	; 0
    25e6:	ef e4       	ldi	r30, 0x4F	; 79
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
    25ec:	82 60       	ori	r24, 0x02	; 2
    25ee:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM12);
    25f0:	ae e4       	ldi	r26, 0x4E	; 78
    25f2:	b0 e0       	ldi	r27, 0x00	; 0
    25f4:	ee e4       	ldi	r30, 0x4E	; 78
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	80 81       	ld	r24, Z
    25fa:	88 60       	ori	r24, 0x08	; 8
    25fc:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM13);
    25fe:	ae e4       	ldi	r26, 0x4E	; 78
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	ee e4       	ldi	r30, 0x4E	; 78
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	80 81       	ld	r24, Z
    2608:	8f 7e       	andi	r24, 0xEF	; 239
    260a:	8c 93       	st	X, r24
	   TIMER1_u8MODEPWM=TIMER1_MODE_FAST_PWM_9;
    260c:	86 e0       	ldi	r24, 0x06	; 6
    260e:	80 93 83 00 	sts	0x0083, r24
    2612:	06 c1       	rjmp	.+524    	; 0x2820 <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_FAST_PWM_10 :
	   SET_BIT(TCCR1A,TCCR1A_WGM10);
    2614:	af e4       	ldi	r26, 0x4F	; 79
    2616:	b0 e0       	ldi	r27, 0x00	; 0
    2618:	ef e4       	ldi	r30, 0x4F	; 79
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
    261e:	81 60       	ori	r24, 0x01	; 1
    2620:	8c 93       	st	X, r24
	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    2622:	af e4       	ldi	r26, 0x4F	; 79
    2624:	b0 e0       	ldi	r27, 0x00	; 0
    2626:	ef e4       	ldi	r30, 0x4F	; 79
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	80 81       	ld	r24, Z
    262c:	82 60       	ori	r24, 0x02	; 2
    262e:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM12);
    2630:	ae e4       	ldi	r26, 0x4E	; 78
    2632:	b0 e0       	ldi	r27, 0x00	; 0
    2634:	ee e4       	ldi	r30, 0x4E	; 78
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	80 81       	ld	r24, Z
    263a:	88 60       	ori	r24, 0x08	; 8
    263c:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM13);
    263e:	ae e4       	ldi	r26, 0x4E	; 78
    2640:	b0 e0       	ldi	r27, 0x00	; 0
    2642:	ee e4       	ldi	r30, 0x4E	; 78
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	80 81       	ld	r24, Z
    2648:	8f 7e       	andi	r24, 0xEF	; 239
    264a:	8c 93       	st	X, r24
	   TIMER1_u8MODEPWM=TIMER1_MODE_FAST_PWM_10;
    264c:	87 e0       	ldi	r24, 0x07	; 7
    264e:	80 93 83 00 	sts	0x0083, r24
    2652:	e6 c0       	rjmp	.+460    	; 0x2820 <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_PWM_PHASE_AND_FRQUENCY_CORRECT_ICR1 :
	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2654:	af e4       	ldi	r26, 0x4F	; 79
    2656:	b0 e0       	ldi	r27, 0x00	; 0
    2658:	ef e4       	ldi	r30, 0x4F	; 79
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	80 81       	ld	r24, Z
    265e:	8e 7f       	andi	r24, 0xFE	; 254
    2660:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1A,TCCR1A_WGM11);
    2662:	af e4       	ldi	r26, 0x4F	; 79
    2664:	b0 e0       	ldi	r27, 0x00	; 0
    2666:	ef e4       	ldi	r30, 0x4F	; 79
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	80 81       	ld	r24, Z
    266c:	8d 7f       	andi	r24, 0xFD	; 253
    266e:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM12);
    2670:	ae e4       	ldi	r26, 0x4E	; 78
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	ee e4       	ldi	r30, 0x4E	; 78
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	80 81       	ld	r24, Z
    267a:	87 7f       	andi	r24, 0xF7	; 247
    267c:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM13);
    267e:	ae e4       	ldi	r26, 0x4E	; 78
    2680:	b0 e0       	ldi	r27, 0x00	; 0
    2682:	ee e4       	ldi	r30, 0x4E	; 78
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	80 81       	ld	r24, Z
    2688:	80 61       	ori	r24, 0x10	; 16
    268a:	8c 93       	st	X, r24
    268c:	c9 c0       	rjmp	.+402    	; 0x2820 <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_PWM_PHASE_AND_FRQUENCY_CORRECT_OCR1A :
	   SET_BIT(TCCR1A,TCCR1A_WGM10);
    268e:	af e4       	ldi	r26, 0x4F	; 79
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	ef e4       	ldi	r30, 0x4F	; 79
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	81 60       	ori	r24, 0x01	; 1
    269a:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1A,TCCR1A_WGM11);
    269c:	af e4       	ldi	r26, 0x4F	; 79
    269e:	b0 e0       	ldi	r27, 0x00	; 0
    26a0:	ef e4       	ldi	r30, 0x4F	; 79
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	80 81       	ld	r24, Z
    26a6:	8d 7f       	andi	r24, 0xFD	; 253
    26a8:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM12);
    26aa:	ae e4       	ldi	r26, 0x4E	; 78
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	ee e4       	ldi	r30, 0x4E	; 78
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	80 81       	ld	r24, Z
    26b4:	87 7f       	andi	r24, 0xF7	; 247
    26b6:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM13);
    26b8:	ae e4       	ldi	r26, 0x4E	; 78
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	ee e4       	ldi	r30, 0x4E	; 78
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	80 61       	ori	r24, 0x10	; 16
    26c4:	8c 93       	st	X, r24
    26c6:	ac c0       	rjmp	.+344    	; 0x2820 <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_PWM_PHASE_CORRECT_ICR1 :
	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    26c8:	af e4       	ldi	r26, 0x4F	; 79
    26ca:	b0 e0       	ldi	r27, 0x00	; 0
    26cc:	ef e4       	ldi	r30, 0x4F	; 79
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	80 81       	ld	r24, Z
    26d2:	8e 7f       	andi	r24, 0xFE	; 254
    26d4:	8c 93       	st	X, r24
	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    26d6:	af e4       	ldi	r26, 0x4F	; 79
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	ef e4       	ldi	r30, 0x4F	; 79
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	80 81       	ld	r24, Z
    26e0:	82 60       	ori	r24, 0x02	; 2
    26e2:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM12);
    26e4:	ae e4       	ldi	r26, 0x4E	; 78
    26e6:	b0 e0       	ldi	r27, 0x00	; 0
    26e8:	ee e4       	ldi	r30, 0x4E	; 78
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	80 81       	ld	r24, Z
    26ee:	87 7f       	andi	r24, 0xF7	; 247
    26f0:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM13);
    26f2:	ae e4       	ldi	r26, 0x4E	; 78
    26f4:	b0 e0       	ldi	r27, 0x00	; 0
    26f6:	ee e4       	ldi	r30, 0x4E	; 78
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	80 81       	ld	r24, Z
    26fc:	80 61       	ori	r24, 0x10	; 16
    26fe:	8c 93       	st	X, r24
    2700:	8f c0       	rjmp	.+286    	; 0x2820 <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_PWM_PHASE_CORRECT_OCR1A :
	   SET_BIT(TCCR1A,TCCR1A_WGM10);
    2702:	af e4       	ldi	r26, 0x4F	; 79
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	ef e4       	ldi	r30, 0x4F	; 79
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	80 81       	ld	r24, Z
    270c:	81 60       	ori	r24, 0x01	; 1
    270e:	8c 93       	st	X, r24
	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    2710:	af e4       	ldi	r26, 0x4F	; 79
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	ef e4       	ldi	r30, 0x4F	; 79
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	82 60       	ori	r24, 0x02	; 2
    271c:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM12);
    271e:	ae e4       	ldi	r26, 0x4E	; 78
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	ee e4       	ldi	r30, 0x4E	; 78
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	87 7f       	andi	r24, 0xF7	; 247
    272a:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM13);
    272c:	ae e4       	ldi	r26, 0x4E	; 78
    272e:	b0 e0       	ldi	r27, 0x00	; 0
    2730:	ee e4       	ldi	r30, 0x4E	; 78
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	80 81       	ld	r24, Z
    2736:	80 61       	ori	r24, 0x10	; 16
    2738:	8c 93       	st	X, r24
    273a:	72 c0       	rjmp	.+228    	; 0x2820 <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_CTC_ICR1 :
	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    273c:	af e4       	ldi	r26, 0x4F	; 79
    273e:	b0 e0       	ldi	r27, 0x00	; 0
    2740:	ef e4       	ldi	r30, 0x4F	; 79
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	80 81       	ld	r24, Z
    2746:	8e 7f       	andi	r24, 0xFE	; 254
    2748:	8c 93       	st	X, r24
	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    274a:	af e4       	ldi	r26, 0x4F	; 79
    274c:	b0 e0       	ldi	r27, 0x00	; 0
    274e:	ef e4       	ldi	r30, 0x4F	; 79
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	80 81       	ld	r24, Z
    2754:	82 60       	ori	r24, 0x02	; 2
    2756:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM12);
    2758:	ae e4       	ldi	r26, 0x4E	; 78
    275a:	b0 e0       	ldi	r27, 0x00	; 0
    275c:	ee e4       	ldi	r30, 0x4E	; 78
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	80 81       	ld	r24, Z
    2762:	88 60       	ori	r24, 0x08	; 8
    2764:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2766:	ae e4       	ldi	r26, 0x4E	; 78
    2768:	b0 e0       	ldi	r27, 0x00	; 0
    276a:	ee e4       	ldi	r30, 0x4E	; 78
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	80 81       	ld	r24, Z
    2770:	8f 7e       	andi	r24, 0xEF	; 239
    2772:	8c 93       	st	X, r24

	   CLR_BIT(TIMSK,TIMSK_TOIE1);
    2774:	a9 e5       	ldi	r26, 0x59	; 89
    2776:	b0 e0       	ldi	r27, 0x00	; 0
    2778:	e9 e5       	ldi	r30, 0x59	; 89
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	80 81       	ld	r24, Z
    277e:	8b 7f       	andi	r24, 0xFB	; 251
    2780:	8c 93       	st	X, r24
	   SET_BIT(TIMSK,TIMSK_OCIE1B);
    2782:	a9 e5       	ldi	r26, 0x59	; 89
    2784:	b0 e0       	ldi	r27, 0x00	; 0
    2786:	e9 e5       	ldi	r30, 0x59	; 89
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	80 81       	ld	r24, Z
    278c:	88 60       	ori	r24, 0x08	; 8
    278e:	8c 93       	st	X, r24
	   SET_BIT(TIMSK,TIMSK_OCIE1A);
    2790:	a9 e5       	ldi	r26, 0x59	; 89
    2792:	b0 e0       	ldi	r27, 0x00	; 0
    2794:	e9 e5       	ldi	r30, 0x59	; 89
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	80 81       	ld	r24, Z
    279a:	80 61       	ori	r24, 0x10	; 16
    279c:	8c 93       	st	X, r24
	   CLR_BIT(TIMSK,TIMSK_TICIE1);
    279e:	a9 e5       	ldi	r26, 0x59	; 89
    27a0:	b0 e0       	ldi	r27, 0x00	; 0
    27a2:	e9 e5       	ldi	r30, 0x59	; 89
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	80 81       	ld	r24, Z
    27a8:	8f 7d       	andi	r24, 0xDF	; 223
    27aa:	8c 93       	st	X, r24
    27ac:	39 c0       	rjmp	.+114    	; 0x2820 <TIMER_voidTimer1Enable+0x512>

   break;
   case  TIMER1_MODE_FAST_PWM_ICR1 :
	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    27ae:	af e4       	ldi	r26, 0x4F	; 79
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	ef e4       	ldi	r30, 0x4F	; 79
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	8e 7f       	andi	r24, 0xFE	; 254
    27ba:	8c 93       	st	X, r24
	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    27bc:	af e4       	ldi	r26, 0x4F	; 79
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	ef e4       	ldi	r30, 0x4F	; 79
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	82 60       	ori	r24, 0x02	; 2
    27c8:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM12);
    27ca:	ae e4       	ldi	r26, 0x4E	; 78
    27cc:	b0 e0       	ldi	r27, 0x00	; 0
    27ce:	ee e4       	ldi	r30, 0x4E	; 78
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	80 81       	ld	r24, Z
    27d4:	88 60       	ori	r24, 0x08	; 8
    27d6:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM13);
    27d8:	ae e4       	ldi	r26, 0x4E	; 78
    27da:	b0 e0       	ldi	r27, 0x00	; 0
    27dc:	ee e4       	ldi	r30, 0x4E	; 78
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	80 81       	ld	r24, Z
    27e2:	80 61       	ori	r24, 0x10	; 16
    27e4:	8c 93       	st	X, r24
    27e6:	1c c0       	rjmp	.+56     	; 0x2820 <TIMER_voidTimer1Enable+0x512>
   break;
   case  TIMER1_MODE_FAST_PWM_OCR1A :
	   SET_BIT(TCCR1A,TCCR1A_WGM10);
    27e8:	af e4       	ldi	r26, 0x4F	; 79
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	ef e4       	ldi	r30, 0x4F	; 79
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	80 81       	ld	r24, Z
    27f2:	81 60       	ori	r24, 0x01	; 1
    27f4:	8c 93       	st	X, r24
	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    27f6:	af e4       	ldi	r26, 0x4F	; 79
    27f8:	b0 e0       	ldi	r27, 0x00	; 0
    27fa:	ef e4       	ldi	r30, 0x4F	; 79
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	80 81       	ld	r24, Z
    2800:	82 60       	ori	r24, 0x02	; 2
    2802:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM12);
    2804:	ae e4       	ldi	r26, 0x4E	; 78
    2806:	b0 e0       	ldi	r27, 0x00	; 0
    2808:	ee e4       	ldi	r30, 0x4E	; 78
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	80 81       	ld	r24, Z
    280e:	88 60       	ori	r24, 0x08	; 8
    2810:	8c 93       	st	X, r24
	   SET_BIT(TCCR1B,TCCR1B_WGM13);
    2812:	ae e4       	ldi	r26, 0x4E	; 78
    2814:	b0 e0       	ldi	r27, 0x00	; 0
    2816:	ee e4       	ldi	r30, 0x4E	; 78
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	80 81       	ld	r24, Z
    281c:	80 61       	ori	r24, 0x10	; 16
    281e:	8c 93       	st	X, r24
   break;
}
/***********************************************************************************************************/
switch(Copy_u8Timer1ModeChannelA)
    2820:	8a 81       	ldd	r24, Y+2	; 0x02
    2822:	28 2f       	mov	r18, r24
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	3f 83       	std	Y+7, r19	; 0x07
    2828:	2e 83       	std	Y+6, r18	; 0x06
    282a:	8e 81       	ldd	r24, Y+6	; 0x06
    282c:	9f 81       	ldd	r25, Y+7	; 0x07
    282e:	81 30       	cpi	r24, 0x01	; 1
    2830:	91 05       	cpc	r25, r1
    2832:	21 f1       	breq	.+72     	; 0x287c <TIMER_voidTimer1Enable+0x56e>
    2834:	2e 81       	ldd	r18, Y+6	; 0x06
    2836:	3f 81       	ldd	r19, Y+7	; 0x07
    2838:	22 30       	cpi	r18, 0x02	; 2
    283a:	31 05       	cpc	r19, r1
    283c:	2c f4       	brge	.+10     	; 0x2848 <TIMER_voidTimer1Enable+0x53a>
    283e:	8e 81       	ldd	r24, Y+6	; 0x06
    2840:	9f 81       	ldd	r25, Y+7	; 0x07
    2842:	00 97       	sbiw	r24, 0x00	; 0
    2844:	61 f0       	breq	.+24     	; 0x285e <TIMER_voidTimer1Enable+0x550>
    2846:	46 c0       	rjmp	.+140    	; 0x28d4 <TIMER_voidTimer1Enable+0x5c6>
    2848:	2e 81       	ldd	r18, Y+6	; 0x06
    284a:	3f 81       	ldd	r19, Y+7	; 0x07
    284c:	22 30       	cpi	r18, 0x02	; 2
    284e:	31 05       	cpc	r19, r1
    2850:	21 f1       	breq	.+72     	; 0x289a <TIMER_voidTimer1Enable+0x58c>
    2852:	8e 81       	ldd	r24, Y+6	; 0x06
    2854:	9f 81       	ldd	r25, Y+7	; 0x07
    2856:	83 30       	cpi	r24, 0x03	; 3
    2858:	91 05       	cpc	r25, r1
    285a:	71 f1       	breq	.+92     	; 0x28b8 <TIMER_voidTimer1Enable+0x5aa>
    285c:	3b c0       	rjmp	.+118    	; 0x28d4 <TIMER_voidTimer1Enable+0x5c6>
{
    case   TIMER1_MODE_CHANNEL_A_NORMAL :
       CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    285e:	af e4       	ldi	r26, 0x4F	; 79
    2860:	b0 e0       	ldi	r27, 0x00	; 0
    2862:	ef e4       	ldi	r30, 0x4F	; 79
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	80 81       	ld	r24, Z
    2868:	8f 7b       	andi	r24, 0xBF	; 191
    286a:	8c 93       	st	X, r24
       CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    286c:	af e4       	ldi	r26, 0x4F	; 79
    286e:	b0 e0       	ldi	r27, 0x00	; 0
    2870:	ef e4       	ldi	r30, 0x4F	; 79
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	80 81       	ld	r24, Z
    2876:	8f 77       	andi	r24, 0x7F	; 127
    2878:	8c 93       	st	X, r24
    287a:	2c c0       	rjmp	.+88     	; 0x28d4 <TIMER_voidTimer1Enable+0x5c6>
    break;
    case   TIMER1_MODE_CHANNEL_A_TOGGLE :
       SET_BIT(TCCR1A,TCCR1A_COM1A0);
    287c:	af e4       	ldi	r26, 0x4F	; 79
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	ef e4       	ldi	r30, 0x4F	; 79
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	80 64       	ori	r24, 0x40	; 64
    2888:	8c 93       	st	X, r24
       CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    288a:	af e4       	ldi	r26, 0x4F	; 79
    288c:	b0 e0       	ldi	r27, 0x00	; 0
    288e:	ef e4       	ldi	r30, 0x4F	; 79
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	80 81       	ld	r24, Z
    2894:	8f 77       	andi	r24, 0x7F	; 127
    2896:	8c 93       	st	X, r24
    2898:	1d c0       	rjmp	.+58     	; 0x28d4 <TIMER_voidTimer1Enable+0x5c6>
    break;
    case   TIMER1_MODE_CHANNEL_A_CLEAR_OC1A :
       CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    289a:	af e4       	ldi	r26, 0x4F	; 79
    289c:	b0 e0       	ldi	r27, 0x00	; 0
    289e:	ef e4       	ldi	r30, 0x4F	; 79
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	80 81       	ld	r24, Z
    28a4:	8f 7b       	andi	r24, 0xBF	; 191
    28a6:	8c 93       	st	X, r24
       SET_BIT(TCCR1A,TCCR1A_COM1A1);
    28a8:	af e4       	ldi	r26, 0x4F	; 79
    28aa:	b0 e0       	ldi	r27, 0x00	; 0
    28ac:	ef e4       	ldi	r30, 0x4F	; 79
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	80 81       	ld	r24, Z
    28b2:	80 68       	ori	r24, 0x80	; 128
    28b4:	8c 93       	st	X, r24
    28b6:	0e c0       	rjmp	.+28     	; 0x28d4 <TIMER_voidTimer1Enable+0x5c6>
    break;
    case   TIMER1_MODE_CHANNEL_A_SET_OC1A :
       SET_BIT(TCCR1A,TCCR1A_COM1A0);
    28b8:	af e4       	ldi	r26, 0x4F	; 79
    28ba:	b0 e0       	ldi	r27, 0x00	; 0
    28bc:	ef e4       	ldi	r30, 0x4F	; 79
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	80 81       	ld	r24, Z
    28c2:	80 64       	ori	r24, 0x40	; 64
    28c4:	8c 93       	st	X, r24
       SET_BIT(TCCR1A,TCCR1A_COM1A1);
    28c6:	af e4       	ldi	r26, 0x4F	; 79
    28c8:	b0 e0       	ldi	r27, 0x00	; 0
    28ca:	ef e4       	ldi	r30, 0x4F	; 79
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	80 81       	ld	r24, Z
    28d0:	80 68       	ori	r24, 0x80	; 128
    28d2:	8c 93       	st	X, r24
    break;
}
/***********************************************************************************************************/
switch(Copy_u8Timer1ModeChannelB)
    28d4:	8b 81       	ldd	r24, Y+3	; 0x03
    28d6:	28 2f       	mov	r18, r24
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	3d 83       	std	Y+5, r19	; 0x05
    28dc:	2c 83       	std	Y+4, r18	; 0x04
    28de:	8c 81       	ldd	r24, Y+4	; 0x04
    28e0:	9d 81       	ldd	r25, Y+5	; 0x05
    28e2:	81 30       	cpi	r24, 0x01	; 1
    28e4:	91 05       	cpc	r25, r1
    28e6:	21 f1       	breq	.+72     	; 0x2930 <TIMER_voidTimer1Enable+0x622>
    28e8:	2c 81       	ldd	r18, Y+4	; 0x04
    28ea:	3d 81       	ldd	r19, Y+5	; 0x05
    28ec:	22 30       	cpi	r18, 0x02	; 2
    28ee:	31 05       	cpc	r19, r1
    28f0:	2c f4       	brge	.+10     	; 0x28fc <TIMER_voidTimer1Enable+0x5ee>
    28f2:	8c 81       	ldd	r24, Y+4	; 0x04
    28f4:	9d 81       	ldd	r25, Y+5	; 0x05
    28f6:	00 97       	sbiw	r24, 0x00	; 0
    28f8:	61 f0       	breq	.+24     	; 0x2912 <TIMER_voidTimer1Enable+0x604>
    28fa:	46 c0       	rjmp	.+140    	; 0x2988 <TIMER_voidTimer1Enable+0x67a>
    28fc:	2c 81       	ldd	r18, Y+4	; 0x04
    28fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2900:	22 30       	cpi	r18, 0x02	; 2
    2902:	31 05       	cpc	r19, r1
    2904:	21 f1       	breq	.+72     	; 0x294e <TIMER_voidTimer1Enable+0x640>
    2906:	8c 81       	ldd	r24, Y+4	; 0x04
    2908:	9d 81       	ldd	r25, Y+5	; 0x05
    290a:	83 30       	cpi	r24, 0x03	; 3
    290c:	91 05       	cpc	r25, r1
    290e:	71 f1       	breq	.+92     	; 0x296c <TIMER_voidTimer1Enable+0x65e>
    2910:	3b c0       	rjmp	.+118    	; 0x2988 <TIMER_voidTimer1Enable+0x67a>
{
    case  TIMER1_MODE_CHANNEL_B_NORMAL :
       CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    2912:	af e4       	ldi	r26, 0x4F	; 79
    2914:	b0 e0       	ldi	r27, 0x00	; 0
    2916:	ef e4       	ldi	r30, 0x4F	; 79
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	80 81       	ld	r24, Z
    291c:	8f 7e       	andi	r24, 0xEF	; 239
    291e:	8c 93       	st	X, r24
       CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    2920:	af e4       	ldi	r26, 0x4F	; 79
    2922:	b0 e0       	ldi	r27, 0x00	; 0
    2924:	ef e4       	ldi	r30, 0x4F	; 79
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	80 81       	ld	r24, Z
    292a:	8f 7d       	andi	r24, 0xDF	; 223
    292c:	8c 93       	st	X, r24
    292e:	2c c0       	rjmp	.+88     	; 0x2988 <TIMER_voidTimer1Enable+0x67a>
    break;
    case    TIMER1_MODE_CHANNEL_B_TOGGLE :
       SET_BIT(TCCR1A,TCCR1A_COM1B0);
    2930:	af e4       	ldi	r26, 0x4F	; 79
    2932:	b0 e0       	ldi	r27, 0x00	; 0
    2934:	ef e4       	ldi	r30, 0x4F	; 79
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	80 81       	ld	r24, Z
    293a:	80 61       	ori	r24, 0x10	; 16
    293c:	8c 93       	st	X, r24
       CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    293e:	af e4       	ldi	r26, 0x4F	; 79
    2940:	b0 e0       	ldi	r27, 0x00	; 0
    2942:	ef e4       	ldi	r30, 0x4F	; 79
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	80 81       	ld	r24, Z
    2948:	8f 7d       	andi	r24, 0xDF	; 223
    294a:	8c 93       	st	X, r24
    294c:	1d c0       	rjmp	.+58     	; 0x2988 <TIMER_voidTimer1Enable+0x67a>
    break;
    case    TIMER1_MODE_CHANNEL_B_CLEAR_OC1B :
       CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    294e:	af e4       	ldi	r26, 0x4F	; 79
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	ef e4       	ldi	r30, 0x4F	; 79
    2954:	f0 e0       	ldi	r31, 0x00	; 0
    2956:	80 81       	ld	r24, Z
    2958:	8f 7e       	andi	r24, 0xEF	; 239
    295a:	8c 93       	st	X, r24
       SET_BIT(TCCR1A,TCCR1A_COM1B1);
    295c:	af e4       	ldi	r26, 0x4F	; 79
    295e:	b0 e0       	ldi	r27, 0x00	; 0
    2960:	ef e4       	ldi	r30, 0x4F	; 79
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	80 81       	ld	r24, Z
    2966:	80 62       	ori	r24, 0x20	; 32
    2968:	8c 93       	st	X, r24
    296a:	0e c0       	rjmp	.+28     	; 0x2988 <TIMER_voidTimer1Enable+0x67a>
    break;
    case    TIMER1_MODE_CHANNEL_B_SET_OC1B :
       SET_BIT(TCCR1A,TCCR1A_COM1B0);
    296c:	af e4       	ldi	r26, 0x4F	; 79
    296e:	b0 e0       	ldi	r27, 0x00	; 0
    2970:	ef e4       	ldi	r30, 0x4F	; 79
    2972:	f0 e0       	ldi	r31, 0x00	; 0
    2974:	80 81       	ld	r24, Z
    2976:	80 61       	ori	r24, 0x10	; 16
    2978:	8c 93       	st	X, r24
       SET_BIT(TCCR1A,TCCR1A_COM1B1);
    297a:	af e4       	ldi	r26, 0x4F	; 79
    297c:	b0 e0       	ldi	r27, 0x00	; 0
    297e:	ef e4       	ldi	r30, 0x4F	; 79
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	80 81       	ld	r24, Z
    2984:	80 62       	ori	r24, 0x20	; 32
    2986:	8c 93       	st	X, r24
  #elif  TIMER1_CLOCK_SELECT == TIMER1_SELECT_NO_PRESCALING
      SET_BIT(TCCR1B,TCCR1B_CS10);
      CLR_BIT(TCCR1B,TCCR1B_CS11);
      CLR_BIT(TCCR1B,TCCR1B_CS12);
  #elif  TIMER1_CLOCK_SELECT == TIMER1_SELECT_CLK_DIV_8
      CLR_BIT(TCCR1B,TCCR1B_CS10);
    2988:	ae e4       	ldi	r26, 0x4E	; 78
    298a:	b0 e0       	ldi	r27, 0x00	; 0
    298c:	ee e4       	ldi	r30, 0x4E	; 78
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	80 81       	ld	r24, Z
    2992:	8e 7f       	andi	r24, 0xFE	; 254
    2994:	8c 93       	st	X, r24
      SET_BIT(TCCR1B,TCCR1B_CS11);
    2996:	ae e4       	ldi	r26, 0x4E	; 78
    2998:	b0 e0       	ldi	r27, 0x00	; 0
    299a:	ee e4       	ldi	r30, 0x4E	; 78
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	80 81       	ld	r24, Z
    29a0:	82 60       	ori	r24, 0x02	; 2
    29a2:	8c 93       	st	X, r24
      CLR_BIT(TCCR1B,TCCR1B_CS12);
    29a4:	ae e4       	ldi	r26, 0x4E	; 78
    29a6:	b0 e0       	ldi	r27, 0x00	; 0
    29a8:	ee e4       	ldi	r30, 0x4E	; 78
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	80 81       	ld	r24, Z
    29ae:	8b 7f       	andi	r24, 0xFB	; 251
    29b0:	8c 93       	st	X, r24
  #elif  TIMER1_CLOCK_SELECT == TIMER1_SELECT_EXIT_CLK_T0_RISING
      SET_BIT(TCCR1B,TCCR1B_CS10);
      SET_BIT(TCCR1B,TCCR1B_CS11);
      SET_BIT(TCCR1B,TCCR1B_CS12);
  #endif
}
    29b2:	29 96       	adiw	r28, 0x09	; 9
    29b4:	0f b6       	in	r0, 0x3f	; 63
    29b6:	f8 94       	cli
    29b8:	de bf       	out	0x3e, r29	; 62
    29ba:	0f be       	out	0x3f, r0	; 63
    29bc:	cd bf       	out	0x3d, r28	; 61
    29be:	cf 91       	pop	r28
    29c0:	df 91       	pop	r29
    29c2:	08 95       	ret

000029c4 <TIMER_voidTimer1GeneratePWMOCR1A>:
/*******************************************************************************************************/
void TIMER_voidTimer1GeneratePWMOCR1A(u8 Copy_u8Intensity)
{
    29c4:	df 93       	push	r29
    29c6:	cf 93       	push	r28
    29c8:	00 d0       	rcall	.+0      	; 0x29ca <TIMER_voidTimer1GeneratePWMOCR1A+0x6>
    29ca:	00 d0       	rcall	.+0      	; 0x29cc <TIMER_voidTimer1GeneratePWMOCR1A+0x8>
    29cc:	0f 92       	push	r0
    29ce:	cd b7       	in	r28, 0x3d	; 61
    29d0:	de b7       	in	r29, 0x3e	; 62
    29d2:	8b 83       	std	Y+3, r24	; 0x03
	u16 Copy_u16OCR1AValue;
	switch(TIMER1_u8MODEPWM)
    29d4:	80 91 83 00 	lds	r24, 0x0083
    29d8:	28 2f       	mov	r18, r24
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	3d 83       	std	Y+5, r19	; 0x05
    29de:	2c 83       	std	Y+4, r18	; 0x04
    29e0:	4c 81       	ldd	r20, Y+4	; 0x04
    29e2:	5d 81       	ldd	r21, Y+5	; 0x05
    29e4:	43 30       	cpi	r20, 0x03	; 3
    29e6:	51 05       	cpc	r21, r1
    29e8:	09 f4       	brne	.+2      	; 0x29ec <TIMER_voidTimer1GeneratePWMOCR1A+0x28>
    29ea:	5b c0       	rjmp	.+182    	; 0x2aa2 <TIMER_voidTimer1GeneratePWMOCR1A+0xde>
    29ec:	8c 81       	ldd	r24, Y+4	; 0x04
    29ee:	9d 81       	ldd	r25, Y+5	; 0x05
    29f0:	84 30       	cpi	r24, 0x04	; 4
    29f2:	91 05       	cpc	r25, r1
    29f4:	5c f4       	brge	.+22     	; 0x2a0c <TIMER_voidTimer1GeneratePWMOCR1A+0x48>
    29f6:	2c 81       	ldd	r18, Y+4	; 0x04
    29f8:	3d 81       	ldd	r19, Y+5	; 0x05
    29fa:	21 30       	cpi	r18, 0x01	; 1
    29fc:	31 05       	cpc	r19, r1
    29fe:	c9 f0       	breq	.+50     	; 0x2a32 <TIMER_voidTimer1GeneratePWMOCR1A+0x6e>
    2a00:	4c 81       	ldd	r20, Y+4	; 0x04
    2a02:	5d 81       	ldd	r21, Y+5	; 0x05
    2a04:	42 30       	cpi	r20, 0x02	; 2
    2a06:	51 05       	cpc	r21, r1
    2a08:	81 f1       	breq	.+96     	; 0x2a6a <TIMER_voidTimer1GeneratePWMOCR1A+0xa6>
    2a0a:	ab c0       	rjmp	.+342    	; 0x2b62 <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
    2a0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a0e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a10:	86 30       	cpi	r24, 0x06	; 6
    2a12:	91 05       	cpc	r25, r1
    2a14:	09 f4       	brne	.+2      	; 0x2a18 <TIMER_voidTimer1GeneratePWMOCR1A+0x54>
    2a16:	75 c0       	rjmp	.+234    	; 0x2b02 <TIMER_voidTimer1GeneratePWMOCR1A+0x13e>
    2a18:	2c 81       	ldd	r18, Y+4	; 0x04
    2a1a:	3d 81       	ldd	r19, Y+5	; 0x05
    2a1c:	27 30       	cpi	r18, 0x07	; 7
    2a1e:	31 05       	cpc	r19, r1
    2a20:	09 f4       	brne	.+2      	; 0x2a24 <TIMER_voidTimer1GeneratePWMOCR1A+0x60>
    2a22:	84 c0       	rjmp	.+264    	; 0x2b2c <TIMER_voidTimer1GeneratePWMOCR1A+0x168>
    2a24:	4c 81       	ldd	r20, Y+4	; 0x04
    2a26:	5d 81       	ldd	r21, Y+5	; 0x05
    2a28:	45 30       	cpi	r20, 0x05	; 5
    2a2a:	51 05       	cpc	r21, r1
    2a2c:	09 f4       	brne	.+2      	; 0x2a30 <TIMER_voidTimer1GeneratePWMOCR1A+0x6c>
    2a2e:	55 c0       	rjmp	.+170    	; 0x2ada <TIMER_voidTimer1GeneratePWMOCR1A+0x116>
    2a30:	98 c0       	rjmp	.+304    	; 0x2b62 <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	{
	   case TIMER1_MODE_PWM_PHASE_CORRECT_8 :
	        Copy_u16OCR1AValue=((u16)510*Copy_u8Intensity/100);
    2a32:	8b 81       	ldd	r24, Y+3	; 0x03
    2a34:	28 2f       	mov	r18, r24
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	8e ef       	ldi	r24, 0xFE	; 254
    2a3a:	91 e0       	ldi	r25, 0x01	; 1
    2a3c:	ac 01       	movw	r20, r24
    2a3e:	24 9f       	mul	r18, r20
    2a40:	c0 01       	movw	r24, r0
    2a42:	25 9f       	mul	r18, r21
    2a44:	90 0d       	add	r25, r0
    2a46:	34 9f       	mul	r19, r20
    2a48:	90 0d       	add	r25, r0
    2a4a:	11 24       	eor	r1, r1
    2a4c:	24 e6       	ldi	r18, 0x64	; 100
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	b9 01       	movw	r22, r18
    2a52:	0e 94 9d 19 	call	0x333a	; 0x333a <__udivmodhi4>
    2a56:	cb 01       	movw	r24, r22
    2a58:	9a 83       	std	Y+2, r25	; 0x02
    2a5a:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    2a5c:	ea e4       	ldi	r30, 0x4A	; 74
    2a5e:	f0 e0       	ldi	r31, 0x00	; 0
    2a60:	89 81       	ldd	r24, Y+1	; 0x01
    2a62:	9a 81       	ldd	r25, Y+2	; 0x02
    2a64:	91 83       	std	Z+1, r25	; 0x01
    2a66:	80 83       	st	Z, r24
    2a68:	7c c0       	rjmp	.+248    	; 0x2b62 <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	   break;
	   case TIMER1_MODE_PWM_PHASE_CORRECT_9 :
	        Copy_u16OCR1AValue=((u16)1022*Copy_u8Intensity/100);
    2a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6c:	28 2f       	mov	r18, r24
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	8e ef       	ldi	r24, 0xFE	; 254
    2a72:	93 e0       	ldi	r25, 0x03	; 3
    2a74:	ac 01       	movw	r20, r24
    2a76:	24 9f       	mul	r18, r20
    2a78:	c0 01       	movw	r24, r0
    2a7a:	25 9f       	mul	r18, r21
    2a7c:	90 0d       	add	r25, r0
    2a7e:	34 9f       	mul	r19, r20
    2a80:	90 0d       	add	r25, r0
    2a82:	11 24       	eor	r1, r1
    2a84:	24 e6       	ldi	r18, 0x64	; 100
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	b9 01       	movw	r22, r18
    2a8a:	0e 94 9d 19 	call	0x333a	; 0x333a <__udivmodhi4>
    2a8e:	cb 01       	movw	r24, r22
    2a90:	9a 83       	std	Y+2, r25	; 0x02
    2a92:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    2a94:	ea e4       	ldi	r30, 0x4A	; 74
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	89 81       	ldd	r24, Y+1	; 0x01
    2a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9c:	91 83       	std	Z+1, r25	; 0x01
    2a9e:	80 83       	st	Z, r24
    2aa0:	60 c0       	rjmp	.+192    	; 0x2b62 <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	   break;
	   case TIMER1_MODE_PWM_PHASE_CORRECT_10 :
	        Copy_u16OCR1AValue=((u16)2046*Copy_u8Intensity/100);
    2aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa4:	28 2f       	mov	r18, r24
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	8e ef       	ldi	r24, 0xFE	; 254
    2aaa:	97 e0       	ldi	r25, 0x07	; 7
    2aac:	ac 01       	movw	r20, r24
    2aae:	24 9f       	mul	r18, r20
    2ab0:	c0 01       	movw	r24, r0
    2ab2:	25 9f       	mul	r18, r21
    2ab4:	90 0d       	add	r25, r0
    2ab6:	34 9f       	mul	r19, r20
    2ab8:	90 0d       	add	r25, r0
    2aba:	11 24       	eor	r1, r1
    2abc:	24 e6       	ldi	r18, 0x64	; 100
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	b9 01       	movw	r22, r18
    2ac2:	0e 94 9d 19 	call	0x333a	; 0x333a <__udivmodhi4>
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	9a 83       	std	Y+2, r25	; 0x02
    2aca:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    2acc:	ea e4       	ldi	r30, 0x4A	; 74
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	89 81       	ldd	r24, Y+1	; 0x01
    2ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad4:	91 83       	std	Z+1, r25	; 0x01
    2ad6:	80 83       	st	Z, r24
    2ad8:	44 c0       	rjmp	.+136    	; 0x2b62 <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	   break;

	   case TIMER1_MODE_FAST_PWM_8 :
	        Copy_u16OCR1AValue=(256*Copy_u8Intensity/100);
    2ada:	8b 81       	ldd	r24, Y+3	; 0x03
    2adc:	88 2f       	mov	r24, r24
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	98 2f       	mov	r25, r24
    2ae2:	88 27       	eor	r24, r24
    2ae4:	24 e6       	ldi	r18, 0x64	; 100
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	b9 01       	movw	r22, r18
    2aea:	0e 94 b1 19 	call	0x3362	; 0x3362 <__divmodhi4>
    2aee:	cb 01       	movw	r24, r22
    2af0:	9a 83       	std	Y+2, r25	; 0x02
    2af2:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    2af4:	ea e4       	ldi	r30, 0x4A	; 74
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	89 81       	ldd	r24, Y+1	; 0x01
    2afa:	9a 81       	ldd	r25, Y+2	; 0x02
    2afc:	91 83       	std	Z+1, r25	; 0x01
    2afe:	80 83       	st	Z, r24
    2b00:	30 c0       	rjmp	.+96     	; 0x2b62 <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	   break;
	   case TIMER1_MODE_FAST_PWM_9 :
	        Copy_u16OCR1AValue=(512*Copy_u8Intensity/100);
    2b02:	8b 81       	ldd	r24, Y+3	; 0x03
    2b04:	88 2f       	mov	r24, r24
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	98 2f       	mov	r25, r24
    2b0a:	88 27       	eor	r24, r24
    2b0c:	99 0f       	add	r25, r25
    2b0e:	24 e6       	ldi	r18, 0x64	; 100
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	b9 01       	movw	r22, r18
    2b14:	0e 94 b1 19 	call	0x3362	; 0x3362 <__divmodhi4>
    2b18:	cb 01       	movw	r24, r22
    2b1a:	9a 83       	std	Y+2, r25	; 0x02
    2b1c:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    2b1e:	ea e4       	ldi	r30, 0x4A	; 74
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	89 81       	ldd	r24, Y+1	; 0x01
    2b24:	9a 81       	ldd	r25, Y+2	; 0x02
    2b26:	91 83       	std	Z+1, r25	; 0x01
    2b28:	80 83       	st	Z, r24
    2b2a:	1b c0       	rjmp	.+54     	; 0x2b62 <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	   break;
	   case TIMER1_MODE_FAST_PWM_10 :
	        Copy_u16OCR1AValue=((u16)1023*Copy_u8Intensity/100);
    2b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2e:	28 2f       	mov	r18, r24
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	8f ef       	ldi	r24, 0xFF	; 255
    2b34:	93 e0       	ldi	r25, 0x03	; 3
    2b36:	ac 01       	movw	r20, r24
    2b38:	24 9f       	mul	r18, r20
    2b3a:	c0 01       	movw	r24, r0
    2b3c:	25 9f       	mul	r18, r21
    2b3e:	90 0d       	add	r25, r0
    2b40:	34 9f       	mul	r19, r20
    2b42:	90 0d       	add	r25, r0
    2b44:	11 24       	eor	r1, r1
    2b46:	24 e6       	ldi	r18, 0x64	; 100
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	b9 01       	movw	r22, r18
    2b4c:	0e 94 9d 19 	call	0x333a	; 0x333a <__udivmodhi4>
    2b50:	cb 01       	movw	r24, r22
    2b52:	9a 83       	std	Y+2, r25	; 0x02
    2b54:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    2b56:	ea e4       	ldi	r30, 0x4A	; 74
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	89 81       	ldd	r24, Y+1	; 0x01
    2b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b5e:	91 83       	std	Z+1, r25	; 0x01
    2b60:	80 83       	st	Z, r24
	   break;
	}
}
    2b62:	0f 90       	pop	r0
    2b64:	0f 90       	pop	r0
    2b66:	0f 90       	pop	r0
    2b68:	0f 90       	pop	r0
    2b6a:	0f 90       	pop	r0
    2b6c:	cf 91       	pop	r28
    2b6e:	df 91       	pop	r29
    2b70:	08 95       	ret

00002b72 <TIMER_voidTimer1GeneratePWMOCR1B>:
void TIMER_voidTimer1GeneratePWMOCR1B(u8 Copy_u8Intensity)
{
    2b72:	df 93       	push	r29
    2b74:	cf 93       	push	r28
    2b76:	00 d0       	rcall	.+0      	; 0x2b78 <TIMER_voidTimer1GeneratePWMOCR1B+0x6>
    2b78:	00 d0       	rcall	.+0      	; 0x2b7a <TIMER_voidTimer1GeneratePWMOCR1B+0x8>
    2b7a:	0f 92       	push	r0
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
    2b80:	8b 83       	std	Y+3, r24	; 0x03
	u16 Copy_u16OCR1BValue;
	switch(TIMER1_u8MODEPWM)
    2b82:	80 91 83 00 	lds	r24, 0x0083
    2b86:	28 2f       	mov	r18, r24
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	3d 83       	std	Y+5, r19	; 0x05
    2b8c:	2c 83       	std	Y+4, r18	; 0x04
    2b8e:	4c 81       	ldd	r20, Y+4	; 0x04
    2b90:	5d 81       	ldd	r21, Y+5	; 0x05
    2b92:	43 30       	cpi	r20, 0x03	; 3
    2b94:	51 05       	cpc	r21, r1
    2b96:	09 f4       	brne	.+2      	; 0x2b9a <TIMER_voidTimer1GeneratePWMOCR1B+0x28>
    2b98:	5b c0       	rjmp	.+182    	; 0x2c50 <TIMER_voidTimer1GeneratePWMOCR1B+0xde>
    2b9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b9c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b9e:	84 30       	cpi	r24, 0x04	; 4
    2ba0:	91 05       	cpc	r25, r1
    2ba2:	5c f4       	brge	.+22     	; 0x2bba <TIMER_voidTimer1GeneratePWMOCR1B+0x48>
    2ba4:	2c 81       	ldd	r18, Y+4	; 0x04
    2ba6:	3d 81       	ldd	r19, Y+5	; 0x05
    2ba8:	21 30       	cpi	r18, 0x01	; 1
    2baa:	31 05       	cpc	r19, r1
    2bac:	c9 f0       	breq	.+50     	; 0x2be0 <TIMER_voidTimer1GeneratePWMOCR1B+0x6e>
    2bae:	4c 81       	ldd	r20, Y+4	; 0x04
    2bb0:	5d 81       	ldd	r21, Y+5	; 0x05
    2bb2:	42 30       	cpi	r20, 0x02	; 2
    2bb4:	51 05       	cpc	r21, r1
    2bb6:	81 f1       	breq	.+96     	; 0x2c18 <TIMER_voidTimer1GeneratePWMOCR1B+0xa6>
    2bb8:	ab c0       	rjmp	.+342    	; 0x2d10 <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
    2bba:	8c 81       	ldd	r24, Y+4	; 0x04
    2bbc:	9d 81       	ldd	r25, Y+5	; 0x05
    2bbe:	86 30       	cpi	r24, 0x06	; 6
    2bc0:	91 05       	cpc	r25, r1
    2bc2:	09 f4       	brne	.+2      	; 0x2bc6 <TIMER_voidTimer1GeneratePWMOCR1B+0x54>
    2bc4:	75 c0       	rjmp	.+234    	; 0x2cb0 <TIMER_voidTimer1GeneratePWMOCR1B+0x13e>
    2bc6:	2c 81       	ldd	r18, Y+4	; 0x04
    2bc8:	3d 81       	ldd	r19, Y+5	; 0x05
    2bca:	27 30       	cpi	r18, 0x07	; 7
    2bcc:	31 05       	cpc	r19, r1
    2bce:	09 f4       	brne	.+2      	; 0x2bd2 <TIMER_voidTimer1GeneratePWMOCR1B+0x60>
    2bd0:	84 c0       	rjmp	.+264    	; 0x2cda <TIMER_voidTimer1GeneratePWMOCR1B+0x168>
    2bd2:	4c 81       	ldd	r20, Y+4	; 0x04
    2bd4:	5d 81       	ldd	r21, Y+5	; 0x05
    2bd6:	45 30       	cpi	r20, 0x05	; 5
    2bd8:	51 05       	cpc	r21, r1
    2bda:	09 f4       	brne	.+2      	; 0x2bde <TIMER_voidTimer1GeneratePWMOCR1B+0x6c>
    2bdc:	55 c0       	rjmp	.+170    	; 0x2c88 <TIMER_voidTimer1GeneratePWMOCR1B+0x116>
    2bde:	98 c0       	rjmp	.+304    	; 0x2d10 <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	{
	   case TIMER1_MODE_PWM_PHASE_CORRECT_8 :
	        Copy_u16OCR1BValue=((u16)510*Copy_u8Intensity/100);
    2be0:	8b 81       	ldd	r24, Y+3	; 0x03
    2be2:	28 2f       	mov	r18, r24
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	8e ef       	ldi	r24, 0xFE	; 254
    2be8:	91 e0       	ldi	r25, 0x01	; 1
    2bea:	ac 01       	movw	r20, r24
    2bec:	24 9f       	mul	r18, r20
    2bee:	c0 01       	movw	r24, r0
    2bf0:	25 9f       	mul	r18, r21
    2bf2:	90 0d       	add	r25, r0
    2bf4:	34 9f       	mul	r19, r20
    2bf6:	90 0d       	add	r25, r0
    2bf8:	11 24       	eor	r1, r1
    2bfa:	24 e6       	ldi	r18, 0x64	; 100
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	b9 01       	movw	r22, r18
    2c00:	0e 94 9d 19 	call	0x333a	; 0x333a <__udivmodhi4>
    2c04:	cb 01       	movw	r24, r22
    2c06:	9a 83       	std	Y+2, r25	; 0x02
    2c08:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    2c0a:	e8 e4       	ldi	r30, 0x48	; 72
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	89 81       	ldd	r24, Y+1	; 0x01
    2c10:	9a 81       	ldd	r25, Y+2	; 0x02
    2c12:	91 83       	std	Z+1, r25	; 0x01
    2c14:	80 83       	st	Z, r24
    2c16:	7c c0       	rjmp	.+248    	; 0x2d10 <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	   break;
	   case TIMER1_MODE_PWM_PHASE_CORRECT_9 :
	        Copy_u16OCR1BValue=((u16)1022*Copy_u8Intensity/100);
    2c18:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1a:	28 2f       	mov	r18, r24
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	8e ef       	ldi	r24, 0xFE	; 254
    2c20:	93 e0       	ldi	r25, 0x03	; 3
    2c22:	ac 01       	movw	r20, r24
    2c24:	24 9f       	mul	r18, r20
    2c26:	c0 01       	movw	r24, r0
    2c28:	25 9f       	mul	r18, r21
    2c2a:	90 0d       	add	r25, r0
    2c2c:	34 9f       	mul	r19, r20
    2c2e:	90 0d       	add	r25, r0
    2c30:	11 24       	eor	r1, r1
    2c32:	24 e6       	ldi	r18, 0x64	; 100
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	b9 01       	movw	r22, r18
    2c38:	0e 94 9d 19 	call	0x333a	; 0x333a <__udivmodhi4>
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	9a 83       	std	Y+2, r25	; 0x02
    2c40:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    2c42:	e8 e4       	ldi	r30, 0x48	; 72
    2c44:	f0 e0       	ldi	r31, 0x00	; 0
    2c46:	89 81       	ldd	r24, Y+1	; 0x01
    2c48:	9a 81       	ldd	r25, Y+2	; 0x02
    2c4a:	91 83       	std	Z+1, r25	; 0x01
    2c4c:	80 83       	st	Z, r24
    2c4e:	60 c0       	rjmp	.+192    	; 0x2d10 <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	   break;
	   case TIMER1_MODE_PWM_PHASE_CORRECT_10 :
	        Copy_u16OCR1BValue=((u16)2046*Copy_u8Intensity/100);
    2c50:	8b 81       	ldd	r24, Y+3	; 0x03
    2c52:	28 2f       	mov	r18, r24
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	8e ef       	ldi	r24, 0xFE	; 254
    2c58:	97 e0       	ldi	r25, 0x07	; 7
    2c5a:	ac 01       	movw	r20, r24
    2c5c:	24 9f       	mul	r18, r20
    2c5e:	c0 01       	movw	r24, r0
    2c60:	25 9f       	mul	r18, r21
    2c62:	90 0d       	add	r25, r0
    2c64:	34 9f       	mul	r19, r20
    2c66:	90 0d       	add	r25, r0
    2c68:	11 24       	eor	r1, r1
    2c6a:	24 e6       	ldi	r18, 0x64	; 100
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	b9 01       	movw	r22, r18
    2c70:	0e 94 9d 19 	call	0x333a	; 0x333a <__udivmodhi4>
    2c74:	cb 01       	movw	r24, r22
    2c76:	9a 83       	std	Y+2, r25	; 0x02
    2c78:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    2c7a:	e8 e4       	ldi	r30, 0x48	; 72
    2c7c:	f0 e0       	ldi	r31, 0x00	; 0
    2c7e:	89 81       	ldd	r24, Y+1	; 0x01
    2c80:	9a 81       	ldd	r25, Y+2	; 0x02
    2c82:	91 83       	std	Z+1, r25	; 0x01
    2c84:	80 83       	st	Z, r24
    2c86:	44 c0       	rjmp	.+136    	; 0x2d10 <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	   break;

	   case TIMER1_MODE_FAST_PWM_8 :
	        Copy_u16OCR1BValue=(256*Copy_u8Intensity/100);
    2c88:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8a:	88 2f       	mov	r24, r24
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	98 2f       	mov	r25, r24
    2c90:	88 27       	eor	r24, r24
    2c92:	24 e6       	ldi	r18, 0x64	; 100
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	b9 01       	movw	r22, r18
    2c98:	0e 94 b1 19 	call	0x3362	; 0x3362 <__divmodhi4>
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	9a 83       	std	Y+2, r25	; 0x02
    2ca0:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    2ca2:	e8 e4       	ldi	r30, 0x48	; 72
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	89 81       	ldd	r24, Y+1	; 0x01
    2ca8:	9a 81       	ldd	r25, Y+2	; 0x02
    2caa:	91 83       	std	Z+1, r25	; 0x01
    2cac:	80 83       	st	Z, r24
    2cae:	30 c0       	rjmp	.+96     	; 0x2d10 <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	   break;
	   case TIMER1_MODE_FAST_PWM_9 :
	        Copy_u16OCR1BValue=(512*Copy_u8Intensity/100);
    2cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb2:	88 2f       	mov	r24, r24
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	98 2f       	mov	r25, r24
    2cb8:	88 27       	eor	r24, r24
    2cba:	99 0f       	add	r25, r25
    2cbc:	24 e6       	ldi	r18, 0x64	; 100
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	b9 01       	movw	r22, r18
    2cc2:	0e 94 b1 19 	call	0x3362	; 0x3362 <__divmodhi4>
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	9a 83       	std	Y+2, r25	; 0x02
    2cca:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    2ccc:	e8 e4       	ldi	r30, 0x48	; 72
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	89 81       	ldd	r24, Y+1	; 0x01
    2cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd4:	91 83       	std	Z+1, r25	; 0x01
    2cd6:	80 83       	st	Z, r24
    2cd8:	1b c0       	rjmp	.+54     	; 0x2d10 <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	   break;
	   case TIMER1_MODE_FAST_PWM_10 :
	        Copy_u16OCR1BValue=((u16)1023*Copy_u8Intensity/100);
    2cda:	8b 81       	ldd	r24, Y+3	; 0x03
    2cdc:	28 2f       	mov	r18, r24
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	8f ef       	ldi	r24, 0xFF	; 255
    2ce2:	93 e0       	ldi	r25, 0x03	; 3
    2ce4:	ac 01       	movw	r20, r24
    2ce6:	24 9f       	mul	r18, r20
    2ce8:	c0 01       	movw	r24, r0
    2cea:	25 9f       	mul	r18, r21
    2cec:	90 0d       	add	r25, r0
    2cee:	34 9f       	mul	r19, r20
    2cf0:	90 0d       	add	r25, r0
    2cf2:	11 24       	eor	r1, r1
    2cf4:	24 e6       	ldi	r18, 0x64	; 100
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	b9 01       	movw	r22, r18
    2cfa:	0e 94 9d 19 	call	0x333a	; 0x333a <__udivmodhi4>
    2cfe:	cb 01       	movw	r24, r22
    2d00:	9a 83       	std	Y+2, r25	; 0x02
    2d02:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    2d04:	e8 e4       	ldi	r30, 0x48	; 72
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	89 81       	ldd	r24, Y+1	; 0x01
    2d0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d0c:	91 83       	std	Z+1, r25	; 0x01
    2d0e:	80 83       	st	Z, r24
	   break;
	}
}
    2d10:	0f 90       	pop	r0
    2d12:	0f 90       	pop	r0
    2d14:	0f 90       	pop	r0
    2d16:	0f 90       	pop	r0
    2d18:	0f 90       	pop	r0
    2d1a:	cf 91       	pop	r28
    2d1c:	df 91       	pop	r29
    2d1e:	08 95       	ret

00002d20 <TIMER_voidTimer1SetOCR1A>:

/*************************************************************************************************************/
void TIMER_voidTimer1SetOCR1A(u16 Copy_u16OCR1A)
{
    2d20:	df 93       	push	r29
    2d22:	cf 93       	push	r28
    2d24:	00 d0       	rcall	.+0      	; 0x2d26 <TIMER_voidTimer1SetOCR1A+0x6>
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62
    2d2a:	9a 83       	std	Y+2, r25	; 0x02
    2d2c:	89 83       	std	Y+1, r24	; 0x01
	  OCR1AH = (u8)(Copy_u16OCR1A>>8);
    2d2e:	eb e4       	ldi	r30, 0x4B	; 75
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	89 81       	ldd	r24, Y+1	; 0x01
    2d34:	9a 81       	ldd	r25, Y+2	; 0x02
    2d36:	89 2f       	mov	r24, r25
    2d38:	99 27       	eor	r25, r25
    2d3a:	80 83       	st	Z, r24
	  OCR1AL = (u8)(Copy_u16OCR1A);
    2d3c:	ea e4       	ldi	r30, 0x4A	; 74
    2d3e:	f0 e0       	ldi	r31, 0x00	; 0
    2d40:	89 81       	ldd	r24, Y+1	; 0x01
    2d42:	80 83       	st	Z, r24
}
    2d44:	0f 90       	pop	r0
    2d46:	0f 90       	pop	r0
    2d48:	cf 91       	pop	r28
    2d4a:	df 91       	pop	r29
    2d4c:	08 95       	ret

00002d4e <TIMER_voidTimer1SetOCR1B>:
void TIMER_voidTimer1SetOCR1B(u16 Copy_u16OCR1B)
{
    2d4e:	df 93       	push	r29
    2d50:	cf 93       	push	r28
    2d52:	00 d0       	rcall	.+0      	; 0x2d54 <TIMER_voidTimer1SetOCR1B+0x6>
    2d54:	cd b7       	in	r28, 0x3d	; 61
    2d56:	de b7       	in	r29, 0x3e	; 62
    2d58:	9a 83       	std	Y+2, r25	; 0x02
    2d5a:	89 83       	std	Y+1, r24	; 0x01
	  OCR1BH = (u8)(Copy_u16OCR1B>>8);
    2d5c:	e9 e4       	ldi	r30, 0x49	; 73
    2d5e:	f0 e0       	ldi	r31, 0x00	; 0
    2d60:	89 81       	ldd	r24, Y+1	; 0x01
    2d62:	9a 81       	ldd	r25, Y+2	; 0x02
    2d64:	89 2f       	mov	r24, r25
    2d66:	99 27       	eor	r25, r25
    2d68:	80 83       	st	Z, r24
	  OCR1BL = (u8)(Copy_u16OCR1B);
    2d6a:	e8 e4       	ldi	r30, 0x48	; 72
    2d6c:	f0 e0       	ldi	r31, 0x00	; 0
    2d6e:	89 81       	ldd	r24, Y+1	; 0x01
    2d70:	80 83       	st	Z, r24
}
    2d72:	0f 90       	pop	r0
    2d74:	0f 90       	pop	r0
    2d76:	cf 91       	pop	r28
    2d78:	df 91       	pop	r29
    2d7a:	08 95       	ret

00002d7c <TIMER_voidTimer1SetICR1>:
void TIMER_voidTimer1SetICR1(u16 Copy_u16ICR1)
{
    2d7c:	df 93       	push	r29
    2d7e:	cf 93       	push	r28
    2d80:	00 d0       	rcall	.+0      	; 0x2d82 <TIMER_voidTimer1SetICR1+0x6>
    2d82:	cd b7       	in	r28, 0x3d	; 61
    2d84:	de b7       	in	r29, 0x3e	; 62
    2d86:	9a 83       	std	Y+2, r25	; 0x02
    2d88:	89 83       	std	Y+1, r24	; 0x01
	  ICR1H = (u8)(Copy_u16ICR1>>8);
    2d8a:	e7 e4       	ldi	r30, 0x47	; 71
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	89 81       	ldd	r24, Y+1	; 0x01
    2d90:	9a 81       	ldd	r25, Y+2	; 0x02
    2d92:	89 2f       	mov	r24, r25
    2d94:	99 27       	eor	r25, r25
    2d96:	80 83       	st	Z, r24
	  ICR1L = (u8)(Copy_u16ICR1);
    2d98:	e6 e4       	ldi	r30, 0x46	; 70
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	89 81       	ldd	r24, Y+1	; 0x01
    2d9e:	80 83       	st	Z, r24
}
    2da0:	0f 90       	pop	r0
    2da2:	0f 90       	pop	r0
    2da4:	cf 91       	pop	r28
    2da6:	df 91       	pop	r29
    2da8:	08 95       	ret

00002daa <TIMER_voidTimer1ICUInit>:
 *                                                           ICU Timer 1                                                             *
 **************************************************************************************************************************************/
static void(*Timer1_pICUSetCallBack)(void);
/************************************************************************************************************************************/
void TIMER_voidTimer1ICUInit(void)
{
    2daa:	df 93       	push	r29
    2dac:	cf 93       	push	r28
    2dae:	cd b7       	in	r28, 0x3d	; 61
    2db0:	de b7       	in	r29, 0x3e	; 62
	 SET_BIT(TCCR1B,TCCR1B_ICES1);
    2db2:	ae e4       	ldi	r26, 0x4E	; 78
    2db4:	b0 e0       	ldi	r27, 0x00	; 0
    2db6:	ee e4       	ldi	r30, 0x4E	; 78
    2db8:	f0 e0       	ldi	r31, 0x00	; 0
    2dba:	80 81       	ld	r24, Z
    2dbc:	80 64       	ori	r24, 0x40	; 64
    2dbe:	8c 93       	st	X, r24
	 SET_BIT(TIMSK,TIMSK_TICIE1);
    2dc0:	a9 e5       	ldi	r26, 0x59	; 89
    2dc2:	b0 e0       	ldi	r27, 0x00	; 0
    2dc4:	e9 e5       	ldi	r30, 0x59	; 89
    2dc6:	f0 e0       	ldi	r31, 0x00	; 0
    2dc8:	80 81       	ld	r24, Z
    2dca:	80 62       	ori	r24, 0x20	; 32
    2dcc:	8c 93       	st	X, r24

	 CLR_BIT(TCCR1B,TCCR1B_CS10);
    2dce:	ae e4       	ldi	r26, 0x4E	; 78
    2dd0:	b0 e0       	ldi	r27, 0x00	; 0
    2dd2:	ee e4       	ldi	r30, 0x4E	; 78
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	80 81       	ld	r24, Z
    2dd8:	8e 7f       	andi	r24, 0xFE	; 254
    2dda:	8c 93       	st	X, r24
	 SET_BIT(TCCR1B,TCCR1B_CS11);
    2ddc:	ae e4       	ldi	r26, 0x4E	; 78
    2dde:	b0 e0       	ldi	r27, 0x00	; 0
    2de0:	ee e4       	ldi	r30, 0x4E	; 78
    2de2:	f0 e0       	ldi	r31, 0x00	; 0
    2de4:	80 81       	ld	r24, Z
    2de6:	82 60       	ori	r24, 0x02	; 2
    2de8:	8c 93       	st	X, r24
	 CLR_BIT(TCCR1B,TCCR1B_CS12);
    2dea:	ae e4       	ldi	r26, 0x4E	; 78
    2dec:	b0 e0       	ldi	r27, 0x00	; 0
    2dee:	ee e4       	ldi	r30, 0x4E	; 78
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
    2df2:	80 81       	ld	r24, Z
    2df4:	8b 7f       	andi	r24, 0xFB	; 251
    2df6:	8c 93       	st	X, r24
}
    2df8:	cf 91       	pop	r28
    2dfa:	df 91       	pop	r29
    2dfc:	08 95       	ret

00002dfe <TIMER_voidTimer1ICUSetTriggerEdge>:
void TIMER_voidTimer1ICUSetTriggerEdge(u8 Copy_u8ICUEdgeType)
{
    2dfe:	df 93       	push	r29
    2e00:	cf 93       	push	r28
    2e02:	0f 92       	push	r0
    2e04:	cd b7       	in	r28, 0x3d	; 61
    2e06:	de b7       	in	r29, 0x3e	; 62
    2e08:	89 83       	std	Y+1, r24	; 0x01
   if(Copy_u8ICUEdgeType==TIMER1_ICU_RISING_EDGY_TYPE_MODE)
    2e0a:	89 81       	ldd	r24, Y+1	; 0x01
    2e0c:	81 30       	cpi	r24, 0x01	; 1
    2e0e:	41 f4       	brne	.+16     	; 0x2e20 <TIMER_voidTimer1ICUSetTriggerEdge+0x22>
   {
	  SET_BIT(TCCR1B,TCCR1B_ICES1);
    2e10:	ae e4       	ldi	r26, 0x4E	; 78
    2e12:	b0 e0       	ldi	r27, 0x00	; 0
    2e14:	ee e4       	ldi	r30, 0x4E	; 78
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	80 81       	ld	r24, Z
    2e1a:	80 64       	ori	r24, 0x40	; 64
    2e1c:	8c 93       	st	X, r24
    2e1e:	0a c0       	rjmp	.+20     	; 0x2e34 <TIMER_voidTimer1ICUSetTriggerEdge+0x36>
   }
   else if(Copy_u8ICUEdgeType==TIMER1_ICU_FALLING_EDGY_TYPE_MODE)
    2e20:	89 81       	ldd	r24, Y+1	; 0x01
    2e22:	88 23       	and	r24, r24
    2e24:	39 f4       	brne	.+14     	; 0x2e34 <TIMER_voidTimer1ICUSetTriggerEdge+0x36>
   {
	  CLR_BIT(TCCR1B,TCCR1B_ICES1);
    2e26:	ae e4       	ldi	r26, 0x4E	; 78
    2e28:	b0 e0       	ldi	r27, 0x00	; 0
    2e2a:	ee e4       	ldi	r30, 0x4E	; 78
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	80 81       	ld	r24, Z
    2e30:	8f 7b       	andi	r24, 0xBF	; 191
    2e32:	8c 93       	st	X, r24
   }
}
    2e34:	0f 90       	pop	r0
    2e36:	cf 91       	pop	r28
    2e38:	df 91       	pop	r29
    2e3a:	08 95       	ret

00002e3c <TIMER_voidTimer1ICUGetInputCaptureValue>:
u16 TIMER_voidTimer1ICUGetInputCaptureValue(void)
{
    2e3c:	df 93       	push	r29
    2e3e:	cf 93       	push	r28
    2e40:	cd b7       	in	r28, 0x3d	; 61
    2e42:	de b7       	in	r29, 0x3e	; 62
	 return TIMER_u16_ICR1;
    2e44:	e6 e4       	ldi	r30, 0x46	; 70
    2e46:	f0 e0       	ldi	r31, 0x00	; 0
    2e48:	80 81       	ld	r24, Z
    2e4a:	91 81       	ldd	r25, Z+1	; 0x01
}
    2e4c:	cf 91       	pop	r28
    2e4e:	df 91       	pop	r29
    2e50:	08 95       	ret

00002e52 <TIMER_voidTimer1ICUSetCallBack>:
void TIMER_voidTimer1ICUSetCallBack(void (*Copy_pFun) (void))
{
    2e52:	df 93       	push	r29
    2e54:	cf 93       	push	r28
    2e56:	00 d0       	rcall	.+0      	; 0x2e58 <TIMER_voidTimer1ICUSetCallBack+0x6>
    2e58:	cd b7       	in	r28, 0x3d	; 61
    2e5a:	de b7       	in	r29, 0x3e	; 62
    2e5c:	9a 83       	std	Y+2, r25	; 0x02
    2e5e:	89 83       	std	Y+1, r24	; 0x01
	 Timer1_pICUSetCallBack = Copy_pFun;
    2e60:	89 81       	ldd	r24, Y+1	; 0x01
    2e62:	9a 81       	ldd	r25, Y+2	; 0x02
    2e64:	90 93 82 00 	sts	0x0082, r25
    2e68:	80 93 81 00 	sts	0x0081, r24
}
    2e6c:	0f 90       	pop	r0
    2e6e:	0f 90       	pop	r0
    2e70:	cf 91       	pop	r28
    2e72:	df 91       	pop	r29
    2e74:	08 95       	ret

00002e76 <TIMER_voidClearTimer1Value>:
void TIMER_voidClearTimer1Value(void)
{
    2e76:	df 93       	push	r29
    2e78:	cf 93       	push	r28
    2e7a:	cd b7       	in	r28, 0x3d	; 61
    2e7c:	de b7       	in	r29, 0x3e	; 62
	 TIMER_u16_TCNT1 = 0;
    2e7e:	ec e4       	ldi	r30, 0x4C	; 76
    2e80:	f0 e0       	ldi	r31, 0x00	; 0
    2e82:	11 82       	std	Z+1, r1	; 0x01
    2e84:	10 82       	st	Z, r1
}
    2e86:	cf 91       	pop	r28
    2e88:	df 91       	pop	r29
    2e8a:	08 95       	ret

00002e8c <__vector_6>:
void __vector_6 (void)
{
    2e8c:	1f 92       	push	r1
    2e8e:	0f 92       	push	r0
    2e90:	0f b6       	in	r0, 0x3f	; 63
    2e92:	0f 92       	push	r0
    2e94:	11 24       	eor	r1, r1
    2e96:	2f 93       	push	r18
    2e98:	3f 93       	push	r19
    2e9a:	4f 93       	push	r20
    2e9c:	5f 93       	push	r21
    2e9e:	6f 93       	push	r22
    2ea0:	7f 93       	push	r23
    2ea2:	8f 93       	push	r24
    2ea4:	9f 93       	push	r25
    2ea6:	af 93       	push	r26
    2ea8:	bf 93       	push	r27
    2eaa:	ef 93       	push	r30
    2eac:	ff 93       	push	r31
    2eae:	df 93       	push	r29
    2eb0:	cf 93       	push	r28
    2eb2:	cd b7       	in	r28, 0x3d	; 61
    2eb4:	de b7       	in	r29, 0x3e	; 62
	if (Timer1_pICUSetCallBack!=NULL)
    2eb6:	80 91 81 00 	lds	r24, 0x0081
    2eba:	90 91 82 00 	lds	r25, 0x0082
    2ebe:	00 97       	sbiw	r24, 0x00	; 0
    2ec0:	29 f0       	breq	.+10     	; 0x2ecc <__vector_6+0x40>
	{
		Timer1_pICUSetCallBack();
    2ec2:	e0 91 81 00 	lds	r30, 0x0081
    2ec6:	f0 91 82 00 	lds	r31, 0x0082
    2eca:	09 95       	icall
	}
}
    2ecc:	cf 91       	pop	r28
    2ece:	df 91       	pop	r29
    2ed0:	ff 91       	pop	r31
    2ed2:	ef 91       	pop	r30
    2ed4:	bf 91       	pop	r27
    2ed6:	af 91       	pop	r26
    2ed8:	9f 91       	pop	r25
    2eda:	8f 91       	pop	r24
    2edc:	7f 91       	pop	r23
    2ede:	6f 91       	pop	r22
    2ee0:	5f 91       	pop	r21
    2ee2:	4f 91       	pop	r20
    2ee4:	3f 91       	pop	r19
    2ee6:	2f 91       	pop	r18
    2ee8:	0f 90       	pop	r0
    2eea:	0f be       	out	0x3f, r0	; 63
    2eec:	0f 90       	pop	r0
    2eee:	1f 90       	pop	r1
    2ef0:	18 95       	reti

00002ef2 <main>:
#include "SvM_interface.h"

#include <util/delay.h>

void main(void)
{
    2ef2:	df 93       	push	r29
    2ef4:	cf 93       	push	r28
    2ef6:	cd b7       	in	r28, 0x3d	; 61
    2ef8:	de b7       	in	r29, 0x3e	; 62
    2efa:	e8 97       	sbiw	r28, 0x38	; 56
    2efc:	0f b6       	in	r0, 0x3f	; 63
    2efe:	f8 94       	cli
    2f00:	de bf       	out	0x3e, r29	; 62
    2f02:	0f be       	out	0x3f, r0	; 63
    2f04:	cd bf       	out	0x3d, r28	; 61
	SERVO_voidTimer1InitOCR1A();
    2f06:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <SERVO_voidTimer1InitOCR1A>

	while(1)
	{
		SERVO_voidTimer1ServoSetAngleOCR1A(0);
    2f0a:	60 e0       	ldi	r22, 0x00	; 0
    2f0c:	70 e0       	ldi	r23, 0x00	; 0
    2f0e:	80 e0       	ldi	r24, 0x00	; 0
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <SERVO_voidTimer1ServoSetAngleOCR1A>
		SERVO_voidTimer1ServoSetAngleOCR1A(0);
    2f16:	60 e0       	ldi	r22, 0x00	; 0
    2f18:	70 e0       	ldi	r23, 0x00	; 0
    2f1a:	80 e0       	ldi	r24, 0x00	; 0
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <SERVO_voidTimer1ServoSetAngleOCR1A>
    2f22:	80 e0       	ldi	r24, 0x00	; 0
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	aa e7       	ldi	r26, 0x7A	; 122
    2f28:	b4 e4       	ldi	r27, 0x44	; 68
    2f2a:	8d ab       	std	Y+53, r24	; 0x35
    2f2c:	9e ab       	std	Y+54, r25	; 0x36
    2f2e:	af ab       	std	Y+55, r26	; 0x37
    2f30:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f32:	6d a9       	ldd	r22, Y+53	; 0x35
    2f34:	7e a9       	ldd	r23, Y+54	; 0x36
    2f36:	8f a9       	ldd	r24, Y+55	; 0x37
    2f38:	98 ad       	ldd	r25, Y+56	; 0x38
    2f3a:	20 e0       	ldi	r18, 0x00	; 0
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	4a ef       	ldi	r20, 0xFA	; 250
    2f40:	54 e4       	ldi	r21, 0x44	; 68
    2f42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f46:	dc 01       	movw	r26, r24
    2f48:	cb 01       	movw	r24, r22
    2f4a:	89 ab       	std	Y+49, r24	; 0x31
    2f4c:	9a ab       	std	Y+50, r25	; 0x32
    2f4e:	ab ab       	std	Y+51, r26	; 0x33
    2f50:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f52:	69 a9       	ldd	r22, Y+49	; 0x31
    2f54:	7a a9       	ldd	r23, Y+50	; 0x32
    2f56:	8b a9       	ldd	r24, Y+51	; 0x33
    2f58:	9c a9       	ldd	r25, Y+52	; 0x34
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	40 e8       	ldi	r20, 0x80	; 128
    2f60:	5f e3       	ldi	r21, 0x3F	; 63
    2f62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f66:	88 23       	and	r24, r24
    2f68:	2c f4       	brge	.+10     	; 0x2f74 <main+0x82>
		__ticks = 1;
    2f6a:	81 e0       	ldi	r24, 0x01	; 1
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	98 ab       	std	Y+48, r25	; 0x30
    2f70:	8f a7       	std	Y+47, r24	; 0x2f
    2f72:	3f c0       	rjmp	.+126    	; 0x2ff2 <main+0x100>
	else if (__tmp > 65535)
    2f74:	69 a9       	ldd	r22, Y+49	; 0x31
    2f76:	7a a9       	ldd	r23, Y+50	; 0x32
    2f78:	8b a9       	ldd	r24, Y+51	; 0x33
    2f7a:	9c a9       	ldd	r25, Y+52	; 0x34
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	3f ef       	ldi	r19, 0xFF	; 255
    2f80:	4f e7       	ldi	r20, 0x7F	; 127
    2f82:	57 e4       	ldi	r21, 0x47	; 71
    2f84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f88:	18 16       	cp	r1, r24
    2f8a:	4c f5       	brge	.+82     	; 0x2fde <main+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f8c:	6d a9       	ldd	r22, Y+53	; 0x35
    2f8e:	7e a9       	ldd	r23, Y+54	; 0x36
    2f90:	8f a9       	ldd	r24, Y+55	; 0x37
    2f92:	98 ad       	ldd	r25, Y+56	; 0x38
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	40 e2       	ldi	r20, 0x20	; 32
    2f9a:	51 e4       	ldi	r21, 0x41	; 65
    2f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa0:	dc 01       	movw	r26, r24
    2fa2:	cb 01       	movw	r24, r22
    2fa4:	bc 01       	movw	r22, r24
    2fa6:	cd 01       	movw	r24, r26
    2fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	98 ab       	std	Y+48, r25	; 0x30
    2fb2:	8f a7       	std	Y+47, r24	; 0x2f
    2fb4:	0f c0       	rjmp	.+30     	; 0x2fd4 <main+0xe2>
    2fb6:	88 ec       	ldi	r24, 0xC8	; 200
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	9e a7       	std	Y+46, r25	; 0x2e
    2fbc:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fbe:	8d a5       	ldd	r24, Y+45	; 0x2d
    2fc0:	9e a5       	ldd	r25, Y+46	; 0x2e
    2fc2:	01 97       	sbiw	r24, 0x01	; 1
    2fc4:	f1 f7       	brne	.-4      	; 0x2fc2 <main+0xd0>
    2fc6:	9e a7       	std	Y+46, r25	; 0x2e
    2fc8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fca:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fcc:	98 a9       	ldd	r25, Y+48	; 0x30
    2fce:	01 97       	sbiw	r24, 0x01	; 1
    2fd0:	98 ab       	std	Y+48, r25	; 0x30
    2fd2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fd6:	98 a9       	ldd	r25, Y+48	; 0x30
    2fd8:	00 97       	sbiw	r24, 0x00	; 0
    2fda:	69 f7       	brne	.-38     	; 0x2fb6 <main+0xc4>
    2fdc:	14 c0       	rjmp	.+40     	; 0x3006 <main+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fde:	69 a9       	ldd	r22, Y+49	; 0x31
    2fe0:	7a a9       	ldd	r23, Y+50	; 0x32
    2fe2:	8b a9       	ldd	r24, Y+51	; 0x33
    2fe4:	9c a9       	ldd	r25, Y+52	; 0x34
    2fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	98 ab       	std	Y+48, r25	; 0x30
    2ff0:	8f a7       	std	Y+47, r24	; 0x2f
    2ff2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ff4:	98 a9       	ldd	r25, Y+48	; 0x30
    2ff6:	9c a7       	std	Y+44, r25	; 0x2c
    2ff8:	8b a7       	std	Y+43, r24	; 0x2b
    2ffa:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ffc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ffe:	01 97       	sbiw	r24, 0x01	; 1
    3000:	f1 f7       	brne	.-4      	; 0x2ffe <main+0x10c>
    3002:	9c a7       	std	Y+44, r25	; 0x2c
    3004:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1000);
		SERVO_voidTimer1ServoSetAngleOCR1A(90);
    3006:	6a e5       	ldi	r22, 0x5A	; 90
    3008:	70 e0       	ldi	r23, 0x00	; 0
    300a:	80 e0       	ldi	r24, 0x00	; 0
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <SERVO_voidTimer1ServoSetAngleOCR1A>
		SERVO_voidTimer1ServoSetAngleOCR1A(90);
    3012:	6a e5       	ldi	r22, 0x5A	; 90
    3014:	70 e0       	ldi	r23, 0x00	; 0
    3016:	80 e0       	ldi	r24, 0x00	; 0
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <SERVO_voidTimer1ServoSetAngleOCR1A>
    301e:	80 e0       	ldi	r24, 0x00	; 0
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	aa e7       	ldi	r26, 0x7A	; 122
    3024:	b4 e4       	ldi	r27, 0x44	; 68
    3026:	8f a3       	std	Y+39, r24	; 0x27
    3028:	98 a7       	std	Y+40, r25	; 0x28
    302a:	a9 a7       	std	Y+41, r26	; 0x29
    302c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    302e:	6f a1       	ldd	r22, Y+39	; 0x27
    3030:	78 a5       	ldd	r23, Y+40	; 0x28
    3032:	89 a5       	ldd	r24, Y+41	; 0x29
    3034:	9a a5       	ldd	r25, Y+42	; 0x2a
    3036:	20 e0       	ldi	r18, 0x00	; 0
    3038:	30 e0       	ldi	r19, 0x00	; 0
    303a:	4a ef       	ldi	r20, 0xFA	; 250
    303c:	54 e4       	ldi	r21, 0x44	; 68
    303e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3042:	dc 01       	movw	r26, r24
    3044:	cb 01       	movw	r24, r22
    3046:	8b a3       	std	Y+35, r24	; 0x23
    3048:	9c a3       	std	Y+36, r25	; 0x24
    304a:	ad a3       	std	Y+37, r26	; 0x25
    304c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    304e:	6b a1       	ldd	r22, Y+35	; 0x23
    3050:	7c a1       	ldd	r23, Y+36	; 0x24
    3052:	8d a1       	ldd	r24, Y+37	; 0x25
    3054:	9e a1       	ldd	r25, Y+38	; 0x26
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	40 e8       	ldi	r20, 0x80	; 128
    305c:	5f e3       	ldi	r21, 0x3F	; 63
    305e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3062:	88 23       	and	r24, r24
    3064:	2c f4       	brge	.+10     	; 0x3070 <main+0x17e>
		__ticks = 1;
    3066:	81 e0       	ldi	r24, 0x01	; 1
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	9a a3       	std	Y+34, r25	; 0x22
    306c:	89 a3       	std	Y+33, r24	; 0x21
    306e:	3f c0       	rjmp	.+126    	; 0x30ee <main+0x1fc>
	else if (__tmp > 65535)
    3070:	6b a1       	ldd	r22, Y+35	; 0x23
    3072:	7c a1       	ldd	r23, Y+36	; 0x24
    3074:	8d a1       	ldd	r24, Y+37	; 0x25
    3076:	9e a1       	ldd	r25, Y+38	; 0x26
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	3f ef       	ldi	r19, 0xFF	; 255
    307c:	4f e7       	ldi	r20, 0x7F	; 127
    307e:	57 e4       	ldi	r21, 0x47	; 71
    3080:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3084:	18 16       	cp	r1, r24
    3086:	4c f5       	brge	.+82     	; 0x30da <main+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3088:	6f a1       	ldd	r22, Y+39	; 0x27
    308a:	78 a5       	ldd	r23, Y+40	; 0x28
    308c:	89 a5       	ldd	r24, Y+41	; 0x29
    308e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3090:	20 e0       	ldi	r18, 0x00	; 0
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	40 e2       	ldi	r20, 0x20	; 32
    3096:	51 e4       	ldi	r21, 0x41	; 65
    3098:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    309c:	dc 01       	movw	r26, r24
    309e:	cb 01       	movw	r24, r22
    30a0:	bc 01       	movw	r22, r24
    30a2:	cd 01       	movw	r24, r26
    30a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a8:	dc 01       	movw	r26, r24
    30aa:	cb 01       	movw	r24, r22
    30ac:	9a a3       	std	Y+34, r25	; 0x22
    30ae:	89 a3       	std	Y+33, r24	; 0x21
    30b0:	0f c0       	rjmp	.+30     	; 0x30d0 <main+0x1de>
    30b2:	88 ec       	ldi	r24, 0xC8	; 200
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	98 a3       	std	Y+32, r25	; 0x20
    30b8:	8f 8f       	std	Y+31, r24	; 0x1f
    30ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30bc:	98 a1       	ldd	r25, Y+32	; 0x20
    30be:	01 97       	sbiw	r24, 0x01	; 1
    30c0:	f1 f7       	brne	.-4      	; 0x30be <main+0x1cc>
    30c2:	98 a3       	std	Y+32, r25	; 0x20
    30c4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30c6:	89 a1       	ldd	r24, Y+33	; 0x21
    30c8:	9a a1       	ldd	r25, Y+34	; 0x22
    30ca:	01 97       	sbiw	r24, 0x01	; 1
    30cc:	9a a3       	std	Y+34, r25	; 0x22
    30ce:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30d0:	89 a1       	ldd	r24, Y+33	; 0x21
    30d2:	9a a1       	ldd	r25, Y+34	; 0x22
    30d4:	00 97       	sbiw	r24, 0x00	; 0
    30d6:	69 f7       	brne	.-38     	; 0x30b2 <main+0x1c0>
    30d8:	14 c0       	rjmp	.+40     	; 0x3102 <main+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30da:	6b a1       	ldd	r22, Y+35	; 0x23
    30dc:	7c a1       	ldd	r23, Y+36	; 0x24
    30de:	8d a1       	ldd	r24, Y+37	; 0x25
    30e0:	9e a1       	ldd	r25, Y+38	; 0x26
    30e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	9a a3       	std	Y+34, r25	; 0x22
    30ec:	89 a3       	std	Y+33, r24	; 0x21
    30ee:	89 a1       	ldd	r24, Y+33	; 0x21
    30f0:	9a a1       	ldd	r25, Y+34	; 0x22
    30f2:	9e 8f       	std	Y+30, r25	; 0x1e
    30f4:	8d 8f       	std	Y+29, r24	; 0x1d
    30f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30fa:	01 97       	sbiw	r24, 0x01	; 1
    30fc:	f1 f7       	brne	.-4      	; 0x30fa <main+0x208>
    30fe:	9e 8f       	std	Y+30, r25	; 0x1e
    3100:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1000);
		SERVO_voidTimer1ServoSetAngleOCR1A(180);
    3102:	64 eb       	ldi	r22, 0xB4	; 180
    3104:	70 e0       	ldi	r23, 0x00	; 0
    3106:	80 e0       	ldi	r24, 0x00	; 0
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <SERVO_voidTimer1ServoSetAngleOCR1A>
		SERVO_voidTimer1ServoSetAngleOCR1A(180);
    310e:	64 eb       	ldi	r22, 0xB4	; 180
    3110:	70 e0       	ldi	r23, 0x00	; 0
    3112:	80 e0       	ldi	r24, 0x00	; 0
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <SERVO_voidTimer1ServoSetAngleOCR1A>
    311a:	80 e0       	ldi	r24, 0x00	; 0
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	aa e7       	ldi	r26, 0x7A	; 122
    3120:	b4 e4       	ldi	r27, 0x44	; 68
    3122:	89 8f       	std	Y+25, r24	; 0x19
    3124:	9a 8f       	std	Y+26, r25	; 0x1a
    3126:	ab 8f       	std	Y+27, r26	; 0x1b
    3128:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    312a:	69 8d       	ldd	r22, Y+25	; 0x19
    312c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    312e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3130:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3132:	20 e0       	ldi	r18, 0x00	; 0
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	4a ef       	ldi	r20, 0xFA	; 250
    3138:	54 e4       	ldi	r21, 0x44	; 68
    313a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    313e:	dc 01       	movw	r26, r24
    3140:	cb 01       	movw	r24, r22
    3142:	8d 8b       	std	Y+21, r24	; 0x15
    3144:	9e 8b       	std	Y+22, r25	; 0x16
    3146:	af 8b       	std	Y+23, r26	; 0x17
    3148:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    314a:	6d 89       	ldd	r22, Y+21	; 0x15
    314c:	7e 89       	ldd	r23, Y+22	; 0x16
    314e:	8f 89       	ldd	r24, Y+23	; 0x17
    3150:	98 8d       	ldd	r25, Y+24	; 0x18
    3152:	20 e0       	ldi	r18, 0x00	; 0
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	40 e8       	ldi	r20, 0x80	; 128
    3158:	5f e3       	ldi	r21, 0x3F	; 63
    315a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    315e:	88 23       	and	r24, r24
    3160:	2c f4       	brge	.+10     	; 0x316c <main+0x27a>
		__ticks = 1;
    3162:	81 e0       	ldi	r24, 0x01	; 1
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	9c 8b       	std	Y+20, r25	; 0x14
    3168:	8b 8b       	std	Y+19, r24	; 0x13
    316a:	3f c0       	rjmp	.+126    	; 0x31ea <main+0x2f8>
	else if (__tmp > 65535)
    316c:	6d 89       	ldd	r22, Y+21	; 0x15
    316e:	7e 89       	ldd	r23, Y+22	; 0x16
    3170:	8f 89       	ldd	r24, Y+23	; 0x17
    3172:	98 8d       	ldd	r25, Y+24	; 0x18
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	3f ef       	ldi	r19, 0xFF	; 255
    3178:	4f e7       	ldi	r20, 0x7F	; 127
    317a:	57 e4       	ldi	r21, 0x47	; 71
    317c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3180:	18 16       	cp	r1, r24
    3182:	4c f5       	brge	.+82     	; 0x31d6 <main+0x2e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3184:	69 8d       	ldd	r22, Y+25	; 0x19
    3186:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3188:	8b 8d       	ldd	r24, Y+27	; 0x1b
    318a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    318c:	20 e0       	ldi	r18, 0x00	; 0
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	40 e2       	ldi	r20, 0x20	; 32
    3192:	51 e4       	ldi	r21, 0x41	; 65
    3194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3198:	dc 01       	movw	r26, r24
    319a:	cb 01       	movw	r24, r22
    319c:	bc 01       	movw	r22, r24
    319e:	cd 01       	movw	r24, r26
    31a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a4:	dc 01       	movw	r26, r24
    31a6:	cb 01       	movw	r24, r22
    31a8:	9c 8b       	std	Y+20, r25	; 0x14
    31aa:	8b 8b       	std	Y+19, r24	; 0x13
    31ac:	0f c0       	rjmp	.+30     	; 0x31cc <main+0x2da>
    31ae:	88 ec       	ldi	r24, 0xC8	; 200
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	9a 8b       	std	Y+18, r25	; 0x12
    31b4:	89 8b       	std	Y+17, r24	; 0x11
    31b6:	89 89       	ldd	r24, Y+17	; 0x11
    31b8:	9a 89       	ldd	r25, Y+18	; 0x12
    31ba:	01 97       	sbiw	r24, 0x01	; 1
    31bc:	f1 f7       	brne	.-4      	; 0x31ba <main+0x2c8>
    31be:	9a 8b       	std	Y+18, r25	; 0x12
    31c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31c2:	8b 89       	ldd	r24, Y+19	; 0x13
    31c4:	9c 89       	ldd	r25, Y+20	; 0x14
    31c6:	01 97       	sbiw	r24, 0x01	; 1
    31c8:	9c 8b       	std	Y+20, r25	; 0x14
    31ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31cc:	8b 89       	ldd	r24, Y+19	; 0x13
    31ce:	9c 89       	ldd	r25, Y+20	; 0x14
    31d0:	00 97       	sbiw	r24, 0x00	; 0
    31d2:	69 f7       	brne	.-38     	; 0x31ae <main+0x2bc>
    31d4:	14 c0       	rjmp	.+40     	; 0x31fe <main+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31d6:	6d 89       	ldd	r22, Y+21	; 0x15
    31d8:	7e 89       	ldd	r23, Y+22	; 0x16
    31da:	8f 89       	ldd	r24, Y+23	; 0x17
    31dc:	98 8d       	ldd	r25, Y+24	; 0x18
    31de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	9c 8b       	std	Y+20, r25	; 0x14
    31e8:	8b 8b       	std	Y+19, r24	; 0x13
    31ea:	8b 89       	ldd	r24, Y+19	; 0x13
    31ec:	9c 89       	ldd	r25, Y+20	; 0x14
    31ee:	98 8b       	std	Y+16, r25	; 0x10
    31f0:	8f 87       	std	Y+15, r24	; 0x0f
    31f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    31f4:	98 89       	ldd	r25, Y+16	; 0x10
    31f6:	01 97       	sbiw	r24, 0x01	; 1
    31f8:	f1 f7       	brne	.-4      	; 0x31f6 <main+0x304>
    31fa:	98 8b       	std	Y+16, r25	; 0x10
    31fc:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		SERVO_voidTimer1ServoSetAngleOCR1A(90);
    31fe:	6a e5       	ldi	r22, 0x5A	; 90
    3200:	70 e0       	ldi	r23, 0x00	; 0
    3202:	80 e0       	ldi	r24, 0x00	; 0
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <SERVO_voidTimer1ServoSetAngleOCR1A>
		SERVO_voidTimer1ServoSetAngleOCR1A(90);
    320a:	6a e5       	ldi	r22, 0x5A	; 90
    320c:	70 e0       	ldi	r23, 0x00	; 0
    320e:	80 e0       	ldi	r24, 0x00	; 0
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <SERVO_voidTimer1ServoSetAngleOCR1A>
    3216:	80 e0       	ldi	r24, 0x00	; 0
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	aa e7       	ldi	r26, 0x7A	; 122
    321c:	b4 e4       	ldi	r27, 0x44	; 68
    321e:	8b 87       	std	Y+11, r24	; 0x0b
    3220:	9c 87       	std	Y+12, r25	; 0x0c
    3222:	ad 87       	std	Y+13, r26	; 0x0d
    3224:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3226:	6b 85       	ldd	r22, Y+11	; 0x0b
    3228:	7c 85       	ldd	r23, Y+12	; 0x0c
    322a:	8d 85       	ldd	r24, Y+13	; 0x0d
    322c:	9e 85       	ldd	r25, Y+14	; 0x0e
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	4a ef       	ldi	r20, 0xFA	; 250
    3234:	54 e4       	ldi	r21, 0x44	; 68
    3236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    323a:	dc 01       	movw	r26, r24
    323c:	cb 01       	movw	r24, r22
    323e:	8f 83       	std	Y+7, r24	; 0x07
    3240:	98 87       	std	Y+8, r25	; 0x08
    3242:	a9 87       	std	Y+9, r26	; 0x09
    3244:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3246:	6f 81       	ldd	r22, Y+7	; 0x07
    3248:	78 85       	ldd	r23, Y+8	; 0x08
    324a:	89 85       	ldd	r24, Y+9	; 0x09
    324c:	9a 85       	ldd	r25, Y+10	; 0x0a
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	40 e8       	ldi	r20, 0x80	; 128
    3254:	5f e3       	ldi	r21, 0x3F	; 63
    3256:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    325a:	88 23       	and	r24, r24
    325c:	2c f4       	brge	.+10     	; 0x3268 <main+0x376>
		__ticks = 1;
    325e:	81 e0       	ldi	r24, 0x01	; 1
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	9e 83       	std	Y+6, r25	; 0x06
    3264:	8d 83       	std	Y+5, r24	; 0x05
    3266:	3f c0       	rjmp	.+126    	; 0x32e6 <main+0x3f4>
	else if (__tmp > 65535)
    3268:	6f 81       	ldd	r22, Y+7	; 0x07
    326a:	78 85       	ldd	r23, Y+8	; 0x08
    326c:	89 85       	ldd	r24, Y+9	; 0x09
    326e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3270:	20 e0       	ldi	r18, 0x00	; 0
    3272:	3f ef       	ldi	r19, 0xFF	; 255
    3274:	4f e7       	ldi	r20, 0x7F	; 127
    3276:	57 e4       	ldi	r21, 0x47	; 71
    3278:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    327c:	18 16       	cp	r1, r24
    327e:	4c f5       	brge	.+82     	; 0x32d2 <main+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3280:	6b 85       	ldd	r22, Y+11	; 0x0b
    3282:	7c 85       	ldd	r23, Y+12	; 0x0c
    3284:	8d 85       	ldd	r24, Y+13	; 0x0d
    3286:	9e 85       	ldd	r25, Y+14	; 0x0e
    3288:	20 e0       	ldi	r18, 0x00	; 0
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	40 e2       	ldi	r20, 0x20	; 32
    328e:	51 e4       	ldi	r21, 0x41	; 65
    3290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3294:	dc 01       	movw	r26, r24
    3296:	cb 01       	movw	r24, r22
    3298:	bc 01       	movw	r22, r24
    329a:	cd 01       	movw	r24, r26
    329c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a0:	dc 01       	movw	r26, r24
    32a2:	cb 01       	movw	r24, r22
    32a4:	9e 83       	std	Y+6, r25	; 0x06
    32a6:	8d 83       	std	Y+5, r24	; 0x05
    32a8:	0f c0       	rjmp	.+30     	; 0x32c8 <main+0x3d6>
    32aa:	88 ec       	ldi	r24, 0xC8	; 200
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	9c 83       	std	Y+4, r25	; 0x04
    32b0:	8b 83       	std	Y+3, r24	; 0x03
    32b2:	8b 81       	ldd	r24, Y+3	; 0x03
    32b4:	9c 81       	ldd	r25, Y+4	; 0x04
    32b6:	01 97       	sbiw	r24, 0x01	; 1
    32b8:	f1 f7       	brne	.-4      	; 0x32b6 <main+0x3c4>
    32ba:	9c 83       	std	Y+4, r25	; 0x04
    32bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32be:	8d 81       	ldd	r24, Y+5	; 0x05
    32c0:	9e 81       	ldd	r25, Y+6	; 0x06
    32c2:	01 97       	sbiw	r24, 0x01	; 1
    32c4:	9e 83       	std	Y+6, r25	; 0x06
    32c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32c8:	8d 81       	ldd	r24, Y+5	; 0x05
    32ca:	9e 81       	ldd	r25, Y+6	; 0x06
    32cc:	00 97       	sbiw	r24, 0x00	; 0
    32ce:	69 f7       	brne	.-38     	; 0x32aa <main+0x3b8>
    32d0:	1c ce       	rjmp	.-968    	; 0x2f0a <main+0x18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32d2:	6f 81       	ldd	r22, Y+7	; 0x07
    32d4:	78 85       	ldd	r23, Y+8	; 0x08
    32d6:	89 85       	ldd	r24, Y+9	; 0x09
    32d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32de:	dc 01       	movw	r26, r24
    32e0:	cb 01       	movw	r24, r22
    32e2:	9e 83       	std	Y+6, r25	; 0x06
    32e4:	8d 83       	std	Y+5, r24	; 0x05
    32e6:	8d 81       	ldd	r24, Y+5	; 0x05
    32e8:	9e 81       	ldd	r25, Y+6	; 0x06
    32ea:	9a 83       	std	Y+2, r25	; 0x02
    32ec:	89 83       	std	Y+1, r24	; 0x01
    32ee:	89 81       	ldd	r24, Y+1	; 0x01
    32f0:	9a 81       	ldd	r25, Y+2	; 0x02
    32f2:	01 97       	sbiw	r24, 0x01	; 1
    32f4:	f1 f7       	brne	.-4      	; 0x32f2 <main+0x400>
    32f6:	9a 83       	std	Y+2, r25	; 0x02
    32f8:	89 83       	std	Y+1, r24	; 0x01
    32fa:	07 ce       	rjmp	.-1010   	; 0x2f0a <main+0x18>

000032fc <__mulsi3>:
    32fc:	62 9f       	mul	r22, r18
    32fe:	d0 01       	movw	r26, r0
    3300:	73 9f       	mul	r23, r19
    3302:	f0 01       	movw	r30, r0
    3304:	82 9f       	mul	r24, r18
    3306:	e0 0d       	add	r30, r0
    3308:	f1 1d       	adc	r31, r1
    330a:	64 9f       	mul	r22, r20
    330c:	e0 0d       	add	r30, r0
    330e:	f1 1d       	adc	r31, r1
    3310:	92 9f       	mul	r25, r18
    3312:	f0 0d       	add	r31, r0
    3314:	83 9f       	mul	r24, r19
    3316:	f0 0d       	add	r31, r0
    3318:	74 9f       	mul	r23, r20
    331a:	f0 0d       	add	r31, r0
    331c:	65 9f       	mul	r22, r21
    331e:	f0 0d       	add	r31, r0
    3320:	99 27       	eor	r25, r25
    3322:	72 9f       	mul	r23, r18
    3324:	b0 0d       	add	r27, r0
    3326:	e1 1d       	adc	r30, r1
    3328:	f9 1f       	adc	r31, r25
    332a:	63 9f       	mul	r22, r19
    332c:	b0 0d       	add	r27, r0
    332e:	e1 1d       	adc	r30, r1
    3330:	f9 1f       	adc	r31, r25
    3332:	bd 01       	movw	r22, r26
    3334:	cf 01       	movw	r24, r30
    3336:	11 24       	eor	r1, r1
    3338:	08 95       	ret

0000333a <__udivmodhi4>:
    333a:	aa 1b       	sub	r26, r26
    333c:	bb 1b       	sub	r27, r27
    333e:	51 e1       	ldi	r21, 0x11	; 17
    3340:	07 c0       	rjmp	.+14     	; 0x3350 <__udivmodhi4_ep>

00003342 <__udivmodhi4_loop>:
    3342:	aa 1f       	adc	r26, r26
    3344:	bb 1f       	adc	r27, r27
    3346:	a6 17       	cp	r26, r22
    3348:	b7 07       	cpc	r27, r23
    334a:	10 f0       	brcs	.+4      	; 0x3350 <__udivmodhi4_ep>
    334c:	a6 1b       	sub	r26, r22
    334e:	b7 0b       	sbc	r27, r23

00003350 <__udivmodhi4_ep>:
    3350:	88 1f       	adc	r24, r24
    3352:	99 1f       	adc	r25, r25
    3354:	5a 95       	dec	r21
    3356:	a9 f7       	brne	.-22     	; 0x3342 <__udivmodhi4_loop>
    3358:	80 95       	com	r24
    335a:	90 95       	com	r25
    335c:	bc 01       	movw	r22, r24
    335e:	cd 01       	movw	r24, r26
    3360:	08 95       	ret

00003362 <__divmodhi4>:
    3362:	97 fb       	bst	r25, 7
    3364:	09 2e       	mov	r0, r25
    3366:	07 26       	eor	r0, r23
    3368:	0a d0       	rcall	.+20     	; 0x337e <__divmodhi4_neg1>
    336a:	77 fd       	sbrc	r23, 7
    336c:	04 d0       	rcall	.+8      	; 0x3376 <__divmodhi4_neg2>
    336e:	e5 df       	rcall	.-54     	; 0x333a <__udivmodhi4>
    3370:	06 d0       	rcall	.+12     	; 0x337e <__divmodhi4_neg1>
    3372:	00 20       	and	r0, r0
    3374:	1a f4       	brpl	.+6      	; 0x337c <__divmodhi4_exit>

00003376 <__divmodhi4_neg2>:
    3376:	70 95       	com	r23
    3378:	61 95       	neg	r22
    337a:	7f 4f       	sbci	r23, 0xFF	; 255

0000337c <__divmodhi4_exit>:
    337c:	08 95       	ret

0000337e <__divmodhi4_neg1>:
    337e:	f6 f7       	brtc	.-4      	; 0x337c <__divmodhi4_exit>
    3380:	90 95       	com	r25
    3382:	81 95       	neg	r24
    3384:	9f 4f       	sbci	r25, 0xFF	; 255
    3386:	08 95       	ret

00003388 <__divmodsi4>:
    3388:	97 fb       	bst	r25, 7
    338a:	09 2e       	mov	r0, r25
    338c:	05 26       	eor	r0, r21
    338e:	0e d0       	rcall	.+28     	; 0x33ac <__divmodsi4_neg1>
    3390:	57 fd       	sbrc	r21, 7
    3392:	04 d0       	rcall	.+8      	; 0x339c <__divmodsi4_neg2>
    3394:	14 d0       	rcall	.+40     	; 0x33be <__udivmodsi4>
    3396:	0a d0       	rcall	.+20     	; 0x33ac <__divmodsi4_neg1>
    3398:	00 1c       	adc	r0, r0
    339a:	38 f4       	brcc	.+14     	; 0x33aa <__divmodsi4_exit>

0000339c <__divmodsi4_neg2>:
    339c:	50 95       	com	r21
    339e:	40 95       	com	r20
    33a0:	30 95       	com	r19
    33a2:	21 95       	neg	r18
    33a4:	3f 4f       	sbci	r19, 0xFF	; 255
    33a6:	4f 4f       	sbci	r20, 0xFF	; 255
    33a8:	5f 4f       	sbci	r21, 0xFF	; 255

000033aa <__divmodsi4_exit>:
    33aa:	08 95       	ret

000033ac <__divmodsi4_neg1>:
    33ac:	f6 f7       	brtc	.-4      	; 0x33aa <__divmodsi4_exit>
    33ae:	90 95       	com	r25
    33b0:	80 95       	com	r24
    33b2:	70 95       	com	r23
    33b4:	61 95       	neg	r22
    33b6:	7f 4f       	sbci	r23, 0xFF	; 255
    33b8:	8f 4f       	sbci	r24, 0xFF	; 255
    33ba:	9f 4f       	sbci	r25, 0xFF	; 255
    33bc:	08 95       	ret

000033be <__udivmodsi4>:
    33be:	a1 e2       	ldi	r26, 0x21	; 33
    33c0:	1a 2e       	mov	r1, r26
    33c2:	aa 1b       	sub	r26, r26
    33c4:	bb 1b       	sub	r27, r27
    33c6:	fd 01       	movw	r30, r26
    33c8:	0d c0       	rjmp	.+26     	; 0x33e4 <__udivmodsi4_ep>

000033ca <__udivmodsi4_loop>:
    33ca:	aa 1f       	adc	r26, r26
    33cc:	bb 1f       	adc	r27, r27
    33ce:	ee 1f       	adc	r30, r30
    33d0:	ff 1f       	adc	r31, r31
    33d2:	a2 17       	cp	r26, r18
    33d4:	b3 07       	cpc	r27, r19
    33d6:	e4 07       	cpc	r30, r20
    33d8:	f5 07       	cpc	r31, r21
    33da:	20 f0       	brcs	.+8      	; 0x33e4 <__udivmodsi4_ep>
    33dc:	a2 1b       	sub	r26, r18
    33de:	b3 0b       	sbc	r27, r19
    33e0:	e4 0b       	sbc	r30, r20
    33e2:	f5 0b       	sbc	r31, r21

000033e4 <__udivmodsi4_ep>:
    33e4:	66 1f       	adc	r22, r22
    33e6:	77 1f       	adc	r23, r23
    33e8:	88 1f       	adc	r24, r24
    33ea:	99 1f       	adc	r25, r25
    33ec:	1a 94       	dec	r1
    33ee:	69 f7       	brne	.-38     	; 0x33ca <__udivmodsi4_loop>
    33f0:	60 95       	com	r22
    33f2:	70 95       	com	r23
    33f4:	80 95       	com	r24
    33f6:	90 95       	com	r25
    33f8:	9b 01       	movw	r18, r22
    33fa:	ac 01       	movw	r20, r24
    33fc:	bd 01       	movw	r22, r26
    33fe:	cf 01       	movw	r24, r30
    3400:	08 95       	ret

00003402 <__prologue_saves__>:
    3402:	2f 92       	push	r2
    3404:	3f 92       	push	r3
    3406:	4f 92       	push	r4
    3408:	5f 92       	push	r5
    340a:	6f 92       	push	r6
    340c:	7f 92       	push	r7
    340e:	8f 92       	push	r8
    3410:	9f 92       	push	r9
    3412:	af 92       	push	r10
    3414:	bf 92       	push	r11
    3416:	cf 92       	push	r12
    3418:	df 92       	push	r13
    341a:	ef 92       	push	r14
    341c:	ff 92       	push	r15
    341e:	0f 93       	push	r16
    3420:	1f 93       	push	r17
    3422:	cf 93       	push	r28
    3424:	df 93       	push	r29
    3426:	cd b7       	in	r28, 0x3d	; 61
    3428:	de b7       	in	r29, 0x3e	; 62
    342a:	ca 1b       	sub	r28, r26
    342c:	db 0b       	sbc	r29, r27
    342e:	0f b6       	in	r0, 0x3f	; 63
    3430:	f8 94       	cli
    3432:	de bf       	out	0x3e, r29	; 62
    3434:	0f be       	out	0x3f, r0	; 63
    3436:	cd bf       	out	0x3d, r28	; 61
    3438:	09 94       	ijmp

0000343a <__epilogue_restores__>:
    343a:	2a 88       	ldd	r2, Y+18	; 0x12
    343c:	39 88       	ldd	r3, Y+17	; 0x11
    343e:	48 88       	ldd	r4, Y+16	; 0x10
    3440:	5f 84       	ldd	r5, Y+15	; 0x0f
    3442:	6e 84       	ldd	r6, Y+14	; 0x0e
    3444:	7d 84       	ldd	r7, Y+13	; 0x0d
    3446:	8c 84       	ldd	r8, Y+12	; 0x0c
    3448:	9b 84       	ldd	r9, Y+11	; 0x0b
    344a:	aa 84       	ldd	r10, Y+10	; 0x0a
    344c:	b9 84       	ldd	r11, Y+9	; 0x09
    344e:	c8 84       	ldd	r12, Y+8	; 0x08
    3450:	df 80       	ldd	r13, Y+7	; 0x07
    3452:	ee 80       	ldd	r14, Y+6	; 0x06
    3454:	fd 80       	ldd	r15, Y+5	; 0x05
    3456:	0c 81       	ldd	r16, Y+4	; 0x04
    3458:	1b 81       	ldd	r17, Y+3	; 0x03
    345a:	aa 81       	ldd	r26, Y+2	; 0x02
    345c:	b9 81       	ldd	r27, Y+1	; 0x01
    345e:	ce 0f       	add	r28, r30
    3460:	d1 1d       	adc	r29, r1
    3462:	0f b6       	in	r0, 0x3f	; 63
    3464:	f8 94       	cli
    3466:	de bf       	out	0x3e, r29	; 62
    3468:	0f be       	out	0x3f, r0	; 63
    346a:	cd bf       	out	0x3d, r28	; 61
    346c:	ed 01       	movw	r28, r26
    346e:	08 95       	ret

00003470 <_exit>:
    3470:	f8 94       	cli

00003472 <__stop_program>:
    3472:	ff cf       	rjmp	.-2      	; 0x3472 <__stop_program>
